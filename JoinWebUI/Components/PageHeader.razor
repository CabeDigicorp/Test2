@using Syncfusion.Blazor
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.SplitButtons
@using JoinWebUI.Utilities

@inject Log Log

<div class="mb-4 d-flex justify-content-between align-items-center">
    <div>
        <h4 class="my-1 text-primary fw-bold">@(Title)</h4>

        @if (!string.IsNullOrWhiteSpace(SubTitle))
        {
            <h5 class="my-1 text-primary fw-bold">@(SubTitle)</h5>
        }

        @if ((Breadcrumbs?.Count() ?? -2) > 0)
        {
            <SfBreadcrumb EnableActiveItemNavigation="true">
                <BreadcrumbItems>
                    @*<BreadcrumbItem IconCss="e-icons e-home fs-underlined" Url="/" />*@
                    @for (int i = 0; i < Breadcrumbs!.Count() - 1; i++)
                    {
                        <BreadcrumbItem Text="@Breadcrumbs!.ElementAt(i).Text" Url="@Breadcrumbs!.ElementAt(i).Url" />
                    }
                </BreadcrumbItems>
            </SfBreadcrumb>
        }
    </div>

    <div class="d-flex justify-content-end mb-2">
        @if (ShowAggiornaButton)
        {
            <div class="d-flex justify-content-end mb-2">
                <SfButton CssClass="e-inherit e-caret-hide main-submenu" IconCss="icon-aggiorna icon-aggiorna-header" OnClick="@OnAggiorna">
                </SfButton>
            </div>
        }

        @if (ShowRightMenu && (DataElementsMenu != null && DataElementsMenu.Any()))
        {
            <div class="d-flex justify-content-end mb-2">
                <SfDropDownButton HeaderPlacement="HeaderPosition.Right" aria-label="menu" CssClass="e-inherit e-caret-hide main-submenu" IconPosition="SplitButtonIconPosition.Top" style="font-size: 20px" EnableRtl="false" OpenDirection="Direction.Left">
                    <i class="@DataElementsMenu?.FirstOrDefault(element => element.isSelected).iconType icon-grande"></i>
                    <DropDownButtonEvents ItemSelected="OnDropDownButtonClick" />
                    <DropDownMenuItems>
                        @foreach (var elemento in DataElementsMenu ?? Enumerable.Empty<(string pageName, int idNumber, string iconType, bool isSelected)>())
                        {
                            <DropDownMenuItem IconCss="@elemento.iconType" Text="@elemento.pageName" Id="@elemento.idNumber.ToString()" Disabled=false></DropDownMenuItem>
                        }
                    </DropDownMenuItems>
                </SfDropDownButton>
            </div>
        }
    </div>
</div>


@*@if (!string.IsNullOrWhiteSpace(ObjectType) && !string.IsNullOrWhiteSpace(ObjectName))
{
    <h5><span class="fw-normal">@(ObjectType): </span><span class="fst-italic fw-bold text-secondary">@(ObjectName)</span></h5>
}*@


<style>
    .aggiorna-btn {
        margin-right: 0.5rem;
        align-self: center;
        font-size: 2rem;
    }

        .aggiorna-btn:hover {
            background-color: rgba(243,164,1,1) !important;
        }

    .icon-aggiorna-header {
        font-size: 2rem !important;
    }

    .e-dropdown-btn.e-custom {
        width: 40px;
        padding: 0px;
    }

    .icon-grande {
        font-size: 40px;
    }

    .e-dropdown-btn.e-custom .e-search::before {
        font-size: 40px;
    }

    .main-submenu {
        border-radius: 0px !important;
    }

        .main-submenu:hover {
            background-color: rgba(243,164,1,1) !important;
        }

        .main-submenu ul {
            color: rgba(0,0,0,1) !important;
            background-color: white !important;
            border-color: rgba(0,0,0,1) !important;
            border-radius: 1px !important;
            border-width: 1px !important;
            border-top-width: 1px !important;
            position: fixed !important;
            right: 15px !important;
        }

            .main-submenu ul .e-item.e-separator {
                color: rgba(0,0,0,1) !important;
                height: auto !important;
                line-height: 40px !important;
                font-size: 20px !important;
                vertical-align: middle !important;
            }

            .main-submenu ul .e-item {
                color: rgba(0,0,0,1) !important;
                height: 40px !important;
                line-height: 40px !important;
                font-size: 20px !important;
                vertical-align: middle !important;
            }

                .main-submenu ul .e-item:hover,
                .main-submenu ul .e-item:active {
                    /*                background-color: white !important;
                                filter: brightness(80%) !important;*/
                    background-color: rgba(243,164,1,1) !important;
                }

                .main-submenu ul .e-item .e-menu-icon {
                    color: rgba(0,0,0,1) !important;
                    height: 40px !important;
                    line-height: 40px !important;
                    font-size: 24px !important;
                    vertical-align: middle !important;
                    padding: 0px !important;
                }
</style>

@if (RequestError)
{
    <div class="alert alert-danger mb-4" role="alert">
        @RequestMessage
    </div>
}
else if (RequestSuccess)
{
    <div class="alert alert-success mb-4" role="alert">
        @RequestMessage
    </div>
}




@code {

    [Parameter] public string Title { get; set; } = "[Titolo]";
    [Parameter] public string SubTitle { get; set; } = null;
    [Parameter] public string ObjectType { get; set; } = null;
    [Parameter] public string ObjectName { get; set; } = null;
    [Parameter] public IEnumerable<(string Text, string Url)> Breadcrumbs { get; set; } = new List<(string, string)>();

    [Parameter] public bool ShowRightMenu { get; set; } = true;
    [Parameter] public IEnumerable<(string pageName, int idNumber, string iconType, bool isSelected)>? DataElementsMenu { get; set; }
    [Parameter] public EventCallback<MenuEventArgs> OnHamburgerItemSelectedMenu { get; set; }
    [Parameter] public List<Func<bool, Task<bool>>> InteractWithProjectDetails { get; set; } = new List<Func<bool, Task<bool>>>();
    [Parameter] public bool RequestError { get; set; } = false;
    [Parameter] public bool RequestSuccess { get; set; } = false;
    [Parameter] public string RequestMessage { get; set; } = string.Empty;

    [Parameter] public bool ShowAggiornaButton { get; set; } = false;

    private void OnDropDownButtonClick(MenuEventArgs menuEventArgs)
    {
        try
        {
            if (OnHamburgerItemSelectedMenu.HasDelegate) { _ = OnHamburgerItemSelectedMenu.InvokeAsync(menuEventArgs); }
        }
        catch (Exception ex)
        {
            Log.Error(ex.Message);
            throw;
        }

    }

    internal async void OnAggiorna(MouseEventArgs? args = null)
    {
        try
        {
            foreach (var func in InteractWithProjectDetails)
            {
                try
                {
                    await func.Invoke(true);
                }
                catch (Exception ex)
                {
                    Log.Error(ex.Message);
                    continue;
                }
            }
        }
        catch (Exception ex)
        {
            Log.Error(ex.Message);
        }
    }
}

@page "/clienti/{ClienteId:guid}/settori"
@using AutoMapper
@using JoinWebUI.Extensions
@using JoinWebUI.Utilities
@using ModelData.Dto
@using System.Collections.ObjectModel
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns


@inject JoinWebApiClient _apiClient
@inject IMapper _mapper
@inject NavigationManager _navMan
@inject Syncfusion.Blazor.Popups.SfDialogService _dialogService

@attribute [Authorize(Roles = RuoliAuth0.REGISTERED)]

<PageTitle>JoinWeb - Settori del Cliente</PageTitle>

<PageHeader Title="Settori"
            ObjectType="Cliente"
            ObjectName="@_cliente.Info"
            Breadcrumbs="@_breadcrumbs"
            RequestError="@_requestError"
            RequestMessage="@_requestErrorMessage" />


<div id="sectors" class="control-section row" style="min-height:300px">
    <ListBoxCard ComplexDataSource=@_settori
                 OnClickNew=@OnClickAdd
                 OnClickEdit=@OnClickEdit
                 DisableDelete=@((_settori?.Count() ?? -1) < 1)
                 OnClickDelete=@OnClickDelete
                 OnClickRefresh=@OnClickRefresh
                 MultiSelect=false
                 OnValueChanged=@OnSelectedChanged
                 Title="Settori associati al Cliente"
                 NoRecordsString="Nessun settore trovato"
                 Width="100%"
                 Height="stretch"
                 MinHeight="180px" />
</div>

<StringInputPopup IsVisible=@(_addDialogOpen || _editDialogOpen)
                  OnSubmit=@(OnAddEditSubmit)
                  OnCancel=@(OnAddEditCancel)
                  PopupTitle=@(_addEditTitle)
                  Value="@(_editDialogOpen ? _addEditValue : string.Empty)" />


@code {

    [Parameter]
    public Guid? ClienteId { get; set; }

    private ClienteModel _cliente = new ClienteModel();


    private bool _editMode;

    private ObservableCollection<IListBoxCardBaseModel> _settori  = new ObservableCollection<IListBoxCardBaseModel>();
    private IListBoxCardBaseModel? _selectedSettore = null;

    private bool _newSettorePopupVisible = false;

    private IEnumerable<(string, string)> _breadcrumbs = new List<(string, string)>();

    private bool _requestError = false;
    private string _requestErrorMessage = "";


    private bool _addDialogOpen = false, _editDialogOpen = false;
    private string _addEditTitle = string.Empty;
    private string _addEditValue = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        _requestError = false;
        _requestErrorMessage = "";



        if ((ClienteId != null && ClienteId != Guid.Empty))
        {
            _editMode = true;

            var clienteResult = await _apiClient.JsonGetAsync<ClienteDto>("clienti", ClienteId.ToString());
            if (!clienteResult.Success)
            {
                _requestError = true;
                _requestErrorMessage = "Errore #1 - Cliente";
                return;
            }
            _cliente = _mapper.Map<ClienteModel>(clienteResult.ResponseContentData!);

            _breadcrumbs = new List<(string, string)>()
                        {
                ("Amministrazione Clienti", "/clienti"),
                (_cliente.Info, "/clienti/" + ClienteId.ToString()),
                ("Settori", "/clienti/" + ClienteId.ToString() + "/settori")
                        };

            await GetSettori();

        }
        else
        {
            _requestError = true;
            _requestErrorMessage = "Errore #0 - Parametri cliente";
            return;
        }

        StateHasChanged();

    }

    protected async Task OnClickRefresh()
    {
        _requestError = false;
        _requestErrorMessage = "";

        if ((ClienteId != null && ClienteId != Guid.Empty))
        {
            await GetSettori();

        }
        else
        {
            _requestError = true;
            _requestErrorMessage = "Errore #0 - Parametri cliente";
            return;
        }


        StateHasChanged();

    }

    private async Task GetSettori()
    {
        var settoriResult = await _apiClient.JsonGetAsync<IEnumerable<SettoreDto>>("settori/get-by-cliente", query: new Dictionary<string, string>() { { "clienteId", _cliente.IdString } }); ;
        if (!settoriResult.Success)
        {
            _requestError = true;
            _requestErrorMessage = "Errore #2 - Settori";
            return;
        }

        var converted = _mapper.Map<List<SettoreModel>>(settoriResult.ResponseContentData!);
        _settori.Clear();
        foreach (var s in converted)
        {
            _settori.Add(s);
        }
    }


    private void OnSelectedChanged(string[] selectedValues)
    {
        if ((selectedValues?.Count() ?? -1) == 1)
        {
            _selectedSettore = _settori.Where(s => selectedValues![0] == s.IdString).First();
        }
        else
        {
            _selectedSettore = null;
        }

        StateHasChanged();
    }

    private async Task OnClickAdd()
    {
        _addEditTitle = "Crea nuovo settore";
        _addEditValue = string.Empty;
        _addDialogOpen = true;
    }

    private async Task OnClickEdit()
    {
        if (_selectedSettore != null)
        {
            _addEditTitle = "Rinomina settore";
            _addEditValue = (_selectedSettore as SettoreModel)!.Nome;
            _editDialogOpen = true;
        }
    }

    private async Task OnAddEditSubmit(string value)
    {
        if (!String.IsNullOrWhiteSpace(value))
        {
            if (_addDialogOpen)
            {

                SettoreCreateDto dto = new SettoreCreateDto();
                dto.ClienteId = ClienteId ?? Guid.Empty;
                dto.Nome = value;

                var result = await _apiClient.JsonPostAsync<SettoreDto>("settori", dto);
                if (result.Success)
                {
                    SettoreModel settore = _mapper.Map<SettoreModel>(result.ResponseContentData);
                    _settori.Add(settore);
                }
                else
                {
                    _requestError = true;
                    _requestErrorMessage = "Errore creazione nuovo settore";
                    return;
                }
            }
            else if (_editDialogOpen)
            {
                //AddEditValue = value;
                var casted = _selectedSettore as SettoreModel;
                if (casted != null)
                {
                    SettoreUpdateDto dto = new SettoreUpdateDto();
                    dto.Id = casted.Id;
                    dto.Nome = casted.Nome = value; ;

                    var result = await _apiClient.JsonPutAsync("settori", _selectedSettore.IdString, dto);
                    if (result.Success)
                    {
                        _selectedSettore = casted;
                    }
                    else
                    {
                        _requestError = true;
                        _requestErrorMessage = "Errore rinomina settore";
                        return;
                    }
                }

            }

            StateHasChanged();
        }

        _addDialogOpen = _editDialogOpen = false;
    }

    private void OnAddEditCancel()
    {
        _addDialogOpen = _editDialogOpen = false;
    }


    private async Task OnClickDelete()
    {
        bool confirm = await _dialogService.ConfirmAsync("Eliminare il settore '" + _selectedSettore!.TextLine1 + "'?\r\n ATTENZIONE: l'operazione non potrà essere annullata", "Conferma eliminazione", DialogOptions.ConfirmOptions);

        if (confirm)
        {
            var result = await _apiClient.JsonDeleteAsync("settori", _selectedSettore!.IdString);
            if (result.Success)
            {
                _settori!.Remove(_selectedSettore);
                _selectedSettore = null;
            }
            else
            {
                _requestError = true;
                _requestErrorMessage = "Errore eliminazione settore";
                return;
            }

            StateHasChanged();
        }
    }

}

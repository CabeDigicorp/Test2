/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/examples/jsm/exporters/MMDExporter.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{Matrix4,Quaternion,Vector3}from"three";import{MMDParser}from"../libs/mmdparser.module.js";class MMDExporter{constructor(){console.warn("THREE.MMDExporter: The module has been deprecated and will be removed with r172. Please migrate to https://github.com/takahirox/three-mmd-loader instead.")}parseVpd(e,t,o){if(!0!==e.isSkinnedMesh)return console.warn("THREE.MMDExporter: parseVpd() requires SkinnedMesh instance."),null;function n(e){Math.abs(e)<1e-6&&(e=0);let t=e.toString();-1===t.indexOf(".")&&(t+="."),t+="000000";const o=t.indexOf(".");return t.slice(0,o)+"."+t.slice(o+1,o+7)}function r(e){const t=[];for(let o=0,r=e.length;o<r;o++)t.push(n(e[o]));return t.join(",")}e.updateMatrixWorld(!0);const s=e.skeleton.bones,i=getBindBones(e),a=new Vector3,u=new Quaternion,c=new Quaternion,l=new Matrix4,h=[];h.push("Vocaloid Pose Data file"),h.push(""),h.push((""!==e.name?e.name.replace(/\s/g,"_"):"skin")+".osm;"),h.push(s.length+";"),h.push("");for(let e=0,t=s.length;e<t;e++){const t=s[e],n=i[e];!0===o&&void 0!==t.userData.ik&&void 0!==t.userData.ik.originalMatrix?l.fromArray(t.userData.ik.originalMatrix):l.copy(t.matrix),a.setFromMatrixPosition(l),u.setFromRotationMatrix(l);const p=a.sub(n.position).toArray(),d=c.copy(n.quaternion).conjugate().multiply(u).toArray();p[2]=-p[2],d[0]=-d[0],d[1]=-d[1],h.push("Bone"+e+"{"+t.name),h.push("  "+r(p)+";"),h.push("  "+r(d)+";"),h.push("}"),h.push("")}h.push("");const p=h.join("\n");return!0===t?unicodeToShiftjis(p):p}}let u2sTable;function unicodeToShiftjis(e){if(void 0===u2sTable){const e=(new MMDParser.CharsetEncoder).s2uTable;u2sTable={};const t=Object.keys(e);for(let o=0,n=t.length;o<n;o++){let n=t[o];const r=e[n];n=parseInt(n),u2sTable[r]=n}}const t=[];for(let o=0,n=e.length;o<n;o++){const n=e.charCodeAt(o),r=u2sTable[n];if(void 0===r)throw new Error("cannot convert charcode 0x"+n.toString(16));r>255?(t.push(r>>8&255),t.push(255&r)):t.push(255&r)}return new Uint8Array(t)}function getBindBones(e){const t=e.clone();return t.pose(),t.skeleton.bones}export{MMDExporter};
//# sourceMappingURL=/sm/f2ba1352f059e34380af9175f60a187686da86257565d8954f8c36bcfcf15c31.map
/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/examples/jsm/transpiler/GLSLDecoder.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{Program,FunctionDeclaration,For,AccessorElements,Ternary,Varying,DynamicElement,StaticElement,FunctionParameter,Unary,Conditional,VariableDeclaration,Operator,Number,String,FunctionCall,Return,Accessor,Uniform}from"./AST.js";const unaryOperators=["+","-","~","!","++","--"],precedenceOperators=["*","/","%","-","+","<<",">>","<",">","<=",">=","==","!=","&","^","|","&&","^^","||","?","=","+=","-=","*=","/=","%=","^=","&=","|=","<<=",">>=",","].reverse(),associativityRightToLeft=["=","+=","-=","*=","/=","%=","^=","&=","|=","<<=",">>=",",","?",":"],spaceRegExp=/^((\t| )\n*)+/,lineRegExp=/^\n+/,commentRegExp=/^\/\*[\s\S]*?\*\//,inlineCommentRegExp=/^\/\/.*?(\n|$)/,numberRegExp=/^((0x\w+)|(\.?\d+\.?\d*((e-?\d+)|\w)?))/,stringDoubleRegExp=/^(\"((?:[^"\\]|\\.)*)\")/,stringSingleRegExp=/^(\'((?:[^'\\]|\\.)*)\')/,literalRegExp=/^[A-Za-z](\w|\.)*/,operatorsRegExp=new RegExp("^(\\"+["<<=",">>=","++","--","<<",">>","+=","-=","*=","/=","%=","&=","^^","^=","|=","<=",">=","==","!=","&&","||","(",")","[","]","{","}",".",",",";","!","=","~","*","/","%","+","-","<",">","&","^","|","?",":","#"].join("$").split("").join("\\").replace(/\\\$/g,"|")+")");function getGroupDelta(e){return"("===e||"["===e||"{"===e?1:")"===e||"]"===e||"}"===e?-1:0}class Token{constructor(e,t,s,r){this.tokenizer=e,this.type=t,this.str=s,this.pos=r,this.tag=null}get endPos(){return this.pos+this.str.length}get isNumber(){return this.type===Token.NUMBER}get isString(){return this.type===Token.STRING}get isLiteral(){return this.type===Token.LITERAL}get isOperator(){return this.type===Token.OPERATOR}}Token.LINE="line",Token.COMMENT="comment",Token.NUMBER="number",Token.STRING="string",Token.LITERAL="literal",Token.OPERATOR="operator";const TokenParserList=[{type:Token.LINE,regexp:lineRegExp,isTag:!0},{type:Token.COMMENT,regexp:commentRegExp,isTag:!0},{type:Token.COMMENT,regexp:inlineCommentRegExp,isTag:!0},{type:Token.NUMBER,regexp:numberRegExp},{type:Token.STRING,regexp:stringDoubleRegExp,group:2},{type:Token.STRING,regexp:stringSingleRegExp,group:2},{type:Token.LITERAL,regexp:literalRegExp},{type:Token.OPERATOR,regexp:operatorsRegExp}];class Tokenizer{constructor(e){this.source=e,this.position=0,this.tokens=[]}tokenize(){let e=this.readToken();for(;e;)this.tokens.push(e),e=this.readToken();return this}skip(...e){let t=this.source.substr(this.position),s=e.length;for(;s--;){const r=e[s].exec(t),n=r?r[0].length:0;n>0&&(this.position+=n,t=this.source.substr(this.position),s=e.length)}return t}readToken(){const e=this.skip(spaceRegExp);for(var t=0;t<TokenParserList.length;t++){const s=TokenParserList[t],r=s.regexp.exec(e);if(r){const e=new Token(this,s.type,r[s.group||0],this.position);if(this.position+=r[0].length,s.isTag){const t=this.readToken();return t&&(t.tag=e),t}return e}}}}const isType=e=>/void|bool|float|u?int|(u|i)?vec[234]/.test(e);class GLSLDecoder{constructor(){this.index=0,this.tokenizer=null,this.keywords=[],this._currentFunction=null,this.addPolyfill("gl_FragCoord","vec3 gl_FragCoord = vec3( screenCoordinate.x, screenCoordinate.y.oneMinus(), screenCoordinate.z );")}addPolyfill(e,t){return this.keywords.push({name:e,polyfill:t}),this}get tokens(){return this.tokenizer.tokens}readToken(){return this.tokens[this.index++]}getToken(e=0){return this.tokens[this.index+e]}getTokensUntil(e,t,s=0){const r=[];let n=0;for(let i=s;i<t.length;i++){const s=t[i];if(n+=getGroupDelta(s.str),r.push(s),0===n&&s.str===e)break}return r}readTokensUntil(e){const t=this.getTokensUntil(e,this.tokens,this.index);return this.index+=t.length,t}parseExpressionFromTokens(e){if(0===e.length)return null;const t=e[0],s=e[e.length-1];let r=0;for(const t of precedenceOperators){const s=(s,n=!1)=>{const i=e[s];if(r+=getGroupDelta(i.str),i.isOperator&&0!==s&&s!==e.length-1){if(0===r&&i.str===t){if("?"===t){const t=e.slice(0,s),r=this.getTokensUntil(":",e,s+1).slice(0,-1),n=e.slice(s+r.length+2),i=this.parseExpressionFromTokens(t),o=this.parseExpressionFromTokens(r),a=this.parseExpressionFromTokens(n);return new Ternary(i,o,a)}{const r=this.parseExpressionFromTokens(e.slice(0,s)),n=this.parseExpressionFromTokens(e.slice(s+1,e.length));return this._evalOperator(new Operator(t,r,n))}}if(n){if(r>0)return this.parseExpressionFromTokens(e.slice(s))}else if(r<0)return this.parseExpressionFromTokens(e.slice(0,s))}};if(associativityRightToLeft.includes(t))for(let t=0;t<e.length;t++){const e=s(t);if(e)return e}else for(let t=e.length-1;t>=0;t--){const e=s(t,!0);if(e)return e}}if(t.isOperator)for(const s of unaryOperators)if(t.str===s){const t=this.parseExpressionFromTokens(e.slice(1));return new Unary(s,t)}if(s.isOperator)for(const t of unaryOperators)if(s.str===t){const s=this.parseExpressionFromTokens(e.slice(0,e.length-1));return new Unary(t,s,!0)}if("("===t.str){const t=this.getTokensUntil(")",e),s=this.parseExpressionFromTokens(t.slice(1,t.length-1)),r=e[t.length];if(r){const n=e.slice(t.length+1),i=this.parseExpressionFromTokens(n);return this._evalOperator(new Operator(r.str,s,i))}return s}if(t.isNumber){let e;const s=/^(0x)/.test(t.str);e=s?"int":/u$/.test(t.str)?"uint":/f|e|\./.test(t.str)?"float":"int";let r=t.str.replace(/u|i$/,"");return!1===s&&(r=r.replace(/f$/,"")),new Number(r,e)}if(t.isString)return new String(t.str);if(t.isLiteral){if("return"===t.str)return new Return(this.parseExpressionFromTokens(e.slice(1)));const s=e[1];if(s){if("("===s.str){const s=this.parseFunctionParametersFromTokens(e.slice(2,e.length-1));return new FunctionCall(t.str,s)}if("["===s.str){const s=[];let r=e.slice(1);for(;r.length>0;){const e=r[0];if("["===e.str){const e=this.getTokensUntil("]",r),t=this.parseExpressionFromTokens(e.slice(1,e.length-1));r=r.slice(e.length),s.push(new DynamicElement(t))}else{if("."!==e.str){console.error("Unknown accessor expression",e);break}{const e=r.slice(1,2),t=this.parseExpressionFromTokens(e);r=r.slice(2),s.push(new StaticElement(t))}}}return new AccessorElements(t.str,s)}}return new Accessor(t.str)}}parseFunctionParametersFromTokens(e){if(0===e.length)return[];const t=[];let s=this.parseExpressionFromTokens(e);for(;","===s.type;)t.push(s.left),s=s.right;return t.push(s),t}parseExpression(){const e=this.readTokensUntil(";");return this.parseExpressionFromTokens(e.slice(0,e.length-1))}parseFunctionParams(e){const t=[];for(let s=0;s<e.length;s++){const r="const"===e[s].str;r&&s++;let n=e[s].str;/^(in|out|inout)$/.test(n)?s++:n=null;const i=e[s++].str,o=e[s++].str;if(t.push(new FunctionParameter(i,o,n,r)),e[s]&&","!==e[s].str)throw new Error('Expected ","')}return t}parseFunction(){const e=this.readToken().str,t=this.readToken().str,s=this.readTokensUntil(")"),r=this.parseFunctionParams(s.slice(1,s.length-1)),n=new FunctionDeclaration(e,t,r);return this._currentFunction=n,this.parseBlock(n),this._currentFunction=null,n}parseVariablesFromToken(e,t){let s=0;const r="const"===e[0].str;r&&s++,t=t||e[s++].str;const n=e[s++].str;let i=null,o=null;if(e[s]){const r=this.getTokensUntil(",",e,s);if("="===r[0].str){const e=r.slice(1);","===e[e.length-1].str&&e.pop(),i=this.parseExpressionFromTokens(e)}const n=e.slice(r.length+(s-1));n[0]&&","===n[0].str&&(o=this.parseVariablesFromToken(n.slice(1),t))}return new VariableDeclaration(t,n,i,o,r)}parseVariables(){const e=this.readTokensUntil(";");return this.parseVariablesFromToken(e.slice(0,e.length-1))}parseUniform(){const e=this.readTokensUntil(";"),t=e[1].str,s=e[2].str;return new Uniform(t,s)}parseVarying(){const e=this.readTokensUntil(";"),t=e[1].str,s=e[2].str;return new Varying(t,s)}parseReturn(){this.readToken();const e=this.parseExpression();return new Return(e)}parseFor(){this.readToken();const e=this.readTokensUntil(")").slice(1,-1),t=this.getTokensUntil(";",e,0).slice(0,-1),s=this.getTokensUntil(";",e,t.length+1).slice(0,-1),r=e.slice(t.length+s.length+2);let n;n=t[0]&&isType(t[0].str)?this.parseVariablesFromToken(t):this.parseExpressionFromTokens(t);const i=this.parseExpressionFromTokens(s),o=this.parseExpressionFromTokens(r),a=new For(n,i,o);return"{"===this.getToken().str?this.parseBlock(a):a.body.push(this.parseExpression()),a}parseIf(){const e=()=>{this.readToken();const e=this.readTokensUntil(")");return this.parseExpressionFromTokens(e.slice(1,e.length-1))},t=e=>{"{"===this.getToken().str?this.parseBlock(e):e.body.push(this.parseExpression())},s=new Conditional(e());t(s);let r=s;for(;this.getToken()&&"else"===this.getToken().str;){this.readToken();const s=r;r="if"===this.getToken().str?new Conditional(e()):new Conditional,s.elseConditional=r,t(r)}return s}parseBlock(e){"{"===this.getToken().str&&this.readToken();let t=0;for(;this.index<this.tokens.length;){const s=this.getToken();let r=null;if(t+=getGroupDelta(s.str),t<0){this.readToken();break}s.isLiteral&&(r="const"===s.str?this.parseVariables():"uniform"===s.str?this.parseUniform():"varying"===s.str?this.parseVarying():isType(s.str)?"("===this.getToken(2).str?this.parseFunction():this.parseVariables():"return"===s.str?this.parseReturn():"if"===s.str?this.parseIf():"for"===s.str?this.parseFor():this.parseExpression()),r?e.body.push(r):this.index++}}_evalOperator(e){if(e.type.includes("=")){const t=this._getFunctionParameter(e.left.property);void 0!==t&&(t.immutable=!1)}return e}_getFunctionParameter(e){if(this._currentFunction)for(const t of this._currentFunction.params)if(t.name===e)return t}parse(e){let t="";for(const s of this.keywords)new RegExp(`(^|\\b)${s.name}($|\\b)`,"gm").test(e)&&(t+=s.polyfill+"\n");t&&(t="// Polyfills\n\n"+t+"\n"),this.index=0,this.tokenizer=new Tokenizer(t+e).tokenize();const s=new Program;return this.parseBlock(s),s}}export default GLSLDecoder;
//# sourceMappingURL=/sm/48937051a3428c0148ddecc7c4b3bb6a197e026efb54cc103abeba6a187014aa.map
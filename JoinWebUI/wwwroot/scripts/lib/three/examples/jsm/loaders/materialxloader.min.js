/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/examples/jsm/loaders/MaterialXLoader.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{FileLoader,Loader,TextureLoader,MeshBasicNodeMaterial,MeshPhysicalNodeMaterial,RepeatWrapping}from"three";import{float,bool,int,vec2,vec3,vec4,color,texture,positionLocal,positionWorld,uv,vertexColor,normalLocal,normalWorld,tangentLocal,tangentWorld,add,sub,mul,div,mod,abs,sign,floor,ceil,round,pow,sin,cos,tan,asin,acos,atan2,sqrt,exp,clamp,min,max,normalize,length,dot,cross,normalMap,remap,smoothstep,luminance,mx_rgbtohsv,mx_hsvtorgb,mix,split,mx_ramplr,mx_ramptb,mx_splitlr,mx_splittb,mx_fractal_noise_float,mx_noise_float,mx_cell_noise_float,mx_worley_noise_float,mx_transform_uv,mx_safepower,mx_contrast,mx_srgb_texture_to_lin_rec709,saturation,timerLocal,frameId}from"three/tsl";const colorSpaceLib={mx_srgb_texture_to_lin_rec709:mx_srgb_texture_to_lin_rec709};class MXElement{constructor(e,t,n=[]){this.name=e,this.nodeFunc=t,this.params=n}}const mx_add=(e,t=float(0))=>add(e,t),mx_subtract=(e,t=float(0))=>sub(e,t),mx_multiply=(e,t=float(1))=>mul(e,t),mx_divide=(e,t=float(1))=>div(e,t),mx_modulo=(e,t=float(1))=>mod(e,t),mx_power=(e,t=float(1))=>pow(e,t),mx_atan2=(e=float(0),t=float(1))=>atan2(e,t),mx_timer=()=>timerLocal(),mx_frame=()=>frameId,mx_invert=(e,t=float(1))=>sub(t,e),separate=(e,t)=>split(e,t.at(-1)),extract=(e,t)=>e.element(t),MXElements=[new MXElement("add",mx_add,["in1","in2"]),new MXElement("subtract",mx_subtract,["in1","in2"]),new MXElement("multiply",mx_multiply,["in1","in2"]),new MXElement("divide",mx_divide,["in1","in2"]),new MXElement("modulo",mx_modulo,["in1","in2"]),new MXElement("absval",abs,["in1","in2"]),new MXElement("sign",sign,["in1","in2"]),new MXElement("floor",floor,["in1","in2"]),new MXElement("ceil",ceil,["in1","in2"]),new MXElement("round",round,["in1","in2"]),new MXElement("power",mx_power,["in1","in2"]),new MXElement("sin",sin,["in"]),new MXElement("cos",cos,["in"]),new MXElement("tan",tan,["in"]),new MXElement("asin",asin,["in"]),new MXElement("acos",acos,["in"]),new MXElement("atan2",mx_atan2,["in1","in2"]),new MXElement("sqrt",sqrt,["in"]),new MXElement("exp",exp,["in"]),new MXElement("clamp",clamp,["in","low","high"]),new MXElement("min",min,["in1","in2"]),new MXElement("max",max,["in1","in2"]),new MXElement("normalize",normalize,["in"]),new MXElement("magnitude",length,["in1","in2"]),new MXElement("dotproduct",dot,["in1","in2"]),new MXElement("crossproduct",cross,["in"]),new MXElement("invert",mx_invert,["in","amount"]),new MXElement("normalmap",normalMap,["in","scale"]),new MXElement("remap",remap,["in","inlow","inhigh","outlow","outhigh"]),new MXElement("smoothstep",smoothstep,["in","low","high"]),new MXElement("luminance",luminance,["in","lumacoeffs"]),new MXElement("rgbtohsv",mx_rgbtohsv,["in"]),new MXElement("hsvtorgb",mx_hsvtorgb,["in"]),new MXElement("mix",mix,["bg","fg","mix"]),new MXElement("combine2",vec2,["in1","in2"]),new MXElement("combine3",vec3,["in1","in2","in3"]),new MXElement("combine4",vec4,["in1","in2","in3","in4"]),new MXElement("ramplr",mx_ramplr,["valuel","valuer","texcoord"]),new MXElement("ramptb",mx_ramptb,["valuet","valueb","texcoord"]),new MXElement("splitlr",mx_splitlr,["valuel","valuer","texcoord"]),new MXElement("splittb",mx_splittb,["valuet","valueb","texcoord"]),new MXElement("noise2d",mx_noise_float,["texcoord","amplitude","pivot"]),new MXElement("noise3d",mx_noise_float,["texcoord","amplitude","pivot"]),new MXElement("fractal3d",mx_fractal_noise_float,["position","octaves","lacunarity","diminish","amplitude"]),new MXElement("cellnoise2d",mx_cell_noise_float,["texcoord"]),new MXElement("cellnoise3d",mx_cell_noise_float,["texcoord"]),new MXElement("worleynoise2d",mx_worley_noise_float,["texcoord","jitter"]),new MXElement("worleynoise3d",mx_worley_noise_float,["texcoord","jitter"]),new MXElement("safepower",mx_safepower,["in1","in2"]),new MXElement("contrast",mx_contrast,["in","amount","pivot"]),new MXElement("saturate",saturation,["in","amount"]),new MXElement("extract",extract,["in","index"]),new MXElement("separate2",separate,["in"]),new MXElement("separate3",separate,["in"]),new MXElement("separate4",separate,["in"]),new MXElement("time",mx_timer),new MXElement("frame",mx_frame)],MtlXLibrary={};MXElements.forEach((e=>MtlXLibrary[e.name]=e));class MaterialXLoader extends Loader{constructor(e){super(e)}load(e,t,n,o){const a=function(e){o?o(e):console.error(e)};return new FileLoader(this.manager).setPath(this.path).load(e,(async e=>{try{t(this.parse(e))}catch(e){a(e)}}),n,a),this}parse(e){return new MaterialX(this.manager,this.path).parse(e)}}class MaterialXNode{constructor(e,t,n=""){this.materialX=e,this.nodeXML=t,this.nodePath=n?n+"/"+this.name:this.name,this.parent=null,this.node=null,this.children=[]}get element(){return this.nodeXML.nodeName}get nodeGraph(){return this.getAttribute("nodegraph")}get nodeName(){return this.getAttribute("nodename")}get interfaceName(){return this.getAttribute("interfacename")}get output(){return this.getAttribute("output")}get name(){return this.getAttribute("name")}get type(){return this.getAttribute("type")}get value(){return this.getAttribute("value")}getNodeGraph(){let e=this;for(;null!==e&&"nodegraph"!==e.element;)e=e.parent;return e}getRoot(){let e=this;for(;null!==e.parent;)e=e.parent;return e}get referencePath(){let e=null;return null!==this.nodeGraph&&null!==this.output?e=this.nodeGraph+"/"+this.output:null===this.nodeName&&null===this.interfaceName||(e=this.getNodeGraph().nodePath+"/"+(this.nodeName||this.interfaceName)),e}get hasReference(){return null!==this.referencePath}get isConst(){return"input"===this.element&&null!==this.value&&"filename"!==this.type}getColorSpaceNode(){const e=this.getAttribute("colorspace"),t=this.getRoot().getAttribute("colorspace");return colorSpaceLib[`mx_${e}_to_${t}`]}getTexture(){const e=this.getRecursiveAttribute("fileprefix")||"";let t=this.materialX.textureLoader;const n=e+this.value;if(n){const e=this.materialX.manager.getHandler(n);null!==e&&(t=e)}const o=t.load(n);return o.wrapS=o.wrapT=RepeatWrapping,o.flipY=!1,o}getClassFromType(e){let t=null;return"integer"===e?t=int:"float"===e?t=float:"vector2"===e?t=vec2:"vector3"===e?t=vec3:"vector4"===e||"color4"===e?t=vec4:"color3"===e?t=color:"boolean"===e&&(t=bool),t}getNode(e=null){let t=this.node;if(null!==t&&null===e)return t;const n=this.type;if(this.isConst){t=this.getClassFromType(n)(...this.getVector())}else if(this.hasReference)"output"===this.element&&this.output&&null===e&&(e=this.output),t=this.materialX.getMaterialXNode(this.referencePath).getNode(e);else{const o=this.element;if("convert"===o){t=this.getClassFromType(n)(this.getNodeByName("in"))}else if("constant"===o)t=this.getNodeByName("value");else if("position"===o){t="world"===this.getAttribute("space")?positionWorld:positionLocal}else if("normal"===o){t="world"===this.getAttribute("space")?normalWorld:normalLocal}else if("tangent"===o){t="world"===this.getAttribute("space")?tangentWorld:tangentLocal}else if("texcoord"===o){const e=this.getChildByName("index"),n=e?parseInt(e.value):0;t=uv(n)}else if("geomcolor"===o){const e=this.getChildByName("index"),n=e?parseInt(e.value):0;t=vertexColor(n)}else if("tiledimage"===o){const e=this.getChildByName("file"),n=e.getTexture(),o=mx_transform_uv(...this.getNodesByNames(["uvtiling","uvoffset"]));t=texture(n,o);const a=e.getColorSpaceNode();a&&(t=a(t))}else if("image"===o){const e=this.getChildByName("file"),n=this.getNodeByName("texcoord"),o=e.getTexture();t=texture(o,n);const a=e.getColorSpaceNode();a&&(t=a(t))}else if(void 0!==MtlXLibrary[o]){const n=MtlXLibrary[o];t=null!==e?n.nodeFunc(...this.getNodesByNames(...n.params),e):n.nodeFunc(...this.getNodesByNames(...n.params))}}null===t&&(console.warn(`THREE.MaterialXLoader: Unexpected node ${(new XMLSerializer).serializeToString(this.nodeXML)}.`),t=float(0));const o=this.getClassFromType(n);return null!==o&&(t=o(t)),t.name=this.name,this.node=t,t}getChildByName(e){for(const t of this.children)if(t.name===e)return t}getNodes(){const e={};for(const t of this.children){const n=t.getNode();e[n.name]=n}return e}getNodeByName(e){const t=this.getChildByName(e);return t?t.getNode(t.output):void 0}getNodesByNames(...e){const t=[];for(const n of e){const e=this.getNodeByName(n);e&&t.push(e)}return t}getValue(){return this.value.trim()}getVector(){const e=[];for(const t of this.getValue().split(/[,|\s]/))""!==t&&e.push(Number(t.trim()));return e}getAttribute(e){return this.nodeXML.getAttribute(e)}getRecursiveAttribute(e){let t=this.nodeXML.getAttribute(e);return null===t&&null!==this.parent&&(t=this.parent.getRecursiveAttribute(e)),t}setStandardSurfaceToGltfPBR(e){const t=this.getNodes();let n=null;t.base&&t.base_color?n=mul(t.base,t.base_color):t.base?n=t.base:t.base_color&&(n=t.base_color);let o=null;t.specular_roughness&&(o=t.specular_roughness);let a=null;t.metalness&&(a=t.metalness);let r=null,i=null;t.coat&&(r=t.coat),t.coat_roughness&&(i=t.coat_roughness),t.coat_color&&(n=n?mul(n,t.coat_color):n);let l=null;t.normal&&(l=t.normal);let s=null;t.emission&&(s=t.emission),t.emissionColor&&(s=s?mul(s,t.emissionColor):s),e.colorNode=n||color(.8,.8,.8),e.roughnessNode=o||float(.2),e.metalnessNode=a||float(0),e.clearcoatNode=r||float(0),e.clearcoatRoughnessNode=i||float(0),l&&(e.normalNode=l),s&&(e.emissiveNode=s)}setMaterial(e){const t=this.element;"gltf_pbr"===t||"standard_surface"===t&&this.setStandardSurfaceToGltfPBR(e)}toBasicMaterial(){const e=new MeshBasicNodeMaterial;e.name=this.name;for(const t of this.children.toReversed())if("out"===t.name){e.colorNode=t.getNode();break}return e}toPhysicalMaterial(){const e=new MeshPhysicalNodeMaterial;e.name=this.name;for(const t of this.children){this.materialX.getMaterialXNode(t.nodeName).setMaterial(e)}return e}toMaterials(){const e={};let t=!0;for(const n of this.children)if("surfacematerial"===n.element){const o=n.toPhysicalMaterial();e[o.name]=o,t=!1}if(t)for(const t of this.children)if("nodegraph"===t.element){const n=t.toBasicMaterial();e[n.name]=n}return e}add(e){e.parent=this,this.children.push(e)}}class MaterialX{constructor(e,t){this.manager=e,this.path=t,this.resourcePath="",this.nodesXLib=new Map,this.textureLoader=new TextureLoader(e)}addMaterialXNode(e){this.nodesXLib.set(e.nodePath,e)}getMaterialXNode(...e){return this.nodesXLib.get(e.join("/"))}parseNode(e,t=""){const n=new MaterialXNode(this,e,t);n.nodePath&&this.addMaterialXNode(n);for(const t of e.children){const e=this.parseNode(t,n.nodePath);n.add(e)}return n}parse(e){const t=(new DOMParser).parseFromString(e,"application/xml").documentElement;this.textureLoader.setPath(this.path);return{materials:this.parseNode(t).toMaterials()}}}export{MaterialXLoader};
//# sourceMappingURL=/sm/87bd27b25ad8e001206713be7a2aec35d5fd918037cd5d512b73aa3adf3208f9.map
/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.160.1/examples/jsm/renderers/webgpu/utils/WebGPUTextureUtils.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{GPUTextureFormat,GPUAddressMode,GPUFilterMode,GPUTextureDimension,GPUFeatureName}from"./WebGPUConstants.js";import{CubeTexture,Texture,NearestFilter,NearestMipmapNearestFilter,NearestMipmapLinearFilter,RepeatWrapping,MirroredRepeatWrapping,RGB_ETC2_Format,RGBA_ETC2_EAC_Format,RGBAFormat,RedFormat,RGFormat,RGBA_S3TC_DXT1_Format,RGBA_S3TC_DXT3_Format,RGBA_S3TC_DXT5_Format,UnsignedByteType,FloatType,HalfFloatType,SRGBColorSpace,DepthFormat,DepthStencilFormat,RGBA_ASTC_4x4_Format,RGBA_ASTC_5x4_Format,RGBA_ASTC_5x5_Format,RGBA_ASTC_6x5_Format,RGBA_ASTC_6x6_Format,RGBA_ASTC_8x5_Format,RGBA_ASTC_8x6_Format,RGBA_ASTC_8x8_Format,RGBA_ASTC_10x5_Format,RGBA_ASTC_10x6_Format,RGBA_ASTC_10x8_Format,RGBA_ASTC_10x10_Format,RGBA_ASTC_12x10_Format,RGBA_ASTC_12x12_Format,UnsignedIntType,UnsignedShortType,UnsignedInt248Type,NeverCompare,AlwaysCompare,LessCompare,LessEqualCompare,EqualCompare,GreaterEqualCompare,GreaterCompare,NotEqualCompare}from"three";import{CubeReflectionMapping,CubeRefractionMapping,EquirectangularReflectionMapping,EquirectangularRefractionMapping,DepthTexture}from"three";import WebGPUTexturePassUtils from"./WebGPUTexturePassUtils.js";const _compareToWebGPU={[NeverCompare]:"never",[LessCompare]:"less",[EqualCompare]:"equal",[LessEqualCompare]:"less-equal",[GreaterCompare]:"greater",[GreaterEqualCompare]:"greater-equal",[AlwaysCompare]:"always",[NotEqualCompare]:"not-equal"},_flipMap=[0,1,3,2,4,5];class WebGPUTextureUtils{constructor(e){this.backend=e,this._passUtils=null,this.defaultTexture=null,this.defaultCubeTexture=null,this.colorBuffer=null,this.depthTexture=new DepthTexture,this.depthTexture.name="depthBuffer"}createSampler(e){const t=this.backend,r=t.device,a=t.get(e),o={addressModeU:this._convertAddressMode(e.wrapS),addressModeV:this._convertAddressMode(e.wrapT),addressModeW:this._convertAddressMode(e.wrapR),magFilter:this._convertFilterMode(e.magFilter),minFilter:this._convertFilterMode(e.minFilter),mipmapFilter:this._convertFilterMode(e.minFilter),maxAnisotropy:e.anisotropy};e.isDepthTexture&&null!==e.compareFunction&&(o.compare=_compareToWebGPU[e.compareFunction]),a.sampler=r.createSampler(o)}createDefaultTexture(e){let t;t=e.isCubeTexture?this._getDefaultCubeTextureGPU():this._getDefaultTextureGPU(),this.backend.get(e).texture=t}createTexture(e,t={}){const r=this.backend,a=r.get(e);if(a.initialized)throw new Error("WebGPUTextureUtils: Texture already initialized.");void 0===t.needsMipmaps&&(t.needsMipmaps=!1),void 0===t.levels&&(t.levels=1),void 0===t.depth&&(t.depth=1);const{width:o,height:i,depth:m,levels:n}=t,u=this._getDimension(e),T=e.internalFormat||getFormat(e,r.device),s=void 0!==t.sampleCount?t.sampleCount:1,G=e.isRenderTargetTexture?1:s;let x=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC;!0===e.isStorageTexture&&(x|=GPUTextureUsage.STORAGE_BINDING),!0!==e.isCompressedTexture&&(x|=GPUTextureUsage.RENDER_ATTACHMENT);const U={label:e.name,size:{width:o,height:i,depthOrArrayLayers:m},mipLevelCount:n,sampleCount:G,dimension:u,format:T,usage:x};if(e.isVideoTexture){const t=e.source.data,r=new VideoFrame(t);U.size.width=r.displayWidth,U.size.height=r.displayHeight,r.close(),a.externalTexture=t}else{if(void 0===T)return console.warn("WebGPURenderer: Texture format not supported."),this.createDefaultTexture(e);a.texture=r.device.createTexture(U)}if(e.isRenderTargetTexture&&s>1){const e=Object.assign({},U);e.label=e.label+"-msaa",e.sampleCount=s,a.msaaTexture=r.device.createTexture(e)}a.initialized=!0,a.textureDescriptorGPU=U}destroyTexture(e){const t=this.backend,r=t.get(e);r.texture.destroy(),void 0!==r.msaaTexture&&r.msaaTexture.destroy(),t.delete(e)}destroySampler(e){delete this.backend.get(e).sampler}generateMipmaps(e){const t=this.backend.get(e);if(e.isCubeTexture)for(let e=0;e<6;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e);else this._generateMipmaps(t.texture,t.textureDescriptorGPU)}getColorBuffer(){this.colorBuffer&&this.colorBuffer.destroy();const e=this.backend,{width:t,height:r}=e.getDrawingBufferSize();return this.colorBuffer=e.device.createTexture({label:"colorBuffer",size:{width:t,height:r,depthOrArrayLayers:1},sampleCount:e.parameters.sampleCount,format:GPUTextureFormat.BGRA8Unorm,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),this.colorBuffer}getDepthBuffer(e=!0,t=!0){const r=this.backend,{width:a,height:o}=r.getDrawingBufferSize(),i=this.depthTexture,m=r.get(i).texture;let n,u;if(t?(n=DepthStencilFormat,u=UnsignedInt248Type):e&&(n=DepthFormat,u=UnsignedIntType),void 0!==m){if(i.image.width===a&&i.image.height===o&&i.format===n&&i.type===u)return m;this.destroyTexture(i)}return i.name="depthBuffer",i.format=n,i.type=u,i.image.width=a,i.image.height=o,this.createTexture(i,{sampleCount:r.parameters.sampleCount,width:a,height:o}),r.get(i).texture}updateTexture(e,t){const r=this.backend.get(e),{textureDescriptorGPU:a}=r;if(!e.isRenderTargetTexture&&void 0!==a){if(e.isDataTexture||e.isData3DTexture)this._copyBufferToTexture(t.image,r.texture,a,0,!1);else if(e.isDataArrayTexture)for(let e=0;e<t.image.depth;e++)this._copyBufferToTexture(t.image,r.texture,a,e,!1,e);else if(e.isCompressedTexture)this._copyCompressedBufferToTexture(e.mipmaps,r.texture,a);else if(e.isCubeTexture)this._copyCubeMapToTexture(t.images,r.texture,a,e.flipY);else if(e.isVideoTexture){const t=e.source.data;r.externalTexture=t}else this._copyImageToTexture(t.image,r.texture,a,0,e.flipY);r.version=e.version,e.onUpdate&&e.onUpdate(e)}}async copyTextureToBuffer(e,t,r,a,o){const i=this.backend.device,m=this.backend.get(e),n=m.texture,u=m.textureDescriptorGPU.format,T=this._getBytesPerTexel(u),s=i.createBuffer({size:a*o*T,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),G=i.createCommandEncoder();G.copyTextureToBuffer({texture:n,origin:{x:t,y:r}},{buffer:s,bytesPerRow:a*T},{width:a,height:o});const x=this._getTypedArrayType(u);i.queue.submit([G.finish()]),await s.mapAsync(GPUMapMode.READ);return new x(s.getMappedRange())}_isEnvironmentTexture(e){const t=e.mapping;return t===EquirectangularReflectionMapping||t===EquirectangularRefractionMapping||t===CubeReflectionMapping||t===CubeRefractionMapping}_getDefaultTextureGPU(){let e=this.defaultTexture;if(null===e){const t=new Texture;t.minFilter=NearestFilter,t.magFilter=NearestFilter,this.createTexture(t,{width:1,height:1}),this.defaultTexture=e=t}return this.backend.get(e).texture}_getDefaultCubeTextureGPU(){let e=this.defaultTexture;if(null===e){const t=new CubeTexture;t.minFilter=NearestFilter,t.magFilter=NearestFilter,this.createTexture(t,{width:1,height:1,depth:6}),this.defaultCubeTexture=e=t}return this.backend.get(e).texture}_copyCubeMapToTexture(e,t,r,a){for(let o=0;o<6;o++){const i=e[o],m=!0===a?_flipMap[o]:o;i.isDataTexture?this._copyBufferToTexture(i.image,t,r,m,a):this._copyImageToTexture(i,t,r,m,a)}}_copyImageToTexture(e,t,r,a,o){this.backend.device.queue.copyExternalImageToTexture({source:e},{texture:t,mipLevel:0,origin:{x:0,y:0,z:a}},{width:e.width,height:e.height,depthOrArrayLayers:1}),!0===o&&this._flipY(t,r,a)}_getPassUtils(){let e=this._passUtils;return null===e&&(this._passUtils=e=new WebGPUTexturePassUtils(this.backend.device)),e}_generateMipmaps(e,t,r=0){this._getPassUtils().generateMipmaps(e,t,r)}_flipY(e,t,r=0){this._getPassUtils().flipY(e,t,r)}_copyBufferToTexture(e,t,r,a,o,i=0){const m=this.backend.device,n=e.data,u=this._getBytesPerTexel(r.format),T=e.width*u;m.queue.writeTexture({texture:t,mipLevel:0,origin:{x:0,y:0,z:a}},n,{offset:e.width*e.height*u*i,bytesPerRow:T},{width:e.width,height:e.height,depthOrArrayLayers:1}),!0===o&&this._flipY(t,r,a)}_copyCompressedBufferToTexture(e,t,r){const a=this.backend.device,o=this._getBlockData(r.format);for(let r=0;r<e.length;r++){const i=e[r],m=i.width,n=i.height,u=Math.ceil(m/o.width)*o.byteLength;a.queue.writeTexture({texture:t,mipLevel:r},i.data,{offset:0,bytesPerRow:u},{width:Math.ceil(m/o.width)*o.width,height:Math.ceil(n/o.width)*o.width,depthOrArrayLayers:1})}}_getBlockData(e){return e===GPUTextureFormat.BC1RGBAUnorm||e===GPUTextureFormat.BC1RGBAUnormSRGB?{byteLength:8,width:4,height:4}:e===GPUTextureFormat.BC2RGBAUnorm||e===GPUTextureFormat.BC2RGBAUnormSRGB||e===GPUTextureFormat.BC3RGBAUnorm||e===GPUTextureFormat.BC3RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===GPUTextureFormat.BC4RUnorm||e===GPUTextureFormat.BC4RSNorm?{byteLength:8,width:4,height:4}:e===GPUTextureFormat.BC5RGUnorm||e===GPUTextureFormat.BC5RGSnorm||e===GPUTextureFormat.BC6HRGBUFloat||e===GPUTextureFormat.BC6HRGBFloat||e===GPUTextureFormat.BC7RGBAUnorm||e===GPUTextureFormat.BC7RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===GPUTextureFormat.ETC2RGB8Unorm||e===GPUTextureFormat.ETC2RGB8UnormSRGB||e===GPUTextureFormat.ETC2RGB8A1Unorm||e===GPUTextureFormat.ETC2RGB8A1UnormSRGB?{byteLength:8,width:4,height:4}:e===GPUTextureFormat.ETC2RGBA8Unorm||e===GPUTextureFormat.ETC2RGBA8UnormSRGB?{byteLength:16,width:4,height:4}:e===GPUTextureFormat.EACR11Unorm||e===GPUTextureFormat.EACR11Snorm?{byteLength:8,width:4,height:4}:e===GPUTextureFormat.EACRG11Unorm||e===GPUTextureFormat.EACRG11Snorm||e===GPUTextureFormat.ASTC4x4Unorm||e===GPUTextureFormat.ASTC4x4UnormSRGB?{byteLength:16,width:4,height:4}:e===GPUTextureFormat.ASTC5x4Unorm||e===GPUTextureFormat.ASTC5x4UnormSRGB?{byteLength:16,width:5,height:4}:e===GPUTextureFormat.ASTC5x5Unorm||e===GPUTextureFormat.ASTC5x5UnormSRGB?{byteLength:16,width:5,height:5}:e===GPUTextureFormat.ASTC6x5Unorm||e===GPUTextureFormat.ASTC6x5UnormSRGB?{byteLength:16,width:6,height:5}:e===GPUTextureFormat.ASTC6x6Unorm||e===GPUTextureFormat.ASTC6x6UnormSRGB?{byteLength:16,width:6,height:6}:e===GPUTextureFormat.ASTC8x5Unorm||e===GPUTextureFormat.ASTC8x5UnormSRGB?{byteLength:16,width:8,height:5}:e===GPUTextureFormat.ASTC8x6Unorm||e===GPUTextureFormat.ASTC8x6UnormSRGB?{byteLength:16,width:8,height:6}:e===GPUTextureFormat.ASTC8x8Unorm||e===GPUTextureFormat.ASTC8x8UnormSRGB?{byteLength:16,width:8,height:8}:e===GPUTextureFormat.ASTC10x5Unorm||e===GPUTextureFormat.ASTC10x5UnormSRGB?{byteLength:16,width:10,height:5}:e===GPUTextureFormat.ASTC10x6Unorm||e===GPUTextureFormat.ASTC10x6UnormSRGB?{byteLength:16,width:10,height:6}:e===GPUTextureFormat.ASTC10x8Unorm||e===GPUTextureFormat.ASTC10x8UnormSRGB?{byteLength:16,width:10,height:8}:e===GPUTextureFormat.ASTC10x10Unorm||e===GPUTextureFormat.ASTC10x10UnormSRGB?{byteLength:16,width:10,height:10}:e===GPUTextureFormat.ASTC12x10Unorm||e===GPUTextureFormat.ASTC12x10UnormSRGB?{byteLength:16,width:12,height:10}:e===GPUTextureFormat.ASTC12x12Unorm||e===GPUTextureFormat.ASTC12x12UnormSRGB?{byteLength:16,width:12,height:12}:void 0}_convertAddressMode(e){let t=GPUAddressMode.ClampToEdge;return e===RepeatWrapping?t=GPUAddressMode.Repeat:e===MirroredRepeatWrapping&&(t=GPUAddressMode.MirrorRepeat),t}_convertFilterMode(e){let t=GPUFilterMode.Linear;return e!==NearestFilter&&e!==NearestMipmapNearestFilter&&e!==NearestMipmapLinearFilter||(t=GPUFilterMode.Nearest),t}_getBytesPerTexel(e){return e===GPUTextureFormat.R8Unorm?1:e===GPUTextureFormat.R16Float||e===GPUTextureFormat.RG8Unorm?2:e===GPUTextureFormat.RG16Float||e===GPUTextureFormat.R32Float||e===GPUTextureFormat.RGBA8Unorm||e===GPUTextureFormat.RGBA8UnormSRGB?4:e===GPUTextureFormat.RG32Float||e===GPUTextureFormat.RGBA16Float?8:e===GPUTextureFormat.RGBA32Float?16:void 0}_getTypedArrayType(e){return e===GPUTextureFormat.R8Uint?Uint8Array:e===GPUTextureFormat.R8Sint?Int8Array:e===GPUTextureFormat.R8Unorm?Uint8Array:e===GPUTextureFormat.R8Snorm?Int8Array:e===GPUTextureFormat.RG8Uint?Uint8Array:e===GPUTextureFormat.RG8Sint?Int8Array:e===GPUTextureFormat.RG8Unorm?Uint8Array:e===GPUTextureFormat.RG8Snorm?Int8Array:e===GPUTextureFormat.RGBA8Uint?Uint8Array:e===GPUTextureFormat.RGBA8Sint?Int8Array:e===GPUTextureFormat.RGBA8Unorm?Uint8Array:e===GPUTextureFormat.RGBA8Snorm?Int8Array:e===GPUTextureFormat.R16Uint?Uint16Array:e===GPUTextureFormat.R16Sint?Int16Array:e===GPUTextureFormat.RG16Uint?Uint16Array:e===GPUTextureFormat.RG16Sint?Int16Array:e===GPUTextureFormat.RGBA16Uint?Uint16Array:e===GPUTextureFormat.RGBA16Sint?Int16Array:e===GPUTextureFormat.R32Uint?Uint32Array:e===GPUTextureFormat.R32Sint?Int32Array:e===GPUTextureFormat.R32Float?Float32Array:e===GPUTextureFormat.RG32Uint?Uint32Array:e===GPUTextureFormat.RG32Sint?Int32Array:e===GPUTextureFormat.RG32Float?Float32Array:e===GPUTextureFormat.RGBA32Uint?Uint32Array:e===GPUTextureFormat.RGBA32Sint?Int32Array:e===GPUTextureFormat.RGBA32Float?Float32Array:void 0}_getDimension(e){let t;return t=e.isData3DTexture?GPUTextureDimension.ThreeD:GPUTextureDimension.TwoD,t}}export function getFormat(e,t=null){const r=e.format,a=e.type,o=e.colorSpace;let i;if(!0===e.isFramebufferTexture)i=GPUTextureFormat.BGRA8Unorm;else if(!0===e.isCompressedTexture)switch(r){case RGBA_S3TC_DXT1_Format:i=o===SRGBColorSpace?GPUTextureFormat.BC1RGBAUnormSRGB:GPUTextureFormat.BC1RGBAUnorm;break;case RGBA_S3TC_DXT3_Format:i=o===SRGBColorSpace?GPUTextureFormat.BC2RGBAUnormSRGB:GPUTextureFormat.BC2RGBAUnorm;break;case RGBA_S3TC_DXT5_Format:i=o===SRGBColorSpace?GPUTextureFormat.BC3RGBAUnormSRGB:GPUTextureFormat.BC3RGBAUnorm;break;case RGB_ETC2_Format:i=o===SRGBColorSpace?GPUTextureFormat.ETC2RGB8UnormSRGB:GPUTextureFormat.ETC2RGB8Unorm;break;case RGBA_ETC2_EAC_Format:i=o===SRGBColorSpace?GPUTextureFormat.ETC2RGBA8UnormSRGB:GPUTextureFormat.ETC2RGBA8Unorm;break;case RGBA_ASTC_4x4_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC4x4UnormSRGB:GPUTextureFormat.ASTC4x4Unorm;break;case RGBA_ASTC_5x4_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC5x4UnormSRGB:GPUTextureFormat.ASTC5x4Unorm;break;case RGBA_ASTC_5x5_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC5x5UnormSRGB:GPUTextureFormat.ASTC5x5Unorm;break;case RGBA_ASTC_6x5_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC6x5UnormSRGB:GPUTextureFormat.ASTC6x5Unorm;break;case RGBA_ASTC_6x6_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC6x6UnormSRGB:GPUTextureFormat.ASTC6x6Unorm;break;case RGBA_ASTC_8x5_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC8x5UnormSRGB:GPUTextureFormat.ASTC8x5Unorm;break;case RGBA_ASTC_8x6_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC8x6UnormSRGB:GPUTextureFormat.ASTC8x6Unorm;break;case RGBA_ASTC_8x8_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC8x8UnormSRGB:GPUTextureFormat.ASTC8x8Unorm;break;case RGBA_ASTC_10x5_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC10x5UnormSRGB:GPUTextureFormat.ASTC10x5Unorm;break;case RGBA_ASTC_10x6_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC10x6UnormSRGB:GPUTextureFormat.ASTC10x6Unorm;break;case RGBA_ASTC_10x8_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC10x8UnormSRGB:GPUTextureFormat.ASTC10x8Unorm;break;case RGBA_ASTC_10x10_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC10x10UnormSRGB:GPUTextureFormat.ASTC10x10Unorm;break;case RGBA_ASTC_12x10_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC12x10UnormSRGB:GPUTextureFormat.ASTC12x10Unorm;break;case RGBA_ASTC_12x12_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC12x12UnormSRGB:GPUTextureFormat.ASTC12x12Unorm;break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}else switch(r){case RGBAFormat:switch(a){case UnsignedByteType:i=o===SRGBColorSpace?GPUTextureFormat.RGBA8UnormSRGB:GPUTextureFormat.RGBA8Unorm;break;case HalfFloatType:i=GPUTextureFormat.RGBA16Float;break;case FloatType:i=GPUTextureFormat.RGBA32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.",a)}break;case RedFormat:switch(a){case UnsignedByteType:i=GPUTextureFormat.R8Unorm;break;case HalfFloatType:i=GPUTextureFormat.R16Float;break;case FloatType:i=GPUTextureFormat.R32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RedFormat.",a)}break;case RGFormat:switch(a){case UnsignedByteType:i=GPUTextureFormat.RG8Unorm;break;case HalfFloatType:i=GPUTextureFormat.RG16Float;break;case FloatType:i=GPUTextureFormat.RG32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGFormat.",a)}break;case DepthFormat:switch(a){case UnsignedShortType:i=GPUTextureFormat.Depth16Unorm;break;case UnsignedIntType:i=GPUTextureFormat.Depth24Plus;break;case FloatType:i=GPUTextureFormat.Depth32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthFormat.",a)}break;case DepthStencilFormat:switch(a){case UnsignedInt248Type:i=GPUTextureFormat.Depth24PlusStencil8;break;case FloatType:t&&!1===t.features.has(GPUFeatureName.Depth32FloatStencil8)&&console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.'),i=GPUTextureFormat.Depth32FloatStencil8;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.",a)}break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}return i}export default WebGPUTextureUtils;
//# sourceMappingURL=/sm/f90657f3d9f33b7cf41dfad988827c0fda5d9e4ca338c92fa3b9dd240969f337.map
/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.160.1/examples/jsm/renderers/webgl/utils/WebGLAttributeUtils.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{IntType}from"three";class WebGLAttributeUtils{constructor(e){this.backend=e}createAttribute(e,t){const r=this.backend,{gl:f}=r,a=e.array,n=e.usage||f.STATIC_DRAW,i=e.isInterleavedBufferAttribute?e.data:e,s=r.get(i);let u,b=s.bufferGPU;if(void 0===b&&(b=f.createBuffer(),f.bindBuffer(t,b),f.bufferData(t,a,n),f.bindBuffer(t,null),s.bufferGPU=b,s.bufferType=t,s.version=i.version),a instanceof Float32Array)u=f.FLOAT;else if(a instanceof Uint16Array)u=e.isFloat16BufferAttribute?f.HALF_FLOAT:f.UNSIGNED_SHORT;else if(a instanceof Int16Array)u=f.SHORT;else if(a instanceof Uint32Array)u=f.UNSIGNED_INT;else if(a instanceof Int32Array)u=f.INT;else if(a instanceof Int8Array)u=f.BYTE;else if(a instanceof Uint8Array)u=f.UNSIGNED_BYTE;else{if(!(a instanceof Uint8ClampedArray))throw new Error("THREE.WebGLBackend: Unsupported buffer data format: "+a);u=f.UNSIGNED_BYTE}r.set(e,{bufferGPU:b,type:u,bytesPerElement:a.BYTES_PER_ELEMENT,version:e.version,isInteger:u===f.INT||u===f.UNSIGNED_INT||e.gpuType===IntType})}updateAttribute(e){const t=this.backend,{gl:r}=t,f=e.array,a=e.isInterleavedBufferAttribute?e.data:e,n=t.get(a),i=n.bufferType,s=e.isInterleavedBufferAttribute?e.data.updateRanges:e.updateRanges;if(r.bindBuffer(i,n.bufferGPU),0===s.length)r.bufferSubData(i,0,f);else{for(let e=0,t=s.length;e<t;e++){const t=s[e];r.bufferSubData(i,t.start*f.BYTES_PER_ELEMENT,f,t.start,t.count)}a.clearUpdateRanges()}r.bindBuffer(i,null),n.version=a.version}async getArrayBufferAsync(e){const t=this.backend,{gl:r}=t,f=e.isInterleavedBufferAttribute?e.data:e,{bufferGPU:a}=t.get(f),n=e.array,i=n.byteLength;r.bindBuffer(r.COPY_READ_BUFFER,a);const s=r.createBuffer();r.bindBuffer(r.COPY_WRITE_BUFFER,s),r.bufferData(r.COPY_WRITE_BUFFER,i,r.STREAM_READ),r.copyBufferSubData(r.COPY_READ_BUFFER,r.COPY_WRITE_BUFFER,0,0,i),await t.utils._clientWaitAsync();const u=new e.array.constructor(n.length);return r.getBufferSubData(r.COPY_WRITE_BUFFER,0,u),r.deleteBuffer(s),u.buffer}}export default WebGLAttributeUtils;
//# sourceMappingURL=/sm/f5436ba0433a7de80b564e3bffb542c811a06be974c4034d8fe74ce0426c0d18.map
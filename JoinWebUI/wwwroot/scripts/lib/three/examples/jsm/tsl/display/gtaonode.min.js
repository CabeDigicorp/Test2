/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/examples/jsm/tsl/display/GTAONode.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{DataTexture,RenderTarget,RepeatWrapping,Vector2,Vector3,PostProcessingUtils}from"three";import{getNormalFromDepth,getScreenPosition,getViewPosition,QuadMesh,TempNode,nodeObject,Fn,float,NodeUpdateType,uv,uniform,Loop,vec2,vec3,vec4,int,dot,max,pow,abs,If,textureSize,sin,cos,PI,texture,passTexture,mat3,add,normalize,mul,cross,div,mix,sqrt,sub,acos,clamp,NodeMaterial}from"three/tsl";const _quadMesh=new QuadMesh,_size=new Vector2;let _rendererState;class GTAONode extends TempNode{static get type(){return"GTAONode"}constructor(e,t,o){super(),this.depthNode=e,this.normalNode=t,this.radius=uniform(.25),this.resolution=uniform(new Vector2),this.thickness=uniform(1),this.distanceExponent=uniform(1),this.distanceFallOff=uniform(1),this.scale=uniform(1),this.noiseNode=texture(generateMagicSquareNoise()),this.cameraProjectionMatrix=uniform(o.projectionMatrix),this.cameraProjectionMatrixInverse=uniform(o.projectionMatrixInverse),this.SAMPLES=uniform(16),this._aoRenderTarget=new RenderTarget(1,1,{depthBuffer:!1}),this._aoRenderTarget.texture.name="GTAONode.AO",this._material=null,this._textureNode=passTexture(this,this._aoRenderTarget.texture),this.updateBeforeType=NodeUpdateType.FRAME}getTextureNode(){return this._textureNode}setSize(e,t){this.resolution.value.set(e,t),this._aoRenderTarget.setSize(e,t)}updateBefore(e){const{renderer:t}=e;_rendererState=PostProcessingUtils.resetRendererState(t,_rendererState);const o=t.getDrawingBufferSize(_size);this.setSize(o.width,o.height),_quadMesh.material=this._material,t.setClearColor(16777215,1),t.setRenderTarget(this._aoRenderTarget),_quadMesh.render(t),PostProcessingUtils.restoreRendererState(t,_rendererState)}setup(e){const t=uv(),o=e=>this.depthNode.uv(e).x,r=e=>this.noiseNode.uv(e),a=e=>null!==this.normalNode?this.normalNode.uv(e).rgb.normalize():getNormalFromDepth(e,this.depthNode.value,this.cameraProjectionMatrixInverse),s=Fn((()=>{const e=o(t).toVar();e.greaterThanEqual(1).discard();const s=getViewPosition(t,e,this.cameraProjectionMatrixInverse).toVar(),i=a(t).toVar(),n=this.radius,d=textureSize(this.noiseNode,0);let l=vec2(t.x,t.y.oneMinus());l=l.mul(this.resolution.div(d));const u=r(l),c=u.xyz.mul(2).sub(1),h=vec3(c.xy,0).normalize(),m=vec3(h.y.mul(-1),h.x,0),x=mat3(h,m,vec3(0,0,1)),p=this.SAMPLES.lessThan(30).select(3,5).toVar(),f=add(this.SAMPLES,p.sub(1)).div(p).toVar(),g=float(0).toVar();return Loop({start:int(0),end:p,type:"int",condition:"<"},(({i:e})=>{const t=float(e).div(float(p)).mul(PI).toVar(),r=vec4(cos(t),sin(t),0,add(.5,mul(.5,u.w)));r.xyz=normalize(x.mul(r.xyz));const a=normalize(s.xyz.negate()).toVar(),d=normalize(cross(r.xyz,a)).toVar(),l=cross(d,a),c=normalize(i.sub(d.mul(dot(i,d)))),h=cross(c,d).toVar(),m=vec2(dot(a,h),dot(a,h.negate())).toVar();Loop({end:f,type:"int",name:"j",condition:"<"},(({j:e})=>{const t=r.xyz.mul(n).mul(r.w).mul(pow(div(float(e).add(1),float(f)),this.distanceExponent)),i=getScreenPosition(s.add(t),this.cameraProjectionMatrix).toVar(),d=o(i).toVar(),l=getViewPosition(i,d,this.cameraProjectionMatrixInverse).toVar().sub(s).toVar();If(abs(l.z).lessThan(this.thickness),(()=>{const t=dot(a,normalize(l));m.x.addAssign(max(0,mul(t.sub(m.x),mix(1,float(2).div(float(e).add(2)),this.distanceFallOff))))}));const u=getScreenPosition(s.sub(t),this.cameraProjectionMatrix).toVar(),c=o(u).toVar(),h=getViewPosition(u,c,this.cameraProjectionMatrixInverse).toVar().sub(s).toVar();If(abs(h.z).lessThan(this.thickness),(()=>{const t=dot(a,normalize(h));m.y.addAssign(max(0,mul(t.sub(m.y),mix(1,float(2).div(float(e).add(2)),this.distanceFallOff))))}))}));const M=sqrt(sub(1,m.mul(m))).toVar(),v=dot(c,l),T=dot(c,a),N=mul(.5,acos(m.y).sub(acos(m.x)).add(M.x.mul(m.x).sub(M.y.mul(m.y)))),V=mul(.5,sub(2,m.x.mul(m.x)).sub(m.y.mul(m.y))),P=v.mul(N).add(T.mul(V));g.addAssign(P)})),g.assign(clamp(g.div(p),0,1)),g.assign(pow(g,this.scale)),vec4(vec3(g),1)})),i=this._material||(this._material=new NodeMaterial);return i.fragmentNode=s().context(e.getSharedContext()),i.name="GTAO",i.needsUpdate=!0,this._textureNode}dispose(){this._aoRenderTarget.dispose()}}export default GTAONode;function generateMagicSquareNoise(e=5){const t=Math.floor(e)%2==0?Math.floor(e)+1:Math.floor(e),o=generateMagicSquare(t),r=o.length,a=new Uint8Array(4*r);for(let e=0;e<r;++e){const t=o[e],s=2*Math.PI*t/r,i=new Vector3(Math.cos(s),Math.sin(s),0).normalize();a[4*e]=255*(.5*i.x+.5),a[4*e+1]=255*(.5*i.y+.5),a[4*e+2]=127,a[4*e+3]=255}const s=new DataTexture(a,t,t);return s.wrapS=RepeatWrapping,s.wrapT=RepeatWrapping,s.needsUpdate=!0,s}function generateMagicSquare(e){const t=Math.floor(e)%2==0?Math.floor(e)+1:Math.floor(e),o=t*t,r=Array(o).fill(0);let a=Math.floor(t/2),s=t-1;for(let e=1;e<=o;)-1===a&&s===t?(s=t-2,a=0):(s===t&&(s=0),a<0&&(a=t-1)),0===r[a*t+s]?(r[a*t+s]=e++,s++,a--):(s-=2,a++);return r}export const ao=(e,t,o)=>nodeObject(new GTAONode(nodeObject(e),nodeObject(t),o));
//# sourceMappingURL=/sm/a7f2f0d07bf461b45f4383b82e7fe2c6c9863a7b5160663ba55a0ee828c5ab2b.map
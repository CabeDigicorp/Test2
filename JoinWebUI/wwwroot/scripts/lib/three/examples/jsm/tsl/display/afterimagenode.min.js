/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/examples/jsm/tsl/display/AfterImageNode.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{RenderTarget,Vector2,PostProcessingUtils}from"three";import{TempNode,nodeObject,Fn,float,vec4,NodeUpdateType,uv,texture,passTexture,uniform,sign,max,convertToTexture,QuadMesh,NodeMaterial}from"three/tsl";const _size=new Vector2,_quadMeshComp=new QuadMesh;let _rendererState;class AfterImageNode extends TempNode{static get type(){return"AfterImageNode"}constructor(e,t=.96){super(e),this.textureNode=e,this.textureNodeOld=texture(),this.damp=uniform(t),this._compRT=new RenderTarget(1,1,{depthBuffer:!1}),this._compRT.texture.name="AfterImageNode.comp",this._oldRT=new RenderTarget(1,1,{depthBuffer:!1}),this._oldRT.texture.name="AfterImageNode.old",this._textureNode=passTexture(this,this._compRT.texture),this.updateBeforeType=NodeUpdateType.FRAME}getTextureNode(){return this._textureNode}setSize(e,t){this._compRT.setSize(e,t),this._oldRT.setSize(e,t)}updateBefore(e){const{renderer:t}=e;_rendererState=PostProcessingUtils.resetRendererState(t,_rendererState);const r=this.textureNode,o=r.value.type;this._compRT.texture.type=o,this._oldRT.texture.type=o,t.getDrawingBufferSize(_size),this.setSize(_size.x,_size.y);const s=r.value;this.textureNodeOld.value=this._oldRT.texture,t.setRenderTarget(this._compRT),_quadMeshComp.render(t);const d=this._oldRT;this._oldRT=this._compRT,this._compRT=d,r.value=s,PostProcessingUtils.restoreRendererState(t,_rendererState)}setup(e){const t=this.textureNode,r=this.textureNodeOld,o=t.uvNode||uv();r.uvNode=o;const s=Fn((([e,t])=>{const r=float(t).toVar(),o=vec4(e).toVar();return max(sign(o.sub(r)),0)})),d=Fn((()=>{const e=vec4(r),d=vec4((e=>t.uv(e))(o));return e.mulAssign(this.damp.mul(s(e,.1))),max(d,e)})),i=this._materialComposed||(this._materialComposed=new NodeMaterial);i.name="AfterImage",i.fragmentNode=d(),_quadMeshComp.material=i;return e.getNodeProperties(this).textureNode=t,this._textureNode}dispose(){this._compRT.dispose(),this._oldRT.dispose()}}export const afterImage=(e,t)=>nodeObject(new AfterImageNode(convertToTexture(e),t));export default AfterImageNode;
//# sourceMappingURL=/sm/aa74afede2e5aaabb4e1dfffa4c96229cc11d51d21d0b1fe4bb509f13d06963b.map
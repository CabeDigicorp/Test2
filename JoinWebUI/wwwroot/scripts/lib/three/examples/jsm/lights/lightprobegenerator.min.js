/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/examples/jsm/lights/LightProbeGenerator.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{Color,LightProbe,LinearSRGBColorSpace,SphericalHarmonics3,Vector3,SRGBColorSpace,NoColorSpace,HalfFloatType,DataUtils,WebGLCoordinateSystem}from"three";class LightProbeGenerator{static fromCubeTexture(e){let t=0;const r=new Vector3,o=new Vector3,a=new Color,c=[0,0,0,0,0,0,0,0,0],n=new SphericalHarmonics3,s=n.coefficients;for(let n=0;n<6;n++){const l=e.image[n],i=l.width,h=l.height,f=document.createElement("canvas");f.width=i,f.height=h;const b=f.getContext("2d");b.drawImage(l,0,0,i,h);const g=b.getImageData(0,0,i,h),p=g.data,w=g.width,S=2/w;for(let l=0,i=p.length;l<i;l+=4){a.setRGB(p[l]/255,p[l+1]/255,p[l+2]/255),convertColorToLinear(a,e.colorSpace);const i=l/4,h=(i%w+.5)*S-1,f=1-(Math.floor(i/w)+.5)*S;switch(n){case 0:r.set(-1,f,-h);break;case 1:r.set(1,f,h);break;case 2:r.set(-h,1,-f);break;case 3:r.set(-h,-1,f);break;case 4:r.set(-h,f,1);break;case 5:r.set(h,f,-1)}const b=r.lengthSq(),g=4/(Math.sqrt(b)*b);t+=g,o.copy(r).normalize(),SphericalHarmonics3.getBasisAt(o,c);for(let e=0;e<9;e++)s[e].x+=c[e]*a.r*g,s[e].y+=c[e]*a.g*g,s[e].z+=c[e]*a.b*g}}const l=4*Math.PI/t;for(let e=0;e<9;e++)s[e].x*=l,s[e].y*=l,s[e].z*=l;return new LightProbe(n)}static async fromCubeRenderTarget(e,t){const r=e.coordinateSystem===WebGLCoordinateSystem?-1:1;let o=0;const a=new Vector3,c=new Vector3,n=new Color,s=[0,0,0,0,0,0,0,0,0],l=new SphericalHarmonics3,i=l.coefficients,h=t.texture.type,f=t.width;let b;e.isWebGLRenderer&&(b=h===HalfFloatType?new Uint16Array(f*f*4):new Uint8Array(f*f*4));for(let l=0;l<6;l++){e.isWebGLRenderer?await e.readRenderTargetPixelsAsync(t,0,0,f,f,b,l):b=await e.readRenderTargetPixelsAsync(t,0,0,f,f,0,l);const g=2/f;for(let e=0,p=b.length;e<p;e+=4){let p,w,S;h===HalfFloatType?(p=DataUtils.fromHalfFloat(b[e]),w=DataUtils.fromHalfFloat(b[e+1]),S=DataUtils.fromHalfFloat(b[e+2])):(p=b[e]/255,w=b[e+1]/255,S=b[e+2]/255),n.setRGB(p,w,S),convertColorToLinear(n,t.texture.colorSpace);const m=e/4,d=(1-(m%f+.5)*g)*r,y=1-(Math.floor(m/f)+.5)*g;switch(l){case 0:a.set(-1*r,y,d*r);break;case 1:a.set(1*r,y,-d*r);break;case 2:a.set(d,1,-y);break;case 3:a.set(d,-1,y);break;case 4:a.set(d,y,1);break;case 5:a.set(-d,y,-1)}const C=a.lengthSq(),L=4/(Math.sqrt(C)*C);o+=L,c.copy(a).normalize(),SphericalHarmonics3.getBasisAt(c,s);for(let e=0;e<9;e++)i[e].x+=s[e]*n.r*L,i[e].y+=s[e]*n.g*L,i[e].z+=s[e]*n.b*L}}const g=4*Math.PI/o;for(let e=0;e<9;e++)i[e].x*=g,i[e].y*=g,i[e].z*=g;return new LightProbe(l)}}function convertColorToLinear(e,t){switch(t){case SRGBColorSpace:e.convertSRGBToLinear();break;case LinearSRGBColorSpace:case NoColorSpace:break;default:console.warn("WARNING: LightProbeGenerator convertColorToLinear() encountered an unsupported color space.")}return e}export{LightProbeGenerator};
//# sourceMappingURL=/sm/71f0723197820ad98df4db91237b02caaab118651326de5dd54614d73eeaa355.map
/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.160.1/examples/jsm/nodes/materials/InstancedPointsNodeMaterial.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import NodeMaterial,{addNodeMaterial}from"./NodeMaterial.js";import{varying}from"../core/VaryingNode.js";import{property}from"../core/PropertyNode.js";import{attribute}from"../core/AttributeNode.js";import{cameraProjectionMatrix}from"../accessors/CameraNode.js";import{materialColor,materialPointWidth}from"../accessors/MaterialNode.js";import{modelViewMatrix}from"../accessors/ModelNode.js";import{positionGeometry}from"../accessors/PositionNode.js";import{smoothstep}from"../math/MathNode.js";import{tslFn,vec2,vec4}from"../shadernode/ShaderNode.js";import{uv}from"../accessors/UVNode.js";import{viewport}from"../display/ViewportNode.js";import{PointsMaterial}from"three";const defaultValues=new PointsMaterial;class InstancedPointsNodeMaterial extends NodeMaterial{constructor(e={}){super(),this.normals=!1,this.lights=!1,this.useAlphaToCoverage=!0,this.useColor=e.vertexColors,this.pointWidth=1,this.pointColorNode=null,this.setDefaultValues(defaultValues),this.setupShaders(),this.setValues(e)}setupShaders(){const e=this.alphaToCoverage,o=this.useColor;this.vertexNode=tslFn((()=>{varying(vec2(),"vUv").assign(uv());const e=attribute("instancePosition"),o=property("vec4","mvPos");o.assign(modelViewMatrix.mul(vec4(e,1)));const t=viewport.z.div(viewport.w),s=cameraProjectionMatrix.mul(o),r=property("vec2","offset");return r.assign(positionGeometry.xy),r.assign(r.mul(materialPointWidth)),r.assign(r.div(viewport.z)),r.y.assign(r.y.mul(t)),r.assign(r.mul(s.w)),s.assign(s.add(vec4(r,0,0))),s}))(),this.fragmentNode=tslFn((()=>{const t=varying(vec2(),"vUv"),s=property("float","alpha");s.assign(1);const r=t.x,a=t.y,i=r.mul(r).add(a.mul(a));if(e){const e=property("float","dlen");e.assign(i.fwidth()),s.assign(smoothstep(e.oneMinus(),e.add(1),i).oneMinus())}else i.greaterThan(1).discard();let n;if(this.pointColorNode)n=this.pointColorNode;else if(o){n=attribute("instanceColor").mul(materialColor)}else n=materialColor;return vec4(n,s)}))(),this.needsUpdate=!0}get alphaToCoverage(){return this.useAlphaToCoverage}set alphaToCoverage(e){this.useAlphaToCoverage!==e&&(this.useAlphaToCoverage=e,this.setupShaders())}}export default InstancedPointsNodeMaterial;addNodeMaterial("InstancedPointsNodeMaterial",InstancedPointsNodeMaterial);
//# sourceMappingURL=/sm/49af816a166f450f7514cc7bbef88e2adfa4ee092a283ffa8d2f386d2015baa5.map
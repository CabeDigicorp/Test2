/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.160.1/examples/jsm/nodes/accessors/MaterialNode.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Node,{addNodeClass}from"../core/Node.js";import{reference}from"./ReferenceNode.js";import{materialReference}from"./MaterialReferenceNode.js";import{normalView}from"./NormalNode.js";import{nodeImmutable,float}from"../shadernode/ShaderNode.js";const _propertyCache=new Map;class MaterialNode extends Node{constructor(e){super(),this.scope=e}getCache(e,a){let t=_propertyCache.get(e);return void 0===t&&(t=materialReference(e,a),_propertyCache.set(e,t)),t}getFloat(e){return this.getCache(e,"float")}getColor(e){return this.getCache(e,"color")}getTexture(e){return this.getCache("map"===e?"map":e+"Map","texture")}setup(e){const a=e.context.material,t=this.scope;let o=null;if(t===MaterialNode.COLOR){const e=this.getColor(t);o=a.map&&!0===a.map.isTexture?e.mul(this.getTexture("map")):e}else if(t===MaterialNode.OPACITY){const e=this.getFloat(t);o=a.alphaMap&&!0===a.alphaMap.isTexture?e.mul(this.getTexture("alpha")):e}else if(t===MaterialNode.SPECULAR_STRENGTH)o=a.specularMap&&!0===a.specularMap.isTexture?this.getTexture(t).r:float(1);else if(t===MaterialNode.ROUGHNESS){const e=this.getFloat(t);o=a.roughnessMap&&!0===a.roughnessMap.isTexture?e.mul(this.getTexture(t).g):e}else if(t===MaterialNode.METALNESS){const e=this.getFloat(t);o=a.metalnessMap&&!0===a.metalnessMap.isTexture?e.mul(this.getTexture(t).b):e}else if(t===MaterialNode.EMISSIVE){const e=this.getColor(t);o=a.emissiveMap&&!0===a.emissiveMap.isTexture?e.mul(this.getTexture(t)):e}else if(t===MaterialNode.NORMAL)o=a.normalMap?this.getTexture("normal").normalMap(this.getCache("normalScale","vec2")):a.bumpMap?this.getTexture("bump").r.bumpMap(this.getFloat("bumpScale")):normalView;else if(t===MaterialNode.CLEARCOAT){const e=this.getFloat(t);o=a.clearcoatMap&&!0===a.clearcoatMap.isTexture?e.mul(this.getTexture(t).r):e}else if(t===MaterialNode.CLEARCOAT_ROUGHNESS){const e=this.getFloat(t);o=a.clearcoatRoughnessMap&&!0===a.clearcoatRoughnessMap.isTexture?e.mul(this.getTexture(t).r):e}else if(t===MaterialNode.CLEARCOAT_NORMAL)o=a.clearcoatNormalMap?this.getTexture(t).normalMap(this.getCache(t+"Scale","vec2")):normalView;else if(t===MaterialNode.SHEEN){const e=this.getColor("sheenColor").mul(this.getFloat("sheen"));o=a.sheenColorMap&&!0===a.sheenColorMap.isTexture?e.mul(this.getTexture("sheenColor").rgb):e}else if(t===MaterialNode.SHEEN_ROUGHNESS){const e=this.getFloat(t);o=a.sheenRoughnessMap&&!0===a.sheenRoughnessMap.isTexture?e.mul(this.getTexture(t).a):e,o=o.clamp(.07,1)}else if(t===MaterialNode.IRIDESCENCE_THICKNESS){const e=reference(1,"float",a.iridescenceThicknessRange);if(a.iridescenceThicknessMap){const r=reference(0,"float",a.iridescenceThicknessRange);o=e.sub(r).mul(this.getTexture(t).g).add(r)}else o=e}else{const a=this.getNodeType(e);o=this.getCache(t,a)}return o}}MaterialNode.ALPHA_TEST="alphaTest",MaterialNode.COLOR="color",MaterialNode.OPACITY="opacity",MaterialNode.SHININESS="shininess",MaterialNode.SPECULAR_COLOR="specular",MaterialNode.SPECULAR_STRENGTH="specularStrength",MaterialNode.REFLECTIVITY="reflectivity",MaterialNode.ROUGHNESS="roughness",MaterialNode.METALNESS="metalness",MaterialNode.NORMAL="normal",MaterialNode.CLEARCOAT="clearcoat",MaterialNode.CLEARCOAT_ROUGHNESS="clearcoatRoughness",MaterialNode.CLEARCOAT_NORMAL="clearcoatNormal",MaterialNode.EMISSIVE="emissive",MaterialNode.ROTATION="rotation",MaterialNode.SHEEN="sheen",MaterialNode.SHEEN_ROUGHNESS="sheenRoughness",MaterialNode.IRIDESCENCE="iridescence",MaterialNode.IRIDESCENCE_IOR="iridescenceIOR",MaterialNode.IRIDESCENCE_THICKNESS="iridescenceThickness",MaterialNode.LINE_SCALE="scale",MaterialNode.LINE_DASH_SIZE="dashSize",MaterialNode.LINE_GAP_SIZE="gapSize",MaterialNode.LINE_WIDTH="linewidth",MaterialNode.LINE_DASH_OFFSET="dashOffset",MaterialNode.POINT_WIDTH="pointWidth";export default MaterialNode;export const materialAlphaTest=nodeImmutable(MaterialNode,MaterialNode.ALPHA_TEST);export const materialColor=nodeImmutable(MaterialNode,MaterialNode.COLOR);export const materialShininess=nodeImmutable(MaterialNode,MaterialNode.SHININESS);export const materialEmissive=nodeImmutable(MaterialNode,MaterialNode.EMISSIVE);export const materialOpacity=nodeImmutable(MaterialNode,MaterialNode.OPACITY);export const materialSpecularColor=nodeImmutable(MaterialNode,MaterialNode.SPECULAR_COLOR);export const materialSpecularStrength=nodeImmutable(MaterialNode,MaterialNode.SPECULAR_STRENGTH);export const materialReflectivity=nodeImmutable(MaterialNode,MaterialNode.REFLECTIVITY);export const materialRoughness=nodeImmutable(MaterialNode,MaterialNode.ROUGHNESS);export const materialMetalness=nodeImmutable(MaterialNode,MaterialNode.METALNESS);export const materialNormal=nodeImmutable(MaterialNode,MaterialNode.NORMAL);export const materialClearcoat=nodeImmutable(MaterialNode,MaterialNode.CLEARCOAT);export const materialClearcoatRoughness=nodeImmutable(MaterialNode,MaterialNode.CLEARCOAT_ROUGHNESS);export const materialClearcoatNormal=nodeImmutable(MaterialNode,MaterialNode.CLEARCOAT_NORMAL);export const materialRotation=nodeImmutable(MaterialNode,MaterialNode.ROTATION);export const materialSheen=nodeImmutable(MaterialNode,MaterialNode.SHEEN);export const materialSheenRoughness=nodeImmutable(MaterialNode,MaterialNode.SHEEN_ROUGHNESS);export const materialIridescence=nodeImmutable(MaterialNode,MaterialNode.IRIDESCENCE);export const materialIridescenceIOR=nodeImmutable(MaterialNode,MaterialNode.IRIDESCENCE_IOR);export const materialIridescenceThickness=nodeImmutable(MaterialNode,MaterialNode.IRIDESCENCE_THICKNESS);export const materialLineScale=nodeImmutable(MaterialNode,MaterialNode.LINE_SCALE);export const materialLineDashSize=nodeImmutable(MaterialNode,MaterialNode.LINE_DASH_SIZE);export const materialLineGapSize=nodeImmutable(MaterialNode,MaterialNode.LINE_GAP_SIZE);export const materialLineWidth=nodeImmutable(MaterialNode,MaterialNode.LINE_WIDTH);export const materialLineDashOffset=nodeImmutable(MaterialNode,MaterialNode.LINE_DASH_OFFSET);export const materialPointWidth=nodeImmutable(MaterialNode,MaterialNode.POINT_WIDTH);addNodeClass("MaterialNode",MaterialNode);
//# sourceMappingURL=/sm/1808a94682e5fef3080fbba92c516901f719e8692719b05b942c601db357c6a2.map
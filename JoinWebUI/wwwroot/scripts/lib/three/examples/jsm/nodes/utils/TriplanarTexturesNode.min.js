/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.160.1/examples/jsm/nodes/utils/TriplanarTexturesNode.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Node,{addNodeClass}from"../core/Node.js";import{add}from"../math/OperatorNode.js";import{normalLocal}from"../accessors/NormalNode.js";import{positionLocal}from"../accessors/PositionNode.js";import{texture}from"../accessors/TextureNode.js";import{addNodeElement,nodeProxy,float,vec3}from"../shadernode/ShaderNode.js";class TriplanarTexturesNode extends Node{constructor(e,o=null,r=null,t=float(1),a=positionLocal,s=normalLocal){super("vec4"),this.textureXNode=e,this.textureYNode=o,this.textureZNode=r,this.scaleNode=t,this.positionNode=a,this.normalNode=s}setup(){const{textureXNode:e,textureYNode:o,textureZNode:r,scaleNode:t,positionNode:a,normalNode:s}=this;let d=s.abs().normalize();d=d.div(d.dot(vec3(1)));const l=a.yz.mul(t),u=a.zx.mul(t),n=a.xy.mul(t),i=e.value,x=null!==o?o.value:i,N=null!==r?r.value:i,m=texture(i,l).mul(d.x),p=texture(x,u).mul(d.y),c=texture(N,n).mul(d.z);return add(m,p,c)}}export default TriplanarTexturesNode;export const triplanarTextures=nodeProxy(TriplanarTexturesNode);export const triplanarTexture=(...e)=>triplanarTextures(...e);addNodeElement("triplanarTexture",triplanarTexture),addNodeClass("TriplanarTexturesNode",TriplanarTexturesNode);
//# sourceMappingURL=/sm/4ff7d98e2e00fe5caf1e521c22b7fe2c8336b1a54712afce3558953e3abbc765.map
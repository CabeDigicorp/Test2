/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.160.1/examples/jsm/nodes/utils/FunctionOverloadingNode.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Node,{addNodeClass}from"../core/Node.js";import{nodeProxy}from"../shadernode/ShaderNode.js";class FunctionOverloadingNode extends Node{constructor(o=[],...e){super(),this.functionNodes=o,this.parametersNodes=e,this._candidateFnCall=null}getNodeType(){return this.functionNodes[0].shaderNode.layout.type}setup(o){const e=this.parametersNodes;let n=this._candidateFnCall;if(null===n){let t=null,d=-1;for(const n of this.functionNodes){const s=n.shaderNode.layout;if(null===s)throw new Error("FunctionOverloadingNode: FunctionNode must be a layout.");const r=s.inputs;if(e.length===r.length){let s=0;for(let n=0;n<e.length;n++){const t=e[n],d=r[n];t.getNodeType(o)===d.type?s++:s=0}s>d&&(t=n,d=s)}}this._candidateFnCall=n=t(...e)}return n}}export default FunctionOverloadingNode;const overloadingBaseFn=nodeProxy(FunctionOverloadingNode);export const overloadingFn=o=>(...e)=>overloadingBaseFn(o,...e);addNodeClass("FunctionOverloadingNode",FunctionOverloadingNode);
//# sourceMappingURL=/sm/aa790951cb06ba676c6222986cad86bf4287d7113fe38006551be564c4246532.map
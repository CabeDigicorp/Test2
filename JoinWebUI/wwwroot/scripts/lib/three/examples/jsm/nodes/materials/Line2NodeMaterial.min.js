/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.160.1/examples/jsm/nodes/materials/Line2NodeMaterial.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import NodeMaterial,{addNodeMaterial}from"./NodeMaterial.js";import{temp}from"../core/VarNode.js";import{varying}from"../core/VaryingNode.js";import{property,varyingProperty}from"../core/PropertyNode.js";import{attribute}from"../core/AttributeNode.js";import{cameraProjectionMatrix}from"../accessors/CameraNode.js";import{materialColor,materialLineScale,materialLineDashSize,materialLineGapSize,materialLineDashOffset,materialLineWidth}from"../accessors/MaterialNode.js";import{modelViewMatrix}from"../accessors/ModelNode.js";import{positionGeometry}from"../accessors/PositionNode.js";import{mix,smoothstep}from"../math/MathNode.js";import{tslFn,float,vec2,vec3,vec4,If}from"../shadernode/ShaderNode.js";import{uv}from"../accessors/UVNode.js";import{viewport}from"../display/ViewportNode.js";import{dashSize,gapSize}from"../core/PropertyNode.js";import{LineDashedMaterial}from"three";const defaultValues=new LineDashedMaterial;class Line2NodeMaterial extends NodeMaterial{constructor(e={}){super(),this.normals=!1,this.lights=!1,this.setDefaultValues(defaultValues),this.useAlphaToCoverage=!0,this.useColor=e.vertexColors,this.useDash=e.dashed,this.useWorldUnits=!1,this.dashOffset=0,this.lineWidth=1,this.lineColorNode=null,this.offsetNode=null,this.dashScaleNode=null,this.dashSizeNode=null,this.gapSizeNode=null,this.setupShaders(),this.setValues(e)}setupShaders(){const e=this.alphaToCoverage,s=this.useColor,t=this.dashed,a=this.worldUnits,i=tslFn((({start:e,end:s})=>{const t=cameraProjectionMatrix.element(2).element(2),a=cameraProjectionMatrix.element(3).element(2).mul(-.5).div(t).sub(e.z).div(s.z.sub(e.z));return vec4(mix(e.xyz,s.xyz,a),s.w)}));this.vertexNode=tslFn((()=>{varyingProperty("vec2","vUv").assign(uv());const e=attribute("instanceStart"),s=attribute("instanceEnd"),o=property("vec4","start"),r=property("vec4","end");o.assign(modelViewMatrix.mul(vec4(e,1))),r.assign(modelViewMatrix.mul(vec4(s,1))),a&&(varyingProperty("vec3","worldStart").assign(o.xyz),varyingProperty("vec3","worldEnd").assign(r.xyz));const n=viewport.z.div(viewport.w),d=cameraProjectionMatrix.element(2).element(3).equal(-1);If(d,(()=>{If(o.z.lessThan(0).and(r.z.greaterThan(0)),(()=>{r.assign(i({start:o,end:r}))})).elseif(r.z.lessThan(0).and(o.z.greaterThanEqual(0)),(()=>{o.assign(i({start:r,end:o}))}))}));const l=cameraProjectionMatrix.mul(o),m=cameraProjectionMatrix.mul(r),h=l.xyz.div(l.w),c=m.xyz.div(m.w),u=c.xy.sub(h.xy).temp();u.x.assign(u.x.mul(n)),u.assign(u.normalize());const p=temp(vec4());if(a){const e=r.xyz.sub(o.xyz).normalize(),s=positionGeometry.y.lessThan(.5).cond(o.xyz.cross(e).normalize(),r.xyz.cross(e).normalize());s.assign(positionGeometry.x.lessThan(0).cond(s.negate(),s));const a=e.dot(vec3(0,0,1));t||(o.assign(o.sub(vec4(e.mul(materialLineWidth).mul(.5),0))),r.assign(r.add(vec4(e.mul(materialLineWidth).mul(.5),0))),s.assign(s.sub(vec3(u.mul(a),0))),s.z.assign(s.z.add(.5))),If(positionGeometry.y.greaterThan(1).or(positionGeometry.y.lessThan(0)),(()=>{s.assign(s.add(vec3(u.mul(2).mul(a),0)))})),s.assign(s.mul(materialLineWidth).mul(.5));const i=varyingProperty("vec4","worldPos");i.assign(positionGeometry.y.lessThan(.5).cond(o,r)),i.assign(i.add(vec4(s,0))),p.assign(cameraProjectionMatrix.mul(i));const n=temp(vec3());n.assign(positionGeometry.y.lessThan(.5).cond(h,c)),p.z.assign(n.z.mul(p.w))}else{const e=property("vec2","offset");e.assign(vec2(u.y,u.x.negate())),u.x.assign(u.x.div(n)),e.x.assign(e.x.div(n)),e.assign(positionGeometry.x.lessThan(0).cond(e.negate(),e)),If(positionGeometry.y.lessThan(0),(()=>{e.assign(e.sub(u))})).elseif(positionGeometry.y.greaterThan(1),(()=>{e.assign(e.add(u))})),e.assign(e.mul(materialLineWidth)),e.assign(e.div(viewport.w)),p.assign(positionGeometry.y.lessThan(.5).cond(l,m)),e.assign(e.mul(p.w)),p.assign(p.add(vec4(e,0,0)))}return p}))();const o=tslFn((({p1:e,p2:s,p3:t,p4:a})=>{const i=e.sub(t),o=a.sub(t),r=s.sub(e),n=i.dot(o),d=o.dot(r),l=i.dot(r),m=o.dot(o),h=r.dot(r).mul(m).sub(d.mul(d)),c=n.mul(d).sub(l.mul(m)).div(h).clamp(),u=n.add(d.mul(c)).div(m).clamp();return vec2(c,u)}));this.fragmentNode=tslFn((()=>{const i=varyingProperty("vec2","vUv");if(t){const e=this.offsetNode?float(this.offsetNodeNode):materialLineDashOffset,s=this.dashScaleNode?float(this.dashScaleNode):materialLineScale,t=this.dashSizeNode?float(this.dashSizeNode):materialLineDashSize,a=this.dashSizeNode?float(this.dashGapNode):materialLineGapSize;dashSize.assign(t),gapSize.assign(a);const o=attribute("instanceDistanceStart"),r=attribute("instanceDistanceEnd"),n=positionGeometry.y.lessThan(.5).cond(s.mul(o),materialLineScale.mul(r)),d=varying(n.add(materialLineDashOffset)),l=e?d.add(e):d;i.y.lessThan(-1).or(i.y.greaterThan(1)).discard(),l.mod(dashSize.add(gapSize)).greaterThan(dashSize).discard()}const r=property("float","alpha");if(r.assign(1),a){const s=varyingProperty("vec3","worldStart"),a=varyingProperty("vec3","worldEnd"),i=varyingProperty("vec4","worldPos").xyz.normalize().mul(1e5),n=a.sub(s),d=o({p1:s,p2:a,p3:vec3(0,0,0),p4:i}),l=s.add(n.mul(d.x)),m=i.mul(d.y),h=l.sub(m).length().div(materialLineWidth);if(!t)if(e){const e=h.fwidth();r.assign(smoothstep(e.negate().add(.5),e.add(.5),h).oneMinus())}else h.greaterThan(.5).discard()}else if(e){const e=i.x,s=i.y.greaterThan(0).cond(i.y.sub(1),i.y.add(1)),t=e.mul(e).add(s.mul(s)),a=property("float","dlen");a.assign(t.fwidth()),If(i.y.abs().greaterThan(1),(()=>{r.assign(smoothstep(a.oneMinus(),a.add(1),t).oneMinus())}))}else If(i.y.abs().greaterThan(1),(()=>{const e=i.x,s=i.y.greaterThan(0).cond(i.y.sub(1),i.y.add(1));e.mul(e).add(s.mul(s)).greaterThan(1).discard()}));let n;if(this.lineColorNode)n=this.lineColorNode;else if(s){const e=attribute("instanceColorStart"),s=attribute("instanceColorEnd");n=positionGeometry.y.lessThan(.5).cond(e,s).mul(materialColor)}else n=materialColor;return vec4(n,r)}))(),this.needsUpdate=!0}get worldUnits(){return this.useWorldUnits}set worldUnits(e){this.useWorldUnits!==e&&(this.useWorldUnits=e,this.setupShaders())}get dashed(){return this.useDash}set dashed(e){this.useDash!==e&&(this.useDash=e,this.setupShaders())}get alphaToCoverage(){return this.useAlphaToCoverage}set alphaToCoverage(e){this.useAlphaToCoverage!==e&&(this.useAlphaToCoverage=e,this.setupShaders())}}export default Line2NodeMaterial;addNodeMaterial("Line2NodeMaterial",Line2NodeMaterial);
//# sourceMappingURL=/sm/302591ffbdcde85420a5b7e654170c1df7d4e3d2729fa68158d638b8c7fd1c52.map
/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.160.1/examples/jsm/nodes/materials/MeshStandardNodeMaterial.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import NodeMaterial,{addNodeMaterial}from"./NodeMaterial.js";import{diffuseColor,metalness,roughness,specularColor}from"../core/PropertyNode.js";import{mix}from"../math/MathNode.js";import{materialRoughness,materialMetalness}from"../accessors/MaterialNode.js";import getRoughness from"../functions/material/getRoughness.js";import PhysicalLightingModel from"../functions/PhysicalLightingModel.js";import{float,vec3,vec4}from"../shadernode/ShaderNode.js";import{MeshStandardMaterial}from"three";const defaultValues=new MeshStandardMaterial;class MeshStandardNodeMaterial extends NodeMaterial{constructor(e){super(),this.isMeshStandardNodeMaterial=!0,this.emissiveNode=null,this.metalnessNode=null,this.roughnessNode=null,this.setDefaultValues(defaultValues),this.setValues(e)}setupLightingModel(){return new PhysicalLightingModel}setupVariants(){const e=this.metalnessNode?float(this.metalnessNode):materialMetalness;metalness.assign(e);let s=this.roughnessNode?float(this.roughnessNode):materialRoughness;s=getRoughness({roughness:s}),roughness.assign(s);const o=mix(vec3(.04),diffuseColor.rgb,e);specularColor.assign(o),diffuseColor.assign(vec4(diffuseColor.rgb.mul(e.oneMinus()),diffuseColor.a))}copy(e){return this.emissiveNode=e.emissiveNode,this.metalnessNode=e.metalnessNode,this.roughnessNode=e.roughnessNode,super.copy(e)}}export default MeshStandardNodeMaterial;addNodeMaterial("MeshStandardNodeMaterial",MeshStandardNodeMaterial);
//# sourceMappingURL=/sm/c48285052e8dcaeb25a9b0ad2d6a3400b7b36d8de7bce010a7ced1d1ae2d9d8c.map
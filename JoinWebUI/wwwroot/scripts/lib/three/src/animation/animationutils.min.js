/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/animation/AnimationUtils.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{Quaternion}from"../math/Quaternion.js";import{AdditiveAnimationBlendMode}from"../constants.js";function convertArray(e,t,r){return!e||!r&&e.constructor===t?e:"number"==typeof t.BYTES_PER_ELEMENT?new t(e):Array.prototype.slice.call(e)}function isTypedArray(e){return ArrayBuffer.isView(e)&&!(e instanceof DataView)}function getKeyframeOrder(e){const t=e.length,r=new Array(t);for(let e=0;e!==t;++e)r[e]=e;return r.sort((function(t,r){return e[t]-e[r]})),r}function sortedArray(e,t,r){const n=e.length,o=new e.constructor(n);for(let i=0,s=0;s!==n;++i){const n=r[i]*t;for(let r=0;r!==t;++r)o[s++]=e[n+r]}return o}function flattenJSON(e,t,r,n){let o=1,i=e[0];for(;void 0!==i&&void 0===i[n];)i=e[o++];if(void 0===i)return;let s=i[n];if(void 0!==s)if(Array.isArray(s))do{s=i[n],void 0!==s&&(t.push(i.time),r.push.apply(r,s)),i=e[o++]}while(void 0!==i);else if(void 0!==s.toArray)do{s=i[n],void 0!==s&&(t.push(i.time),s.toArray(r,r.length)),i=e[o++]}while(void 0!==i);else do{s=i[n],void 0!==s&&(t.push(i.time),r.push(s)),i=e[o++]}while(void 0!==i)}function subclip(e,t,r,n,o=30){const i=e.clone();i.name=t;const s=[];for(let e=0;e<i.tracks.length;++e){const t=i.tracks[e],a=t.getValueSize(),l=[],c=[];for(let e=0;e<t.times.length;++e){const i=t.times[e]*o;if(!(i<r||i>=n)){l.push(t.times[e]);for(let r=0;r<a;++r)c.push(t.values[e*a+r])}}0!==l.length&&(t.times=convertArray(l,t.times.constructor),t.values=convertArray(c,t.values.constructor),s.push(t))}i.tracks=s;let a=1/0;for(let e=0;e<i.tracks.length;++e)a>i.tracks[e].times[0]&&(a=i.tracks[e].times[0]);for(let e=0;e<i.tracks.length;++e)i.tracks[e].shift(-1*a);return i.resetDuration(),i}function makeClipAdditive(e,t=0,r=e,n=30){n<=0&&(n=30);const o=r.tracks.length,i=t/n;for(let t=0;t<o;++t){const n=r.tracks[t],o=n.ValueTypeName;if("bool"===o||"string"===o)continue;const s=e.tracks.find((function(e){return e.name===n.name&&e.ValueTypeName===o}));if(void 0===s)continue;let a=0;const l=n.getValueSize();n.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(a=l/3);let c=0;const u=s.getValueSize();s.createInterpolant.isInterpolantFactoryMethodGLTFCubicSpline&&(c=u/3);const f=n.times.length-1;let d;if(i<=n.times[0]){const e=a,t=l-a;d=n.values.slice(e,t)}else if(i>=n.times[f]){const e=f*l+a,t=e+l-a;d=n.values.slice(e,t)}else{const e=n.createInterpolant(),t=a,r=l-a;e.evaluate(i),d=e.resultBuffer.slice(t,r)}if("quaternion"===o){(new Quaternion).fromArray(d).normalize().conjugate().toArray(d)}const m=s.times.length;for(let e=0;e<m;++e){const t=e*u+c;if("quaternion"===o)Quaternion.multiplyQuaternionsFlat(s.values,t,d,0,s.values,t);else{const e=u-2*c;for(let r=0;r<e;++r)s.values[t+r]-=d[r]}}}return e.blendMode=AdditiveAnimationBlendMode,e}const AnimationUtils={convertArray:convertArray,isTypedArray:isTypedArray,getKeyframeOrder:getKeyframeOrder,sortedArray:sortedArray,flattenJSON:flattenJSON,subclip:subclip,makeClipAdditive:makeClipAdditive};export{convertArray,isTypedArray,getKeyframeOrder,sortedArray,flattenJSON,subclip,makeClipAdditive,AnimationUtils};
//# sourceMappingURL=/sm/ed24b52f0713c443db64948de3e720c00e6e0da0bdde753da2eddeab78460675.map
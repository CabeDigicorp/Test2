/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/math/Frustum.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{WebGLCoordinateSystem,WebGPUCoordinateSystem}from"../constants.js";import{Vector3}from"./Vector3.js";import{Sphere}from"./Sphere.js";import{Plane}from"./Plane.js";const _sphere=new Sphere,_vector=new Vector3;class Frustum{constructor(e=new Plane,t=new Plane,n=new Plane,r=new Plane,o=new Plane,s=new Plane){this.planes=[e,t,n,r,o,s]}set(e,t,n,r,o,s){const i=this.planes;return i[0].copy(e),i[1].copy(t),i[2].copy(n),i[3].copy(r),i[4].copy(o),i[5].copy(s),this}copy(e){const t=this.planes;for(let n=0;n<6;n++)t[n].copy(e.planes[n]);return this}setFromProjectionMatrix(e,t=WebGLCoordinateSystem){const n=this.planes,r=e.elements,o=r[0],s=r[1],i=r[2],p=r[3],a=r[4],c=r[5],m=r[6],l=r[7],h=r[8],u=r[9],y=r[10],d=r[11],S=r[12],x=r[13],P=r[14],f=r[15];if(n[0].setComponents(p-o,l-a,d-h,f-S).normalize(),n[1].setComponents(p+o,l+a,d+h,f+S).normalize(),n[2].setComponents(p+s,l+c,d+u,f+x).normalize(),n[3].setComponents(p-s,l-c,d-u,f-x).normalize(),n[4].setComponents(p-i,l-m,d-y,f-P).normalize(),t===WebGLCoordinateSystem)n[5].setComponents(p+i,l+m,d+y,f+P).normalize();else{if(t!==WebGPUCoordinateSystem)throw new Error("THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: "+t);n[5].setComponents(i,m,y,P).normalize()}return this}intersectsObject(e){if(void 0!==e.boundingSphere)null===e.boundingSphere&&e.computeBoundingSphere(),_sphere.copy(e.boundingSphere).applyMatrix4(e.matrixWorld);else{const t=e.geometry;null===t.boundingSphere&&t.computeBoundingSphere(),_sphere.copy(t.boundingSphere).applyMatrix4(e.matrixWorld)}return this.intersectsSphere(_sphere)}intersectsSprite(e){return _sphere.center.set(0,0,0),_sphere.radius=.7071067811865476,_sphere.applyMatrix4(e.matrixWorld),this.intersectsSphere(_sphere)}intersectsSphere(e){const t=this.planes,n=e.center,r=-e.radius;for(let e=0;e<6;e++){if(t[e].distanceToPoint(n)<r)return!1}return!0}intersectsBox(e){const t=this.planes;for(let n=0;n<6;n++){const r=t[n];if(_vector.x=r.normal.x>0?e.max.x:e.min.x,_vector.y=r.normal.y>0?e.max.y:e.min.y,_vector.z=r.normal.z>0?e.max.z:e.min.z,r.distanceToPoint(_vector)<0)return!1}return!0}containsPoint(e){const t=this.planes;for(let n=0;n<6;n++)if(t[n].distanceToPoint(e)<0)return!1;return!0}clone(){return(new this.constructor).copy(this)}}export{Frustum};
//# sourceMappingURL=/sm/f1626a7e7510960e66d4c65ab183dbdd7bd51fc04ec76e4cd1ce2cf2bd916c53.map
/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/math/Quaternion.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import*as MathUtils from"./MathUtils.js";class Quaternion{constructor(t=0,s=0,i=0,h=1){this.isQuaternion=!0,this._x=t,this._y=s,this._z=i,this._w=h}static slerpFlat(t,s,i,h,_,n,r){let e=i[h+0],a=i[h+1],o=i[h+2],l=i[h+3];const y=_[n+0],u=_[n+1],c=_[n+2],x=_[n+3];if(0===r)return t[s+0]=e,t[s+1]=a,t[s+2]=o,void(t[s+3]=l);if(1===r)return t[s+0]=y,t[s+1]=u,t[s+2]=c,void(t[s+3]=x);if(l!==x||e!==y||a!==u||o!==c){let t=1-r;const s=e*y+a*u+o*c+l*x,i=s>=0?1:-1,h=1-s*s;if(h>Number.EPSILON){const _=Math.sqrt(h),n=Math.atan2(_,s*i);t=Math.sin(t*n)/_,r=Math.sin(r*n)/_}const _=r*i;if(e=e*t+y*_,a=a*t+u*_,o=o*t+c*_,l=l*t+x*_,t===1-r){const t=1/Math.sqrt(e*e+a*a+o*o+l*l);e*=t,a*=t,o*=t,l*=t}}t[s]=e,t[s+1]=a,t[s+2]=o,t[s+3]=l}static multiplyQuaternionsFlat(t,s,i,h,_,n){const r=i[h],e=i[h+1],a=i[h+2],o=i[h+3],l=_[n],y=_[n+1],u=_[n+2],c=_[n+3];return t[s]=r*c+o*l+e*u-a*y,t[s+1]=e*c+o*y+a*l-r*u,t[s+2]=a*c+o*u+r*y-e*l,t[s+3]=o*c-r*l-e*y-a*u,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,s,i,h){return this._x=t,this._y=s,this._z=i,this._w=h,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,s=!0){const i=t._x,h=t._y,_=t._z,n=t._order,r=Math.cos,e=Math.sin,a=r(i/2),o=r(h/2),l=r(_/2),y=e(i/2),u=e(h/2),c=e(_/2);switch(n){case"XYZ":this._x=y*o*l+a*u*c,this._y=a*u*l-y*o*c,this._z=a*o*c+y*u*l,this._w=a*o*l-y*u*c;break;case"YXZ":this._x=y*o*l+a*u*c,this._y=a*u*l-y*o*c,this._z=a*o*c-y*u*l,this._w=a*o*l+y*u*c;break;case"ZXY":this._x=y*o*l-a*u*c,this._y=a*u*l+y*o*c,this._z=a*o*c+y*u*l,this._w=a*o*l-y*u*c;break;case"ZYX":this._x=y*o*l-a*u*c,this._y=a*u*l+y*o*c,this._z=a*o*c-y*u*l,this._w=a*o*l+y*u*c;break;case"YZX":this._x=y*o*l+a*u*c,this._y=a*u*l+y*o*c,this._z=a*o*c-y*u*l,this._w=a*o*l-y*u*c;break;case"XZY":this._x=y*o*l-a*u*c,this._y=a*u*l-y*o*c,this._z=a*o*c+y*u*l,this._w=a*o*l+y*u*c;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+n)}return!0===s&&this._onChangeCallback(),this}setFromAxisAngle(t,s){const i=s/2,h=Math.sin(i);return this._x=t.x*h,this._y=t.y*h,this._z=t.z*h,this._w=Math.cos(i),this._onChangeCallback(),this}setFromRotationMatrix(t){const s=t.elements,i=s[0],h=s[4],_=s[8],n=s[1],r=s[5],e=s[9],a=s[2],o=s[6],l=s[10],y=i+r+l;if(y>0){const t=.5/Math.sqrt(y+1);this._w=.25/t,this._x=(o-e)*t,this._y=(_-a)*t,this._z=(n-h)*t}else if(i>r&&i>l){const t=2*Math.sqrt(1+i-r-l);this._w=(o-e)/t,this._x=.25*t,this._y=(h+n)/t,this._z=(_+a)/t}else if(r>l){const t=2*Math.sqrt(1+r-i-l);this._w=(_-a)/t,this._x=(h+n)/t,this._y=.25*t,this._z=(e+o)/t}else{const t=2*Math.sqrt(1+l-i-r);this._w=(n-h)/t,this._x=(_+a)/t,this._y=(e+o)/t,this._z=.25*t}return this._onChangeCallback(),this}setFromUnitVectors(t,s){let i=t.dot(s)+1;return i<Number.EPSILON?(i=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=i):(this._x=0,this._y=-t.z,this._z=t.y,this._w=i)):(this._x=t.y*s.z-t.z*s.y,this._y=t.z*s.x-t.x*s.z,this._z=t.x*s.y-t.y*s.x,this._w=i),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(MathUtils.clamp(this.dot(t),-1,1)))}rotateTowards(t,s){const i=this.angleTo(t);if(0===i)return this;const h=Math.min(1,s/i);return this.slerp(t,h),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return 0===t?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,s){const i=t._x,h=t._y,_=t._z,n=t._w,r=s._x,e=s._y,a=s._z,o=s._w;return this._x=i*o+n*r+h*a-_*e,this._y=h*o+n*e+_*r-i*a,this._z=_*o+n*a+i*e-h*r,this._w=n*o-i*r-h*e-_*a,this._onChangeCallback(),this}slerp(t,s){if(0===s)return this;if(1===s)return this.copy(t);const i=this._x,h=this._y,_=this._z,n=this._w;let r=n*t._w+i*t._x+h*t._y+_*t._z;if(r<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,r=-r):this.copy(t),r>=1)return this._w=n,this._x=i,this._y=h,this._z=_,this;const e=1-r*r;if(e<=Number.EPSILON){const t=1-s;return this._w=t*n+s*this._w,this._x=t*i+s*this._x,this._y=t*h+s*this._y,this._z=t*_+s*this._z,this.normalize(),this}const a=Math.sqrt(e),o=Math.atan2(a,r),l=Math.sin((1-s)*o)/a,y=Math.sin(s*o)/a;return this._w=n*l+this._w*y,this._x=i*l+this._x*y,this._y=h*l+this._y*y,this._z=_*l+this._z*y,this._onChangeCallback(),this}slerpQuaternions(t,s,i){return this.copy(t).slerp(s,i)}random(){const t=2*Math.PI*Math.random(),s=2*Math.PI*Math.random(),i=Math.random(),h=Math.sqrt(1-i),_=Math.sqrt(i);return this.set(h*Math.sin(t),h*Math.cos(t),_*Math.sin(s),_*Math.cos(s))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,s=0){return this._x=t[s],this._y=t[s+1],this._z=t[s+2],this._w=t[s+3],this._onChangeCallback(),this}toArray(t=[],s=0){return t[s]=this._x,t[s+1]=this._y,t[s+2]=this._z,t[s+3]=this._w,t}fromBufferAttribute(t,s){return this._x=t.getX(s),this._y=t.getY(s),this._z=t.getZ(s),this._w=t.getW(s),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}export{Quaternion};
//# sourceMappingURL=/sm/84d50f789a5edc12409fe7ff848caea9da38c73735d1016b4b27582df698d270.map
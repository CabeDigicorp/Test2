/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/nodes/accessors/ClippingNode.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Node from"../core/Node.js";import{nodeObject}from"../tsl/TSLBase.js";import{positionView}from"./Position.js";import{diffuseColor,property}from"../core/PropertyNode.js";import{Fn}from"../tsl/TSLBase.js";import{Loop}from"../utils/LoopNode.js";import{smoothstep}from"../math/MathNode.js";import{uniformArray}from"./UniformArrayNode.js";class ClippingNode extends Node{static get type(){return"ClippingNode"}constructor(o=ClippingNode.DEFAULT){super(),this.scope=o}setup(o){super.setup(o);const e=o.clippingContext,{localClipIntersection:i,localClippingCount:t,globalClippingCount:p}=e,s=p+t,n=i?s-t:s;return this.scope===ClippingNode.ALPHA_TO_COVERAGE?this.setupAlphaToCoverage(e.planes,s,n):this.setupDefault(e.planes,s,n)}setupAlphaToCoverage(o,e,i){return Fn((()=>{const t=uniformArray(o),p=property("float","distanceToPlane"),s=property("float","distanceToGradient"),n=property("float","clipOpacity");let r;if(n.assign(1),Loop(i,(({i:o})=>{r=t.element(o),p.assign(positionView.dot(r.xyz).negate().add(r.w)),s.assign(p.fwidth().div(2)),n.mulAssign(smoothstep(s.negate(),s,p)),n.equal(0).discard()})),i<e){const o=property("float","unionclipOpacity");o.assign(1),Loop({start:i,end:e},(({i:e})=>{r=t.element(e),p.assign(positionView.dot(r.xyz).negate().add(r.w)),s.assign(p.fwidth().div(2)),o.mulAssign(smoothstep(s.negate(),s,p).oneMinus())})),n.mulAssign(o.oneMinus())}diffuseColor.a.mulAssign(n),diffuseColor.a.equal(0).discard()}))()}setupDefault(o,e,i){return Fn((()=>{const t=uniformArray(o);let p;if(Loop(i,(({i:o})=>{p=t.element(o),positionView.dot(p.xyz).greaterThan(p.w).discard()})),i<e){const o=property("bool","clipped");o.assign(!0),Loop({start:i,end:e},(({i:e})=>{p=t.element(e),o.assign(positionView.dot(p.xyz).greaterThan(p.w).and(o))})),o.discard()}}))()}}ClippingNode.ALPHA_TO_COVERAGE="alphaToCoverage",ClippingNode.DEFAULT="default";export default ClippingNode;export const clipping=()=>nodeObject(new ClippingNode);export const clippingAlpha=()=>nodeObject(new ClippingNode(ClippingNode.ALPHA_TO_COVERAGE));
//# sourceMappingURL=/sm/f1a42f451ae81b8d7054631c1eec8e8e4d661c94e620a1dcdc35e1a4bf121182.map
/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/nodes/accessors/InstanceNode.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Node from"../core/Node.js";import{varyingProperty}from"../core/PropertyNode.js";import{instancedBufferAttribute,instancedDynamicBufferAttribute}from"./BufferAttributeNode.js";import{normalLocal,transformNormal}from"./Normal.js";import{positionLocal}from"./Position.js";import{nodeProxy,vec3,mat4}from"../tsl/TSLBase.js";import{NodeUpdateType}from"../core/constants.js";import{buffer}from"../accessors/BufferNode.js";import{instanceIndex}from"../core/IndexNode.js";import{InstancedInterleavedBuffer}from"../../core/InstancedInterleavedBuffer.js";import{InstancedBufferAttribute}from"../../core/InstancedBufferAttribute.js";import{DynamicDrawUsage}from"../../constants.js";class InstanceNode extends Node{static get type(){return"InstanceNode"}constructor(e){super("void"),this.instanceMesh=e,this.instanceMatrixNode=null,this.instanceColorNode=null,this.updateType=NodeUpdateType.FRAME,this.buffer=null,this.bufferColor=null}setup(e){let t=this.instanceMatrixNode,n=this.instanceColorNode;const s=this.instanceMesh;if(null===t){const e=s.instanceMatrix;if(s.count<=1e3)t=buffer(e.array,"mat4",Math.max(s.count,1)).element(instanceIndex);else{const n=new InstancedInterleavedBuffer(e.array,16,1);this.buffer=n;const s=e.usage===DynamicDrawUsage?instancedDynamicBufferAttribute:instancedBufferAttribute,r=[s(n,"vec4",16,0),s(n,"vec4",16,4),s(n,"vec4",16,8),s(n,"vec4",16,12)];t=mat4(...r)}this.instanceMatrixNode=t}const r=s.instanceColor;if(r&&null===n){const e=new InstancedBufferAttribute(r.array,3),t=r.usage===DynamicDrawUsage?instancedDynamicBufferAttribute:instancedBufferAttribute;this.bufferColor=e,n=vec3(t(e,"vec3",3,0)),this.instanceColorNode=n}const o=t.mul(positionLocal).xyz;if(positionLocal.assign(o),e.hasGeometryAttribute("normal")){const e=transformNormal(normalLocal,t);normalLocal.assign(e)}null!==this.instanceColorNode&&varyingProperty("vec3","vInstanceColor").assign(this.instanceColorNode)}update(){this.instanceMesh.instanceMatrix.usage!==DynamicDrawUsage&&null!=this.buffer&&this.instanceMesh.instanceMatrix.version!==this.buffer.version&&(this.buffer.version=this.instanceMesh.instanceMatrix.version),this.instanceMesh.instanceColor&&this.instanceMesh.instanceColor.usage!==DynamicDrawUsage&&null!=this.bufferColor&&this.instanceMesh.instanceColor.version!==this.bufferColor.version&&(this.bufferColor.version=this.instanceMesh.instanceColor.version)}}export default InstanceNode;export const instance=nodeProxy(InstanceNode);
//# sourceMappingURL=/sm/24ef57bb2ce8f59d837fb36ebe4dffffba197c9457c0e2760f9b61cf4dff9e3a.map
/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/nodes/gpgpu/AtomicFunctionNode.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import TempNode from"../core/TempNode.js";import{nodeProxy}from"../tsl/TSLCore.js";class AtomicFunctionNode extends TempNode{static get type(){return"AtomicFunctionNode"}constructor(o,t,i,e=null){super("uint"),this.method=o,this.pointerNode=t,this.valueNode=i,this.storeNode=e}getInputType(o){return this.pointerNode.getNodeType(o)}getNodeType(o){return this.getInputType(o)}generate(o){const t=this.method,i=this.getNodeType(o),e=this.getInputType(o),n=this.pointerNode,c=this.valueNode,d=[];d.push(`&${n.build(o,e)}`),d.push(c.build(o,e));const u=`${o.getMethod(t,i)}( ${d.join(", ")} )`;if(null!==this.storeNode){const t=this.storeNode.build(o,e);o.addLineFlowCode(`${t} = ${u}`,this)}else o.addLineFlowCode(u,this)}}AtomicFunctionNode.ATOMIC_LOAD="atomicLoad",AtomicFunctionNode.ATOMIC_STORE="atomicStore",AtomicFunctionNode.ATOMIC_ADD="atomicAdd",AtomicFunctionNode.ATOMIC_SUB="atomicSub",AtomicFunctionNode.ATOMIC_MAX="atomicMax",AtomicFunctionNode.ATOMIC_MIN="atomicMin",AtomicFunctionNode.ATOMIC_AND="atomicAnd",AtomicFunctionNode.ATOMIC_OR="atomicOr",AtomicFunctionNode.ATOMIC_XOR="atomicXor";export default AtomicFunctionNode;const atomicNode=nodeProxy(AtomicFunctionNode);export const atomicFunc=(o,t,i,e)=>{const n=atomicNode(o,t,i,e);return n.append(),n};export const atomicStore=(o,t,i=null)=>atomicFunc(AtomicFunctionNode.ATOMIC_STORE,o,t,i);export const atomicAdd=(o,t,i=null)=>atomicFunc(AtomicFunctionNode.ATOMIC_ADD,o,t,i);export const atomicSub=(o,t,i=null)=>atomicFunc(AtomicFunctionNode.ATOMIC_SUB,o,t,i);export const atomicMax=(o,t,i=null)=>atomicFunc(AtomicFunctionNode.ATOMIC_MAX,o,t,i);export const atomicMin=(o,t,i=null)=>atomicFunc(AtomicFunctionNode.ATOMIC_MIN,o,t,i);export const atomicAnd=(o,t,i=null)=>atomicFunc(AtomicFunctionNode.ATOMIC_AND,o,t,i);export const atomicOr=(o,t,i=null)=>atomicFunc(AtomicFunctionNode.ATOMIC_OR,o,t,i);export const atomicXor=(o,t,i=null)=>atomicFunc(AtomicFunctionNode.ATOMIC_XOR,o,t,i);
//# sourceMappingURL=/sm/9264aabec50ff9ca61b34a914c48fc7ad621ffd7dc8ad190894df0a30f9915e0.map
/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.169.0/src/nodes/display/GTAONode.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import TempNode from"../core/TempNode.js";import{texture}from"../accessors/TextureNode.js";import{textureSize}from"../accessors/TextureSizeNode.js";import{uv}from"../accessors/UV.js";import{nodeObject,Fn,mat3,vec2,vec3,vec4,float,int,If}from"../tsl/TSLBase.js";import{NodeUpdateType}from"../core/constants.js";import{uniform}from"../core/UniformNode.js";import{DataTexture}from"../../textures/DataTexture.js";import{Vector2}from"../../math/Vector2.js";import{Vector3}from"../../math/Vector3.js";import{PI,cos,sin,pow,clamp,abs,max,mix,sqrt,acos,dot,normalize,cross}from"../math/MathNode.js";import{div,mul,add,sub}from"../math/OperatorNode.js";import{Loop}from"../utils/LoopNode.js";import{passTexture}from"./PassNode.js";import{RepeatWrapping}from"../../constants.js";import QuadMesh from"../../renderers/common/QuadMesh.js";import NodeMaterial from"../../materials/nodes/NodeMaterial.js";import{RenderTarget}from"../../core/RenderTarget.js";import{Color}from"../../math/Color.js";const _quadMesh=new QuadMesh,_currentClearColor=new Color,_size=new Vector2;class GTAONode extends TempNode{static get type(){return"GTAONode"}constructor(e,t,o){super(),this.depthNode=e,this.normalNode=t,this.radius=uniform(.25),this.resolution=uniform(new Vector2),this.thickness=uniform(1),this.distanceExponent=uniform(1),this.distanceFallOff=uniform(1),this.scale=uniform(1),this.noiseNode=texture(generateMagicSquareNoise()),this.cameraProjectionMatrix=uniform(o.projectionMatrix),this.cameraProjectionMatrixInverse=uniform(o.projectionMatrixInverse),this.SAMPLES=uniform(16),this._aoRenderTarget=new RenderTarget,this._aoRenderTarget.texture.name="GTAONode.AO",this._material=null,this._textureNode=passTexture(this,this._aoRenderTarget.texture),this.updateBeforeType=NodeUpdateType.FRAME}getTextureNode(){return this._textureNode}setSize(e,t){this.resolution.value.set(e,t),this._aoRenderTarget.setSize(e,t)}updateBefore(e){const{renderer:t}=e,o=t.getDrawingBufferSize(_size),r=t.getRenderTarget(),s=t.getMRT();t.getClearColor(_currentClearColor);const a=t.getClearAlpha();_quadMesh.material=this._material,this.setSize(o.width,o.height),t.setMRT(null),t.setClearColor(16777215,1),t.setRenderTarget(this._aoRenderTarget),_quadMesh.render(t),t.setRenderTarget(r),t.setMRT(s),t.setClearColor(_currentClearColor,a)}setup(e){const t=uv(),o=e=>this.depthNode.uv(e).x,r=e=>this.noiseNode.uv(e),s=Fn((([e])=>{const t=this.cameraProjectionMatrix.mul(vec4(e,1));let r=t.xy.div(t.w).mul(.5).add(.5).toVar();r=vec2(r.x,r.y.oneMinus());const s=o(r);return vec3(r,s)})),a=Fn((([e,t])=>{e=vec2(e.x,e.y.oneMinus()).mul(2).sub(1);const o=vec4(vec3(e,t),1),r=vec4(this.cameraProjectionMatrixInverse.mul(o));return r.xyz.div(r.w)})),i=Fn((()=>{const e=o(t);e.greaterThanEqual(1).discard();const i=a(t,e),n=this.normalNode.rgb.normalize(),d=this.radius,m=textureSize(this.noiseNode,0);let l=vec2(t.x,t.y.oneMinus());l=l.mul(this.resolution.div(m));const u=r(l),c=u.xyz.mul(2).sub(1),h=vec3(c.xy,0).normalize(),p=vec3(h.y.mul(-1),h.x,0),f=mat3(h,p,vec3(0,0,1)),x=this.SAMPLES.lessThan(30).select(3,5),g=add(this.SAMPLES,x.sub(1)).div(x),T=float(0).toVar();return Loop({start:int(0),end:x,type:"int",condition:"<"},(({i:e})=>{const t=float(e).div(float(x)).mul(PI),o=vec4(cos(t),sin(t),0,add(.5,mul(.5,u.w)));o.xyz=normalize(f.mul(o.xyz));const r=normalize(i.xyz.negate()),m=normalize(cross(o.xyz,r)),l=cross(m,r),c=normalize(n.sub(m.mul(dot(n,m)))),h=cross(c,m),p=vec2(dot(r,h),dot(r,h.negate())).toVar();Loop({end:g,type:"int",name:"j",condition:"<"},(({j:e})=>{const t=o.xyz.mul(d).mul(o.w).mul(pow(div(float(e).add(1),float(g)),this.distanceExponent)),n=s(i.add(t)),m=a(n.xy,n.z).sub(i);If(abs(m.z).lessThan(this.thickness),(()=>{const t=dot(r,normalize(m));p.x.addAssign(max(0,mul(t.sub(p.x),mix(1,float(2).div(float(e).add(2)),this.distanceFallOff))))}));const l=s(i.sub(t)),u=a(l.xy,l.z).sub(i);If(abs(u.z).lessThan(this.thickness),(()=>{const t=dot(r,normalize(u));p.y.addAssign(max(0,mul(t.sub(p.y),mix(1,float(2).div(float(e).add(2)),this.distanceFallOff))))}))}));const M=sqrt(sub(1,p.mul(p))),v=dot(c,l),N=dot(c,r),j=mul(.5,acos(p.y).sub(acos(p.x)).add(M.x.mul(p.x).sub(M.y.mul(p.y)))),y=mul(.5,sub(2,p.x.mul(p.x)).sub(p.y.mul(p.y))),z=v.mul(j).add(N.mul(y));T.addAssign(z)})),T.assign(clamp(T.div(x),0,1)),T.assign(pow(T,this.scale)),vec4(vec3(T),1)})),n=this._material||(this._material=new NodeMaterial);return n.fragmentNode=i().context(e.getSharedContext()),n.name="GTAO",n.needsUpdate=!0,this._textureNode}dispose(){this._aoRenderTarget.dispose()}}export default GTAONode;function generateMagicSquareNoise(e=5){const t=Math.floor(e)%2==0?Math.floor(e)+1:Math.floor(e),o=generateMagicSquare(t),r=o.length,s=new Uint8Array(4*r);for(let e=0;e<r;++e){const t=o[e],a=2*Math.PI*t/r,i=new Vector3(Math.cos(a),Math.sin(a),0).normalize();s[4*e]=255*(.5*i.x+.5),s[4*e+1]=255*(.5*i.y+.5),s[4*e+2]=127,s[4*e+3]=255}const a=new DataTexture(s,t,t);return a.wrapS=RepeatWrapping,a.wrapT=RepeatWrapping,a.needsUpdate=!0,a}function generateMagicSquare(e){const t=Math.floor(e)%2==0?Math.floor(e)+1:Math.floor(e),o=t*t,r=Array(o).fill(0);let s=Math.floor(t/2),a=t-1;for(let e=1;e<=o;)-1===s&&a===t?(a=t-2,s=0):(a===t&&(a=0),s<0&&(s=t-1)),0===r[s*t+a]?(r[s*t+a]=e++,a++,s--):(a-=2,s++);return r}export const ao=(e,t,o)=>nodeObject(new GTAONode(nodeObject(e),nodeObject(t),o));
//# sourceMappingURL=/sm/1ead2a354c86291f3d7f53f92dcee91682574b9e22ca2dc73d5189cb24fd5ffe.map
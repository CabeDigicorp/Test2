/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/nodes/display/ViewportDepthNode.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Node from"../core/Node.js";import{log2,nodeImmutable,nodeProxy}from"../tsl/TSLBase.js";import{cameraNear,cameraFar}from"../accessors/Camera.js";import{positionView}from"../accessors/Position.js";import{viewportDepthTexture}from"./ViewportDepthTextureNode.js";class ViewportDepthNode extends Node{static get type(){return"ViewportDepthNode"}constructor(e,t=null){super("float"),this.scope=e,this.valueNode=t,this.isViewportDepthNode=!0}generate(e){const{scope:t}=this;return t===ViewportDepthNode.DEPTH_BASE?e.getFragDepth():super.generate(e)}setup({camera:e}){const{scope:t}=this,o=this.valueNode;let r=null;if(t===ViewportDepthNode.DEPTH_BASE)null!==o&&(r=depthBase().assign(o));else if(t===ViewportDepthNode.DEPTH)r=e.isPerspectiveCamera?viewZToPerspectiveDepth(positionView.z,cameraNear,cameraFar):viewZToOrthographicDepth(positionView.z,cameraNear,cameraFar);else if(t===ViewportDepthNode.LINEAR_DEPTH)if(null!==o)if(e.isPerspectiveCamera){const e=perspectiveDepthToViewZ(o,cameraNear,cameraFar);r=viewZToOrthographicDepth(e,cameraNear,cameraFar)}else r=o;else r=viewZToOrthographicDepth(positionView.z,cameraNear,cameraFar);return r}}ViewportDepthNode.DEPTH_BASE="depthBase",ViewportDepthNode.DEPTH="depth",ViewportDepthNode.LINEAR_DEPTH="linearDepth";export default ViewportDepthNode;export const viewZToOrthographicDepth=(e,t,o)=>e.add(t).div(t.sub(o));export const orthographicDepthToViewZ=(e,t,o)=>t.sub(o).mul(e).sub(t);export const viewZToPerspectiveDepth=(e,t,o)=>t.add(e).mul(o).div(o.sub(t).mul(e));export const perspectiveDepthToViewZ=(e,t,o)=>t.mul(o).div(o.sub(t).mul(e).sub(o));export const perspectiveDepthToLogarithmicDepth=(e,t,o)=>{t=t.max(1e-6).toVar();const r=log2(e.div(t).add(1)),p=log2(o.div(t).add(1));return r.div(p)};const depthBase=nodeProxy(ViewportDepthNode,ViewportDepthNode.DEPTH_BASE);export const depth=nodeImmutable(ViewportDepthNode,ViewportDepthNode.DEPTH);export const linearDepth=nodeProxy(ViewportDepthNode,ViewportDepthNode.LINEAR_DEPTH);export const viewportLinearDepth=linearDepth(viewportDepthTexture());depth.assign=e=>depthBase(e);
//# sourceMappingURL=/sm/0a87dccce0403870cadd4e1ba29dfe05a95253cfc1a90c002bfb0298892c601a.map
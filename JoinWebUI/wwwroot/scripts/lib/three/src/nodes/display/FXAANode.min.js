/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.169.0/src/nodes/display/FXAANode.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import TempNode from"../core/TempNode.js";import{uv}from"../accessors/UV.js";import{Fn,nodeObject,float,vec2,vec4,int,If}from"../tsl/TSLBase.js";import{NodeUpdateType}from"../core/constants.js";import{uniform}from"../core/UniformNode.js";import{abs,max,min,mix,pow}from"../math/MathNode.js";import{sub}from"../math/OperatorNode.js";import{Loop,Break}from"../utils/LoopNode.js";import{convertToTexture}from"../utils/RTTNode.js";import{Vector2}from"../../math/Vector2.js";class FXAANode extends TempNode{static get type(){return"FXAANode"}constructor(a){super(),this.textureNode=a,this.updateBeforeType=NodeUpdateType.RENDER,this._invSize=uniform(new Vector2)}updateBefore(){const a=this.textureNode.value;this._invSize.value.set(1/a.image.width,1/a.image.height)}setup(){const a=this.textureNode.bias(-100),t=a.uvNode||uv(),e=t=>a.uv(t),o=(t,e,o)=>a.uv(t.add(e.mul(o))),s=int(5),r=Fn((([a,t])=>{const e=vec4(t).toVar(),o=vec4(a).toVar(),s=vec4(abs(o.sub(e))).toVar();return max(max(max(s.r,s.g),s.b),s.a)})),n=Fn((([a,t,n,i])=>{const u=e(a).toVar(),d=o(a,vec2(0,-1),t.xy).toVar(),m=o(a,vec2(1,0),t.xy).toVar(),c=o(a,vec2(0,1),t.xy).toVar(),l=o(a,vec2(-1,0),t.xy).toVar(),f=r(u,c).toVar(),V=r(u,d).toVar(),p=r(u,m).toVar(),x=r(u,l).toVar(),g=max(f,max(V,max(p,x))).toVar();If(g.lessThan(n),(()=>u));const v=sub(f.add(V),p.add(x)).toVar();v.mulAssign(i),If(abs(v).lessThan(.3),(()=>{const e=p.greaterThan(x).select(1,-1).toVar(),s=V.greaterThan(f).select(1,-1).toVar(),n=vec2(e,s).toVar(),g=o(a,vec2(n.x,n.y),t.xy),h=r(u,g).toVar(),y=o(a,vec2(n.x.negate(),n.y.negate()),t.xy),T=r(u,y).toVar();v.assign(T.sub(h)),v.mulAssign(i),If(abs(v).lessThan(.3),(()=>{const a=c.add(d).add(m).add(l);return mix(u,a.mul(.25),.4)}))}));const h=vec2().toVar();If(v.lessThanEqual(0),(()=>{c.assign(l),d.assign(m),h.x.assign(0),h.y.assign(t.y)})).Else((()=>{h.x.assign(t.x),h.y.assign(0)}));const y=r(u,c).toVar(),T=r(u,d).toVar();If(y.lessThanEqual(T),(()=>{c.assign(d)}));const N=int(0).toVar(),b=int(0).toVar(),I=float(0).toVar(),j=float(0).toVar(),A=vec2(a).toVar(),q=vec2(a).toVar(),F=int(0).toVar(),E=int(0).toVar();Loop(s,(({i:t})=>{const o=t.add(1).toVar();If(N.equal(0),(()=>{I.addAssign(o),A.assign(a.add(h.mul(I)));const s=e(A.xy),n=r(s,u).toVar(),i=r(s,c).toVar();If(n.greaterThan(i),(()=>{N.assign(1)})),F.assign(t)})),If(b.equal(0),(()=>{j.addAssign(o),q.assign(a.sub(h.mul(j)));const s=e(q.xy),n=r(s,u).toVar(),i=r(s,c).toVar();If(n.greaterThan(i),(()=>{b.assign(1)})),E.assign(t)})),If(N.equal(1).or(b.equal(1)),(()=>{Break()}))})),If(N.equal(0).and(b.equal(0)),(()=>u));const w=float(1).toVar(),B=float(1).toVar();If(N.equal(1),(()=>{w.assign(float(F).div(float(s.sub(1))))})),If(b.equal(1),(()=>{B.assign(float(E).div(float(s.sub(1))))}));const L=min(w,B);return L.assign(pow(L,.5)),L.assign(float(1).sub(L)),mix(u,c,L.mul(.5))})).setLayout({name:"FxaaPixelShader",type:"vec4",inputs:[{name:"uv",type:"vec2"},{name:"fxaaQualityRcpFrame",type:"vec2"},{name:"fxaaQualityEdgeThreshold",type:"float"},{name:"fxaaQualityinvEdgeThreshold",type:"float"}]});return Fn((()=>{const a=float(.2),e=float(1).div(a);return n(t,this._invSize,a,e)}))()}}export default FXAANode;export const fxaa=a=>nodeObject(new FXAANode(convertToTexture(a)));
//# sourceMappingURL=/sm/5b28d500f3d90698b86cdecbfc423ed938b9e389aafaab0601030811389e6918.map
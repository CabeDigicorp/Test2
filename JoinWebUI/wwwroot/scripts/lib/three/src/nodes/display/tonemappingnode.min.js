/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/nodes/display/ToneMappingNode.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import TempNode from"../core/TempNode.js";import{addMethodChaining,nodeObject,vec4}from"../tsl/TSLCore.js";import{rendererReference}from"../accessors/RendererReferenceNode.js";import{NoToneMapping}from"../../constants.js";import{hash}from"../core/NodeUtils.js";class ToneMappingNode extends TempNode{static get type(){return"ToneMappingNode"}constructor(e,o=toneMappingExposure,n=null){super("vec3"),this.toneMapping=e,this.exposureNode=o,this.colorNode=n}getCacheKey(){return hash(super.getCacheKey(),this.toneMapping)}setup(e){const o=this.colorNode||e.context.color,n=this.toneMapping;if(n===NoToneMapping)return o;let t=null;const r=e.renderer.library.getToneMappingFunction(n);return null!==r?t=vec4(r(o.rgb,this.exposureNode),o.a):(console.error("ToneMappingNode: Unsupported Tone Mapping configuration.",n),t=o),t}}export default ToneMappingNode;export const toneMapping=(e,o,n)=>nodeObject(new ToneMappingNode(e,nodeObject(o),nodeObject(n)));export const toneMappingExposure=rendererReference("toneMappingExposure","float");addMethodChaining("toneMapping",((e,o,n)=>toneMapping(o,n,e)));
//# sourceMappingURL=/sm/aafef7a5849b059051590017952fac3596bdd2da0a5821dd592ac2f16818fa5b.map
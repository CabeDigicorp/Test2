/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.169.0/src/nodes/display/SSAAPassNode.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{nodeObject}from"../tsl/TSLBase.js";import PassNode from"./PassNode.js";import{Color}from"../../math/Color.js";import{Vector2}from"../../math/Vector2.js";import{AdditiveBlending}from"../../constants.js";import{uniform}from"../core/UniformNode.js";import QuadMesh from"../../renderers/common/QuadMesh.js";import{texture}from"../accessors/TextureNode.js";import{mrt,getTextureIndex}from"../core/MRTNode.js";import NodeMaterial from"../../materials/nodes/NodeMaterial.js";const _size=new Vector2;class SSAAPassNode extends PassNode{static get type(){return"SSAAPassNode"}constructor(e,t){super(PassNode.COLOR,e,t),this.isSSAAPassNode=!0,this.sampleLevel=4,this.unbiased=!0,this.clearColor=new Color(0),this.clearAlpha=0,this._currentClearColor=new Color,this.sampleWeight=uniform(1),this.sampleRenderTarget=null,this._quadMesh=new QuadMesh}updateBefore(e){const{renderer:t}=e,{scene:s,camera:r}=this;this._pixelRatio=t.getPixelRatio();const a=t.getSize(_size);this.setSize(a.width,a.height),this.sampleRenderTarget.setSize(this.renderTarget.width,this.renderTarget.height),t.getClearColor(this._currentClearColor);const i=t.getClearAlpha(),o=t.getRenderTarget(),h=t.getMRT(),l=t.autoClear;this._cameraNear.value=r.near,this._cameraFar.value=r.far,t.setMRT(this.getMRT()),t.autoClear=!1;const d=_JitterVectors[Math.max(0,Math.min(this.sampleLevel,5))],n=1/d.length,m={fullWidth:this.renderTarget.width,fullHeight:this.renderTarget.height,offsetX:0,offsetY:0,width:this.renderTarget.width,height:this.renderTarget.height},u=Object.assign({},r.view);u.enabled&&Object.assign(m,u);for(let e=0;e<d.length;e++){const a=d[e];if(r.setViewOffset&&r.setViewOffset(m.fullWidth,m.fullHeight,m.offsetX+.0625*a[0],m.offsetY+.0625*a[1],m.width,m.height),this.sampleWeight.value=n,this.unbiased){const t=(e+.5)/d.length-.5;this.sampleWeight.value+=.03125*t}t.setClearColor(this.clearColor,this.clearAlpha),t.setRenderTarget(this.sampleRenderTarget),t.clear(),t.render(s,r),t.setRenderTarget(this.renderTarget),0===e&&(t.setClearColor(0,0),t.clear()),this._quadMesh.render(t)}t.copyTextureToTexture(this.sampleRenderTarget.depthTexture,this.renderTarget.depthTexture),r.setViewOffset&&u.enabled?r.setViewOffset(u.fullWidth,u.fullHeight,u.offsetX,u.offsetY,u.width,u.height):r.clearViewOffset&&r.clearViewOffset(),t.setRenderTarget(o),t.setMRT(h),t.autoClear=l,t.setClearColor(this._currentClearColor,i)}setup(e){let t;null===this.sampleRenderTarget&&(this.sampleRenderTarget=this.renderTarget.clone());const s=this.getMRT();if(null!==s){const e={};for(const t in s.outputNodes){const s=getTextureIndex(this.sampleRenderTarget.textures,t);s>=0&&(e[t]=texture(this.sampleRenderTarget.textures[s]).mul(this.sampleWeight))}t=mrt(e)}else t=texture(this.sampleRenderTarget.texture).mul(this.sampleWeight);return this._quadMesh.material=new NodeMaterial,this._quadMesh.material.fragmentNode=t,this._quadMesh.material.transparent=!0,this._quadMesh.material.depthTest=!1,this._quadMesh.material.depthWrite=!1,this._quadMesh.material.premultipliedAlpha=!0,this._quadMesh.material.blending=AdditiveBlending,this._quadMesh.material.normals=!1,this._quadMesh.material.name="SSAA",super.setup(e)}dispose(){super.dispose(),null!==this.sampleRenderTarget&&this.sampleRenderTarget.dispose()}}export default SSAAPassNode;const _JitterVectors=[[[0,0]],[[4,4],[-4,-4]],[[-2,-6],[6,-2],[-6,2],[2,6]],[[1,-3],[-1,3],[5,1],[-3,-5],[-5,5],[-7,-1],[3,7],[7,-7]],[[1,1],[-1,-3],[-3,2],[4,-1],[-5,-2],[2,5],[5,3],[3,-5],[-2,6],[0,-7],[-4,-6],[-6,4],[-8,0],[7,-4],[6,7],[-7,-8]],[[-4,-7],[-7,-5],[-3,-5],[-5,-4],[-1,-4],[-2,-2],[-6,-1],[-4,0],[-7,1],[-1,2],[-6,3],[-3,3],[-7,6],[-3,6],[-5,7],[-1,7],[5,-7],[1,-6],[6,-5],[4,-4],[2,-3],[7,-2],[1,-1],[4,-1],[2,1],[6,2],[0,4],[4,4],[2,5],[7,5],[5,6],[3,7]]];export const ssaaPass=(e,t)=>nodeObject(new SSAAPassNode(e,t));
//# sourceMappingURL=/sm/483b28d20df00a99e8cdce1c94ebdad9e808660ed7cbd611c84009222f4382be.map
/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/nodes/display/ViewportTextureNode.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import TextureNode from"../accessors/TextureNode.js";import{NodeUpdateType}from"../core/constants.js";import{nodeProxy}from"../tsl/TSLBase.js";import{screenUV}from"./ScreenNode.js";import{Vector2}from"../../math/Vector2.js";import{FramebufferTexture}from"../../textures/FramebufferTexture.js";import{LinearMipmapLinearFilter}from"../../constants.js";const _size=new Vector2;class ViewportTextureNode extends TextureNode{static get type(){return"ViewportTextureNode"}constructor(e=screenUV,t=null,r=null){null===r&&((r=new FramebufferTexture).minFilter=LinearMipmapLinearFilter),super(r,e,t),this.generateMipmaps=!1,this.isOutputTextureNode=!0,this.updateBeforeType=NodeUpdateType.FRAME}updateBefore(e){const t=e.renderer;t.getDrawingBufferSize(_size);const r=this.value;r.image.width===_size.width&&r.image.height===_size.height||(r.image.width=_size.width,r.image.height=_size.height,r.needsUpdate=!0);const o=r.generateMipmaps;r.generateMipmaps=this.generateMipmaps,t.copyFramebufferToTexture(r),r.generateMipmaps=o}clone(){const e=new this.constructor(this.uvNode,this.levelNode,this.value);return e.generateMipmaps=this.generateMipmaps,e}}export default ViewportTextureNode;export const viewportTexture=nodeProxy(ViewportTextureNode);export const viewportMipTexture=nodeProxy(ViewportTextureNode,null,null,{generateMipmaps:!0});
//# sourceMappingURL=/sm/784e7a7b5a12d9ab4a2c1a4ee2926291585ca86104d9cc861c4b4759aa1ee9df.map
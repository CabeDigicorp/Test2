/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/nodes/functions/material/getAlphaHashThreshold.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{abs,add,ceil,clamp,dFdx,dFdy,exp2,float,floor,Fn,fract,length,log2,max,min,mul,sin,sub,vec2,vec3}from"../../tsl/TSLBase.js";const ALPHA_HASH_SCALE=.05,hash2D=Fn((([l])=>fract(mul(1e4,sin(mul(17,l.x).add(mul(.1,l.y)))).mul(add(.1,abs(sin(mul(13,l.y).add(l.x)))))))),hash3D=Fn((([l])=>hash2D(vec2(hash2D(l.xy),l.z)))),getAlphaHashThreshold=Fn((([l])=>{const a=max(length(dFdx(l.xyz)),length(dFdy(l.xyz))).toVar("maxDeriv"),s=float(1).div(float(.05).mul(a)).toVar("pixScale"),e=vec2(exp2(floor(log2(s))),exp2(ceil(log2(s)))).toVar("pixScales"),o=vec2(hash3D(floor(e.x.mul(l.xyz))),hash3D(floor(e.y.mul(l.xyz)))).toVar("alpha"),u=fract(log2(s)).toVar("lerpFactor"),t=add(mul(u.oneMinus(),o.x),mul(u,o.y)).toVar("x"),m=min(u,u.oneMinus()).toVar("a"),h=vec3(t.mul(t).div(mul(2,m).mul(sub(1,m))),t.sub(mul(.5,m)).div(sub(1,m)),sub(1,sub(1,t).mul(sub(1,t)).div(mul(2,m).mul(sub(1,m))))).toVar("cases"),d=t.lessThan(m.oneMinus()).select(t.lessThan(m).select(h.x,h.y),h.z);return clamp(d,1e-6,1)}));export default getAlphaHashThreshold;
//# sourceMappingURL=/sm/61177166d42d7ebe97ba5175b142dde3cce68ea5aabfd45e9a9be102122c0952.map
/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/nodes/functions/BasicLightingModel.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import LightingModel from"../core/LightingModel.js";import{diffuseColor}from"../core/PropertyNode.js";import{MultiplyOperation,MixOperation,AddOperation}from"../../constants.js";import{materialSpecularStrength,materialReflectivity}from"../accessors/MaterialNode.js";import{mix}from"../math/MathNode.js";import{vec4}from"../tsl/TSLBase.js";class BasicLightingModel extends LightingModel{constructor(){super()}indirect(i,e,t){const r=i.ambientOcclusion,a=i.reflectedLight,s=t.context.irradianceLightMap;a.indirectDiffuse.assign(vec4(0)),s?a.indirectDiffuse.addAssign(s):a.indirectDiffuse.addAssign(vec4(1,1,1,0)),a.indirectDiffuse.mulAssign(r),a.indirectDiffuse.mulAssign(diffuseColor.rgb)}finish(i,e,t){const r=t.material,a=i.outgoingLight,s=t.context.environment;if(s)switch(r.combine){case MultiplyOperation:a.rgb.assign(mix(a.rgb,a.rgb.mul(s.rgb),materialSpecularStrength.mul(materialReflectivity)));break;case MixOperation:a.rgb.assign(mix(a.rgb,s.rgb,materialSpecularStrength.mul(materialReflectivity)));break;case AddOperation:a.rgb.addAssign(s.rgb.mul(materialSpecularStrength.mul(materialReflectivity)));break;default:console.warn("THREE.BasicLightingModel: Unsupported .combine value:",r.combine)}}}export default BasicLightingModel;
//# sourceMappingURL=/sm/2db43240aa5d9bba14f785d842b580ed4a42478edef91ed6fcbce4d6a5378152.map
/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/nodes/functions/ToonLightingModel.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import LightingModel from"../core/LightingModel.js";import BRDF_Lambert from"./BSDF/BRDF_Lambert.js";import{diffuseColor}from"../core/PropertyNode.js";import{normalGeometry}from"../accessors/Normal.js";import{Fn,float,vec2,vec3}from"../tsl/TSLBase.js";import{mix,smoothstep}from"../math/MathNode.js";import{materialReference}from"../accessors/MaterialReferenceNode.js";const getGradientIrradiance=Fn((({normal:e,lightDirection:r,builder:t})=>{const o=e.dot(r),i=vec2(o.mul(.5).add(.5),0);if(t.material.gradientMap){const e=materialReference("gradientMap","texture").context({getUV:()=>i});return vec3(e.r)}{const e=i.fwidth().mul(.5);return mix(vec3(.7),vec3(1),smoothstep(float(.7).sub(e.x),float(.7).add(e.x),i.x))}}));class ToonLightingModel extends LightingModel{direct({lightDirection:e,lightColor:r,reflectedLight:t},o,i){const a=getGradientIrradiance({normal:normalGeometry,lightDirection:e,builder:i}).mul(r);t.directDiffuse.addAssign(a.mul(BRDF_Lambert({diffuseColor:diffuseColor.rgb})))}indirect({ambientOcclusion:e,irradiance:r,reflectedLight:t}){t.indirectDiffuse.addAssign(r.mul(BRDF_Lambert({diffuseColor:diffuseColor}))),t.indirectDiffuse.mulAssign(e)}}export default ToonLightingModel;
//# sourceMappingURL=/sm/2f11cdd85833e390c411c12db1ddf43a954aeb22f7d1c4cdfe6c5b3ebf983095.map
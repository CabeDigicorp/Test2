/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/nodes/lighting/AnalyticLightNode.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import LightingNode from"./LightingNode.js";import{NodeUpdateType}from"../core/constants.js";import{uniform}from"../core/UniformNode.js";import{Color}from"../../math/Color.js";import{renderGroup}from"../core/UniformGroupNode.js";import{hash}from"../core/NodeUtils.js";import{shadow}from"./ShadowNode.js";import{nodeObject}from"../tsl/TSLCore.js";class AnalyticLightNode extends LightingNode{static get type(){return"AnalyticLightNode"}constructor(o=null){super(),this.updateType=NodeUpdateType.FRAME,this.light=o,this.color=new Color,this.colorNode=uniform(this.color).setGroup(renderGroup),this.baseColorNode=null,this.shadowNode=null,this.shadowColorNode=null,this.isAnalyticLightNode=!0}getCacheKey(){return hash(super.getCacheKey(),this.light.id,this.light.castShadow?1:0)}getHash(){return this.light.uuid}setupShadow(o){const{renderer:t}=o;if(!1===t.shadowMap.enabled)return;let e=this.shadowColorNode;if(null===e){const o=this.light.shadow.shadowNode;let t;t=void 0!==o?nodeObject(o):shadow(this.light),this.shadowNode=t,this.shadowColorNode=e=this.colorNode.mul(t),this.baseColorNode=this.colorNode}this.colorNode=e}setup(o){this.colorNode=this.baseColorNode||this.colorNode,this.light.castShadow?o.object.receiveShadow&&this.setupShadow(o):null!==this.shadowNode&&this.shadowNode.dispose()}update(){const{light:o}=this;this.color.copy(o.color).multiplyScalar(o.intensity)}}export default AnalyticLightNode;
//# sourceMappingURL=/sm/9b5d0cc3e27b71f3b0ebd5c83a9b0241183593aabfa86e0c6fdf36b71cc48f58.map
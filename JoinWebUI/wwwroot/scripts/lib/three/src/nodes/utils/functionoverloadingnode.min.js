/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/nodes/utils/FunctionOverloadingNode.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import Node from"../core/Node.js";import{nodeProxy}from"../tsl/TSLBase.js";class FunctionOverloadingNode extends Node{static get type(){return"FunctionOverloadingNode"}constructor(e=[],...o){super(),this.functionNodes=e,this.parametersNodes=o,this._candidateFnCall=null,this.global=!0}getNodeType(){return this.functionNodes[0].shaderNode.layout.type}setup(e){const o=this.parametersNodes;let t=this._candidateFnCall;if(null===t){let n=null,s=-1;for(const t of this.functionNodes){const d=t.shaderNode.layout;if(null===d)throw new Error("FunctionOverloadingNode: FunctionNode must be a layout.");const r=d.inputs;if(o.length===r.length){let d=0;for(let t=0;t<o.length;t++){const n=o[t],s=r[t];n.getNodeType(e)===s.type?d++:d=0}d>s&&(n=t,s=d)}}this._candidateFnCall=t=n(...o)}return t}}export default FunctionOverloadingNode;const overloadingBaseFn=nodeProxy(FunctionOverloadingNode);export const overloadingFn=e=>(...o)=>overloadingBaseFn(e,...o);
//# sourceMappingURL=/sm/6cf3aaa4d33aec9b153d417751a6b2e094199a431ebd1b0f2d7ed05ad4c3240d.map
/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/audio/AudioListener.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{Vector3}from"../math/Vector3.js";import{Quaternion}from"../math/Quaternion.js";import{Clock}from"../core/Clock.js";import{Object3D}from"../core/Object3D.js";import{AudioContext}from"./AudioContext.js";const _position=new Vector3,_quaternion=new Quaternion,_scale=new Vector3,_orientation=new Vector3;class AudioListener extends Object3D{constructor(){super(),this.type="AudioListener",this.context=AudioContext.getContext(),this.gain=this.context.createGain(),this.gain.connect(this.context.destination),this.filter=null,this.timeDelta=0,this._clock=new Clock}getInput(){return this.gain}removeFilter(){return null!==this.filter&&(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination),this.gain.connect(this.context.destination),this.filter=null),this}getFilter(){return this.filter}setFilter(t){return null!==this.filter?(this.gain.disconnect(this.filter),this.filter.disconnect(this.context.destination)):this.gain.disconnect(this.context.destination),this.filter=t,this.gain.connect(this.filter),this.filter.connect(this.context.destination),this}getMasterVolume(){return this.gain.gain.value}setMasterVolume(t){return this.gain.gain.setTargetAtTime(t,this.context.currentTime,.01),this}updateMatrixWorld(t){super.updateMatrixWorld(t);const i=this.context.listener,e=this.up;if(this.timeDelta=this._clock.getDelta(),this.matrixWorld.decompose(_position,_quaternion,_scale),_orientation.set(0,0,-1).applyQuaternion(_quaternion),i.positionX){const t=this.context.currentTime+this.timeDelta;i.positionX.linearRampToValueAtTime(_position.x,t),i.positionY.linearRampToValueAtTime(_position.y,t),i.positionZ.linearRampToValueAtTime(_position.z,t),i.forwardX.linearRampToValueAtTime(_orientation.x,t),i.forwardY.linearRampToValueAtTime(_orientation.y,t),i.forwardZ.linearRampToValueAtTime(_orientation.z,t),i.upX.linearRampToValueAtTime(e.x,t),i.upY.linearRampToValueAtTime(e.y,t),i.upZ.linearRampToValueAtTime(e.z,t)}else i.setPosition(_position.x,_position.y,_position.z),i.setOrientation(_orientation.x,_orientation.y,_orientation.z,e.x,e.y,e.z)}}export{AudioListener};
//# sourceMappingURL=/sm/a07339c515d3e10a5a6e3899ab3a3486306e1cc5ad83ae217ea2f24555a16287.map
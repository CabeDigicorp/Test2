/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/materials/nodes/manager/NodeMaterialObserver.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
const refreshUniforms=["alphaMap","alphaTest","anisotropy","anisotropyMap","anisotropyRotation","aoMap","attenuationColor","attenuationDistance","bumpMap","clearcoat","clearcoatMap","clearcoatNormalMap","clearcoatNormalScale","clearcoatRoughness","color","dispersion","displacementMap","emissive","emissiveMap","envMap","gradientMap","ior","iridescence","iridescenceIOR","iridescenceMap","iridescenceThicknessMap","lightMap","map","matcap","metalness","metalnessMap","normalMap","normalScale","opacity","roughness","roughnessMap","sheen","sheenColor","sheenColorMap","sheenRoughnessMap","shininess","specular","specularColor","specularColorMap","specularIntensity","specularIntensityMap","specularMap","thickness","transmission","transmissionMap"];class NodeMaterialObserver{constructor(e){this.renderObjects=new WeakMap,this.hasNode=this.containsNode(e),this.hasAnimation=!0===e.object.isSkinnedMesh,this.refreshUniforms=refreshUniforms,this.renderId=0}firstInitialization(e){return!1===this.renderObjects.has(e)&&(this.getRenderObjectData(e),!0)}getRenderObjectData(e){let t=this.renderObjects.get(e);if(void 0===t){const{geometry:r,material:n}=e;if(t={material:this.getMaterialData(n),geometry:{attributes:this.getAttributesData(r.attributes),indexVersion:r.index?r.index.version:null,drawRange:{start:r.drawRange.start,count:r.drawRange.count}},worldMatrix:e.object.matrixWorld.clone()},e.object.center&&(t.center=e.object.center.clone()),e.object.morphTargetInfluences&&(t.morphTargetInfluences=e.object.morphTargetInfluences.slice()),null!==e.bundle&&(t.version=e.bundle.version),t.material.transmission>0){const{width:r,height:n}=e.context;t.bufferWidth=r,t.bufferHeight=n}this.renderObjects.set(e,t)}return t}getAttributesData(e){const t={};for(const r in e){const n=e[r];t[r]={version:n.version}}return t}containsNode(e){const t=e.material;for(const e in t)if(t[e]&&t[e].isNode)return!0;return null!==e.renderer.nodes.modelViewMatrix||null!==e.renderer.nodes.modelNormalViewMatrix}getMaterialData(e){const t={};for(const r of this.refreshUniforms){const n=e[r];null!=n&&("object"==typeof n&&void 0!==n.clone?!0===n.isTexture?t[r]={id:n.id,version:n.version}:t[r]=n.clone():t[r]=n)}return t}equals(e){const{object:t,material:r,geometry:n}=e,s=this.getRenderObjectData(e);if(!0!==s.worldMatrix.equals(t.matrixWorld))return s.worldMatrix.copy(t.matrixWorld),!1;const i=s.material;for(const e in i){const t=i[e],n=r[e];if(void 0!==t.equals){if(!1===t.equals(n))return t.copy(n),!1}else if(!0===n.isTexture){if(t.id!==n.id||t.version!==n.version)return t.id=n.id,t.version=n.version,!1}else if(t!==n)return i[e]=n,!1}if(i.transmission>0){const{width:t,height:r}=e.context;if(s.bufferWidth!==t||s.bufferHeight!==r)return s.bufferWidth=t,s.bufferHeight=r,!1}const a=s.geometry,o=n.attributes,c=a.attributes,l=Object.keys(c),u=Object.keys(o);if(l.length!==u.length)return s.geometry.attributes=this.getAttributesData(o),!1;for(const e of l){const t=c[e],r=o[e];if(void 0===r)return delete c[e],!1;if(t.version!==r.version)return t.version=r.version,!1}const d=n.index,h=a.indexVersion,f=d?d.version:null;if(h!==f)return a.indexVersion=f,!1;if(a.drawRange.start!==n.drawRange.start||a.drawRange.count!==n.drawRange.count)return a.drawRange.start=n.drawRange.start,a.drawRange.count=n.drawRange.count,!1;if(s.morphTargetInfluences){let e=!1;for(let r=0;r<s.morphTargetInfluences.length;r++)s.morphTargetInfluences[r]!==t.morphTargetInfluences[r]&&(e=!0);if(e)return!0}return s.center&&!1===s.center.equals(t.center)?(s.center.copy(t.center),!0):(null!==e.bundle&&(s.version=e.bundle.version),!0)}needsRefresh(e,t){if(this.hasNode||this.hasAnimation||this.firstInitialization(e))return!0;const{renderId:r}=t;if(this.renderId!==r)return this.renderId=r,!0;const n=!0===e.object.static,s=null!==e.bundle&&!0===e.bundle.static&&this.getRenderObjectData(e).version===e.bundle.version;if(n||s)return!1;return!0!==this.equals(e)}}export default NodeMaterialObserver;
//# sourceMappingURL=/sm/cbce110f750dc1858623529a727026807865f1a8314abb410cefe46f0af6eadb.map
/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/materials/nodes/InstancedPointsNodeMaterial.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import NodeMaterial from"./NodeMaterial.js";import{attribute}from"../../nodes/core/AttributeNode.js";import{cameraProjectionMatrix}from"../../nodes/accessors/Camera.js";import{materialColor,materialOpacity,materialPointWidth}from"../../nodes/accessors/MaterialNode.js";import{modelViewMatrix}from"../../nodes/accessors/ModelNode.js";import{positionGeometry}from"../../nodes/accessors/Position.js";import{smoothstep,lengthSq}from"../../nodes/math/MathNode.js";import{Fn,vec4,float}from"../../nodes/tsl/TSLBase.js";import{uv}from"../../nodes/accessors/UV.js";import{viewport}from"../../nodes/display/ScreenNode.js";import{PointsMaterial}from"../PointsMaterial.js";const _defaultValues=new PointsMaterial;class InstancedPointsNodeMaterial extends NodeMaterial{static get type(){return"InstancedPointsNodeMaterial"}constructor(e={}){super(),this.lights=!1,this.useAlphaToCoverage=!0,this.useColor=e.vertexColors,this.pointWidth=1,this.pointColorNode=null,this.pointWidthNode=null,this.setDefaultValues(_defaultValues),this.setValues(e)}setup(e){this.setupShaders(e),super.setup(e)}setupShaders({renderer:e}){const t=this.alphaToCoverage,o=this.useColor;this.vertexNode=Fn((()=>{const e=attribute("instancePosition").xyz,t=vec4(modelViewMatrix.mul(vec4(e,1))),o=viewport.z.div(viewport.w),s=cameraProjectionMatrix.mul(t),i=positionGeometry.xy.toVar();return i.mulAssign(this.pointWidthNode?this.pointWidthNode:materialPointWidth),i.assign(i.div(viewport.z)),i.y.assign(i.y.mul(o)),i.assign(i.mul(s.w)),s.addAssign(vec4(i,0,0)),s}))(),this.fragmentNode=Fn((()=>{const s=float(1).toVar(),i=lengthSq(uv().mul(2).sub(1));if(t&&e.samples>1){const e=float(i.fwidth()).toVar();s.assign(smoothstep(e.oneMinus(),e.add(1),i).oneMinus())}else i.greaterThan(1).discard();let a;if(this.pointColorNode)a=this.pointColorNode;else if(o){a=attribute("instanceColor").mul(materialColor)}else a=materialColor;return s.mulAssign(materialOpacity),vec4(a,s)}))()}get alphaToCoverage(){return this.useAlphaToCoverage}set alphaToCoverage(e){this.useAlphaToCoverage!==e&&(this.useAlphaToCoverage=e,this.needsUpdate=!0)}}export default InstancedPointsNodeMaterial;
//# sourceMappingURL=/sm/c45d33d52c06ce891a09aea516d29d2a7a40e7c17b19c2d70022827b77ae2e99.map
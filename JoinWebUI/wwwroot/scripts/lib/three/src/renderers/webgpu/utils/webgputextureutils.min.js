/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/renderers/webgpu/utils/WebGPUTextureUtils.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{GPUTextureFormat,GPUAddressMode,GPUFilterMode,GPUTextureDimension,GPUFeatureName}from"./WebGPUConstants.js";import WebGPUTexturePassUtils from"./WebGPUTexturePassUtils.js";import{ByteType,ShortType,NearestFilter,NearestMipmapNearestFilter,NearestMipmapLinearFilter,RepeatWrapping,MirroredRepeatWrapping,RGB_ETC2_Format,RGBA_ETC2_EAC_Format,RGBAFormat,RGBFormat,RedFormat,RGFormat,RGBA_S3TC_DXT1_Format,RGBA_S3TC_DXT3_Format,RGBA_S3TC_DXT5_Format,UnsignedByteType,FloatType,HalfFloatType,SRGBColorSpace,DepthFormat,DepthStencilFormat,RGBA_ASTC_4x4_Format,RGBA_ASTC_5x4_Format,RGBA_ASTC_5x5_Format,RGBA_ASTC_6x5_Format,RGBA_ASTC_6x6_Format,RGBA_ASTC_8x5_Format,RGBA_ASTC_8x6_Format,RGBA_ASTC_8x8_Format,RGBA_ASTC_10x5_Format,RGBA_ASTC_10x6_Format,RGBA_ASTC_10x8_Format,RGBA_ASTC_10x10_Format,RGBA_ASTC_12x10_Format,RGBA_ASTC_12x12_Format,UnsignedIntType,UnsignedShortType,UnsignedInt248Type,UnsignedInt5999Type,NeverCompare,AlwaysCompare,LessCompare,LessEqualCompare,EqualCompare,GreaterEqualCompare,GreaterCompare,NotEqualCompare,IntType,RedIntegerFormat,RGIntegerFormat,RGBAIntegerFormat,CubeReflectionMapping,CubeRefractionMapping,EquirectangularReflectionMapping,EquirectangularRefractionMapping}from"../../../constants.js";import{CubeTexture}from"../../../textures/CubeTexture.js";import{DepthTexture}from"../../../textures/DepthTexture.js";import{Texture}from"../../../textures/Texture.js";const _compareToWebGPU={[NeverCompare]:"never",[LessCompare]:"less",[EqualCompare]:"equal",[LessEqualCompare]:"less-equal",[GreaterCompare]:"greater",[GreaterEqualCompare]:"greater-equal",[AlwaysCompare]:"always",[NotEqualCompare]:"not-equal"},_flipMap=[0,1,3,2,4,5];class WebGPUTextureUtils{constructor(e){this.backend=e,this._passUtils=null,this.defaultTexture={},this.defaultCubeTexture={},this.defaultVideoFrame=null,this.colorBuffer=null,this.depthTexture=new DepthTexture,this.depthTexture.name="depthBuffer"}createSampler(e){const t=this.backend,r=t.device,a=t.get(e),o={addressModeU:this._convertAddressMode(e.wrapS),addressModeV:this._convertAddressMode(e.wrapT),addressModeW:this._convertAddressMode(e.wrapR),magFilter:this._convertFilterMode(e.magFilter),minFilter:this._convertFilterMode(e.minFilter),mipmapFilter:this._convertFilterMode(e.minFilter),maxAnisotropy:1};o.magFilter===GPUFilterMode.Linear&&o.minFilter===GPUFilterMode.Linear&&o.mipmapFilter===GPUFilterMode.Linear&&(o.maxAnisotropy=e.anisotropy),e.isDepthTexture&&null!==e.compareFunction&&(o.compare=_compareToWebGPU[e.compareFunction]),a.sampler=r.createSampler(o)}createDefaultTexture(e){let t;const r=getFormat(e);e.isCubeTexture?t=this._getDefaultCubeTextureGPU(r):e.isVideoTexture?this.backend.get(e).externalTexture=this._getDefaultVideoFrame():t=this._getDefaultTextureGPU(r),this.backend.get(e).texture=t}createTexture(e,t={}){const r=this.backend,a=r.get(e);if(a.initialized)throw new Error("WebGPUTextureUtils: Texture already initialized.");void 0===t.needsMipmaps&&(t.needsMipmaps=!1),void 0===t.levels&&(t.levels=1),void 0===t.depth&&(t.depth=1);const{width:o,height:i,depth:n,levels:m}=t;e.isFramebufferTexture&&(t.renderTarget?t.format=this.backend.utils.getCurrentColorFormat(t.renderTarget):t.format=this.backend.utils.getPreferredCanvasFormat());const u=this._getDimension(e),T=e.internalFormat||t.format||getFormat(e,r.device);a.format=T;let G=void 0!==t.sampleCount?t.sampleCount:1;G=r.utils.getSampleCount(G);const s=e.isRenderTargetTexture&&!e.isMultisampleRenderTargetTexture?1:G;let U=GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.COPY_SRC;!0===e.isStorageTexture&&(U|=GPUTextureUsage.STORAGE_BINDING),!0!==e.isCompressedTexture&&!0!==e.isCompressedArrayTexture&&(U|=GPUTextureUsage.RENDER_ATTACHMENT);const x={label:e.name,size:{width:o,height:i,depthOrArrayLayers:n},mipLevelCount:m,sampleCount:s,dimension:u,format:T,usage:U};if(e.isVideoTexture){const t=e.source.data,r=new VideoFrame(t);x.size.width=r.displayWidth,x.size.height=r.displayHeight,r.close(),a.externalTexture=t}else{if(void 0===T)return console.warn("WebGPURenderer: Texture format not supported."),this.createDefaultTexture(e);a.texture=r.device.createTexture(x)}if(e.isRenderTargetTexture&&G>1&&!e.isMultisampleRenderTargetTexture){const e=Object.assign({},x);e.label=e.label+"-msaa",e.sampleCount=G,a.msaaTexture=r.device.createTexture(e)}a.initialized=!0,a.textureDescriptorGPU=x}destroyTexture(e){const t=this.backend,r=t.get(e);r.texture.destroy(),void 0!==r.msaaTexture&&r.msaaTexture.destroy(),t.delete(e)}destroySampler(e){delete this.backend.get(e).sampler}generateMipmaps(e){const t=this.backend.get(e);if(e.isCubeTexture)for(let e=0;e<6;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e);else{const r=e.image.depth||1;for(let e=0;e<r;e++)this._generateMipmaps(t.texture,t.textureDescriptorGPU,e)}}getColorBuffer(){this.colorBuffer&&this.colorBuffer.destroy();const e=this.backend,{width:t,height:r}=e.getDrawingBufferSize();return this.colorBuffer=e.device.createTexture({label:"colorBuffer",size:{width:t,height:r,depthOrArrayLayers:1},sampleCount:e.utils.getSampleCount(e.renderer.samples),format:e.utils.getPreferredCanvasFormat(),usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC}),this.colorBuffer}getDepthBuffer(e=!0,t=!1){const r=this.backend,{width:a,height:o}=r.getDrawingBufferSize(),i=this.depthTexture,n=r.get(i).texture;let m,u;if(t?(m=DepthStencilFormat,u=UnsignedInt248Type):e&&(m=DepthFormat,u=UnsignedIntType),void 0!==n){if(i.image.width===a&&i.image.height===o&&i.format===m&&i.type===u)return n;this.destroyTexture(i)}return i.name="depthBuffer",i.format=m,i.type=u,i.image.width=a,i.image.height=o,this.createTexture(i,{sampleCount:r.utils.getSampleCount(r.renderer.samples),width:a,height:o}),r.get(i).texture}updateTexture(e,t){const r=this.backend.get(e),{textureDescriptorGPU:a}=r;if(!e.isRenderTargetTexture&&void 0!==a){if(e.isDataTexture)this._copyBufferToTexture(t.image,r.texture,a,0,e.flipY);else if(e.isDataArrayTexture||e.isData3DTexture)for(let o=0;o<t.image.depth;o++)this._copyBufferToTexture(t.image,r.texture,a,o,e.flipY,o);else if(e.isCompressedTexture||e.isCompressedArrayTexture)this._copyCompressedBufferToTexture(e.mipmaps,r.texture,a);else if(e.isCubeTexture)this._copyCubeMapToTexture(t.images,r.texture,a,e.flipY);else if(e.isVideoTexture){const t=e.source.data;r.externalTexture=t}else this._copyImageToTexture(t.image,r.texture,a,0,e.flipY);r.version=e.version,e.onUpdate&&e.onUpdate(e)}}async copyTextureToBuffer(e,t,r,a,o,i){const n=this.backend.device,m=this.backend.get(e),u=m.texture,T=m.textureDescriptorGPU.format,G=this._getBytesPerTexel(T);let s=a*G;s=256*Math.ceil(s/256);const U=n.createBuffer({size:a*o*G,usage:GPUBufferUsage.COPY_DST|GPUBufferUsage.MAP_READ}),x=n.createCommandEncoder();x.copyTextureToBuffer({texture:u,origin:{x:t,y:r,z:i}},{buffer:U,bytesPerRow:s},{width:a,height:o});const F=this._getTypedArrayType(T);n.queue.submit([x.finish()]),await U.mapAsync(GPUMapMode.READ);return new F(U.getMappedRange())}_isEnvironmentTexture(e){const t=e.mapping;return t===EquirectangularReflectionMapping||t===EquirectangularRefractionMapping||t===CubeReflectionMapping||t===CubeRefractionMapping}_getDefaultTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const r=new Texture;r.minFilter=NearestFilter,r.magFilter=NearestFilter,this.createTexture(r,{width:1,height:1,format:e}),this.defaultTexture[e]=t=r}return this.backend.get(t).texture}_getDefaultCubeTextureGPU(e){let t=this.defaultTexture[e];if(void 0===t){const r=new CubeTexture;r.minFilter=NearestFilter,r.magFilter=NearestFilter,this.createTexture(r,{width:1,height:1,depth:6}),this.defaultCubeTexture[e]=t=r}return this.backend.get(t).texture}_getDefaultVideoFrame(){let e=this.defaultVideoFrame;if(null===e){const t={timestamp:0,codedWidth:1,codedHeight:1,format:"RGBA"};this.defaultVideoFrame=e=new VideoFrame(new Uint8Array([0,0,0,255]),t)}return e}_copyCubeMapToTexture(e,t,r,a){for(let o=0;o<6;o++){const i=e[o],n=!0===a?_flipMap[o]:o;i.isDataTexture?this._copyBufferToTexture(i.image,t,r,n,a):this._copyImageToTexture(i,t,r,n,a)}}_copyImageToTexture(e,t,r,a,o){this.backend.device.queue.copyExternalImageToTexture({source:e},{texture:t,mipLevel:0,origin:{x:0,y:0,z:a}},{width:e.width,height:e.height,depthOrArrayLayers:1}),!0===o&&this._flipY(t,r,a)}_getPassUtils(){let e=this._passUtils;return null===e&&(this._passUtils=e=new WebGPUTexturePassUtils(this.backend.device)),e}_generateMipmaps(e,t,r=0){this._getPassUtils().generateMipmaps(e,t,r)}_flipY(e,t,r=0){this._getPassUtils().flipY(e,t,r)}_copyBufferToTexture(e,t,r,a,o,i=0){const n=this.backend.device,m=e.data,u=this._getBytesPerTexel(r.format),T=e.width*u;n.queue.writeTexture({texture:t,mipLevel:0,origin:{x:0,y:0,z:a}},m,{offset:e.width*e.height*u*i,bytesPerRow:T},{width:e.width,height:e.height,depthOrArrayLayers:1}),!0===o&&this._flipY(t,r,a)}_copyCompressedBufferToTexture(e,t,r){const a=this.backend.device,o=this._getBlockData(r.format),i=r.size.depthOrArrayLayers>1;for(let n=0;n<e.length;n++){const m=e[n],u=m.width,T=m.height,G=i?r.size.depthOrArrayLayers:1,s=Math.ceil(u/o.width)*o.byteLength,U=s*Math.ceil(T/o.height);for(let e=0;e<G;e++)a.queue.writeTexture({texture:t,mipLevel:n,origin:{x:0,y:0,z:e}},m.data,{offset:e*U,bytesPerRow:s,rowsPerImage:Math.ceil(T/o.height)},{width:Math.ceil(u/o.width)*o.width,height:Math.ceil(T/o.height)*o.height,depthOrArrayLayers:1})}}_getBlockData(e){return e===GPUTextureFormat.BC1RGBAUnorm||e===GPUTextureFormat.BC1RGBAUnormSRGB?{byteLength:8,width:4,height:4}:e===GPUTextureFormat.BC2RGBAUnorm||e===GPUTextureFormat.BC2RGBAUnormSRGB||e===GPUTextureFormat.BC3RGBAUnorm||e===GPUTextureFormat.BC3RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===GPUTextureFormat.BC4RUnorm||e===GPUTextureFormat.BC4RSNorm?{byteLength:8,width:4,height:4}:e===GPUTextureFormat.BC5RGUnorm||e===GPUTextureFormat.BC5RGSnorm||e===GPUTextureFormat.BC6HRGBUFloat||e===GPUTextureFormat.BC6HRGBFloat||e===GPUTextureFormat.BC7RGBAUnorm||e===GPUTextureFormat.BC7RGBAUnormSRGB?{byteLength:16,width:4,height:4}:e===GPUTextureFormat.ETC2RGB8Unorm||e===GPUTextureFormat.ETC2RGB8UnormSRGB||e===GPUTextureFormat.ETC2RGB8A1Unorm||e===GPUTextureFormat.ETC2RGB8A1UnormSRGB?{byteLength:8,width:4,height:4}:e===GPUTextureFormat.ETC2RGBA8Unorm||e===GPUTextureFormat.ETC2RGBA8UnormSRGB?{byteLength:16,width:4,height:4}:e===GPUTextureFormat.EACR11Unorm||e===GPUTextureFormat.EACR11Snorm?{byteLength:8,width:4,height:4}:e===GPUTextureFormat.EACRG11Unorm||e===GPUTextureFormat.EACRG11Snorm||e===GPUTextureFormat.ASTC4x4Unorm||e===GPUTextureFormat.ASTC4x4UnormSRGB?{byteLength:16,width:4,height:4}:e===GPUTextureFormat.ASTC5x4Unorm||e===GPUTextureFormat.ASTC5x4UnormSRGB?{byteLength:16,width:5,height:4}:e===GPUTextureFormat.ASTC5x5Unorm||e===GPUTextureFormat.ASTC5x5UnormSRGB?{byteLength:16,width:5,height:5}:e===GPUTextureFormat.ASTC6x5Unorm||e===GPUTextureFormat.ASTC6x5UnormSRGB?{byteLength:16,width:6,height:5}:e===GPUTextureFormat.ASTC6x6Unorm||e===GPUTextureFormat.ASTC6x6UnormSRGB?{byteLength:16,width:6,height:6}:e===GPUTextureFormat.ASTC8x5Unorm||e===GPUTextureFormat.ASTC8x5UnormSRGB?{byteLength:16,width:8,height:5}:e===GPUTextureFormat.ASTC8x6Unorm||e===GPUTextureFormat.ASTC8x6UnormSRGB?{byteLength:16,width:8,height:6}:e===GPUTextureFormat.ASTC8x8Unorm||e===GPUTextureFormat.ASTC8x8UnormSRGB?{byteLength:16,width:8,height:8}:e===GPUTextureFormat.ASTC10x5Unorm||e===GPUTextureFormat.ASTC10x5UnormSRGB?{byteLength:16,width:10,height:5}:e===GPUTextureFormat.ASTC10x6Unorm||e===GPUTextureFormat.ASTC10x6UnormSRGB?{byteLength:16,width:10,height:6}:e===GPUTextureFormat.ASTC10x8Unorm||e===GPUTextureFormat.ASTC10x8UnormSRGB?{byteLength:16,width:10,height:8}:e===GPUTextureFormat.ASTC10x10Unorm||e===GPUTextureFormat.ASTC10x10UnormSRGB?{byteLength:16,width:10,height:10}:e===GPUTextureFormat.ASTC12x10Unorm||e===GPUTextureFormat.ASTC12x10UnormSRGB?{byteLength:16,width:12,height:10}:e===GPUTextureFormat.ASTC12x12Unorm||e===GPUTextureFormat.ASTC12x12UnormSRGB?{byteLength:16,width:12,height:12}:void 0}_convertAddressMode(e){let t=GPUAddressMode.ClampToEdge;return e===RepeatWrapping?t=GPUAddressMode.Repeat:e===MirroredRepeatWrapping&&(t=GPUAddressMode.MirrorRepeat),t}_convertFilterMode(e){let t=GPUFilterMode.Linear;return e!==NearestFilter&&e!==NearestMipmapNearestFilter&&e!==NearestMipmapLinearFilter||(t=GPUFilterMode.Nearest),t}_getBytesPerTexel(e){return e===GPUTextureFormat.R8Unorm||e===GPUTextureFormat.R8Snorm||e===GPUTextureFormat.R8Uint||e===GPUTextureFormat.R8Sint?1:e===GPUTextureFormat.R16Uint||e===GPUTextureFormat.R16Sint||e===GPUTextureFormat.R16Float||e===GPUTextureFormat.RG8Unorm||e===GPUTextureFormat.RG8Snorm||e===GPUTextureFormat.RG8Uint||e===GPUTextureFormat.RG8Sint?2:e===GPUTextureFormat.R32Uint||e===GPUTextureFormat.R32Sint||e===GPUTextureFormat.R32Float||e===GPUTextureFormat.RG16Uint||e===GPUTextureFormat.RG16Sint||e===GPUTextureFormat.RG16Float||e===GPUTextureFormat.RGBA8Unorm||e===GPUTextureFormat.RGBA8UnormSRGB||e===GPUTextureFormat.RGBA8Snorm||e===GPUTextureFormat.RGBA8Uint||e===GPUTextureFormat.RGBA8Sint||e===GPUTextureFormat.BGRA8Unorm||e===GPUTextureFormat.BGRA8UnormSRGB||e===GPUTextureFormat.RGB9E5UFloat||e===GPUTextureFormat.RGB10A2Unorm||e===GPUTextureFormat.RG11B10UFloat||e===GPUTextureFormat.Depth32Float||e===GPUTextureFormat.Depth24Plus||e===GPUTextureFormat.Depth24PlusStencil8||e===GPUTextureFormat.Depth32FloatStencil8?4:e===GPUTextureFormat.RG32Uint||e===GPUTextureFormat.RG32Sint||e===GPUTextureFormat.RG32Float||e===GPUTextureFormat.RGBA16Uint||e===GPUTextureFormat.RGBA16Sint||e===GPUTextureFormat.RGBA16Float?8:e===GPUTextureFormat.RGBA32Uint||e===GPUTextureFormat.RGBA32Sint||e===GPUTextureFormat.RGBA32Float?16:void 0}_getTypedArrayType(e){return e===GPUTextureFormat.R8Uint?Uint8Array:e===GPUTextureFormat.R8Sint?Int8Array:e===GPUTextureFormat.R8Unorm?Uint8Array:e===GPUTextureFormat.R8Snorm?Int8Array:e===GPUTextureFormat.RG8Uint?Uint8Array:e===GPUTextureFormat.RG8Sint?Int8Array:e===GPUTextureFormat.RG8Unorm?Uint8Array:e===GPUTextureFormat.RG8Snorm?Int8Array:e===GPUTextureFormat.RGBA8Uint?Uint8Array:e===GPUTextureFormat.RGBA8Sint?Int8Array:e===GPUTextureFormat.RGBA8Unorm?Uint8Array:e===GPUTextureFormat.RGBA8Snorm?Int8Array:e===GPUTextureFormat.R16Uint?Uint16Array:e===GPUTextureFormat.R16Sint?Int16Array:e===GPUTextureFormat.RG16Uint?Uint16Array:e===GPUTextureFormat.RG16Sint?Int16Array:e===GPUTextureFormat.RGBA16Uint?Uint16Array:e===GPUTextureFormat.RGBA16Sint?Int16Array:e===GPUTextureFormat.R16Float||e===GPUTextureFormat.RG16Float||e===GPUTextureFormat.RGBA16Float?Uint16Array:e===GPUTextureFormat.R32Uint?Uint32Array:e===GPUTextureFormat.R32Sint?Int32Array:e===GPUTextureFormat.R32Float?Float32Array:e===GPUTextureFormat.RG32Uint?Uint32Array:e===GPUTextureFormat.RG32Sint?Int32Array:e===GPUTextureFormat.RG32Float?Float32Array:e===GPUTextureFormat.RGBA32Uint?Uint32Array:e===GPUTextureFormat.RGBA32Sint?Int32Array:e===GPUTextureFormat.RGBA32Float?Float32Array:e===GPUTextureFormat.BGRA8Unorm||e===GPUTextureFormat.BGRA8UnormSRGB?Uint8Array:e===GPUTextureFormat.RGB10A2Unorm||e===GPUTextureFormat.RGB9E5UFloat||e===GPUTextureFormat.RG11B10UFloat?Uint32Array:e===GPUTextureFormat.Depth32Float?Float32Array:e===GPUTextureFormat.Depth24Plus||e===GPUTextureFormat.Depth24PlusStencil8?Uint32Array:e===GPUTextureFormat.Depth32FloatStencil8?Float32Array:void 0}_getDimension(e){let t;return t=e.isData3DTexture?GPUTextureDimension.ThreeD:GPUTextureDimension.TwoD,t}}export function getFormat(e,t=null){const r=e.format,a=e.type,o=e.colorSpace;let i;if(!0===e.isCompressedTexture||!0===e.isCompressedArrayTexture)switch(r){case RGBA_S3TC_DXT1_Format:i=o===SRGBColorSpace?GPUTextureFormat.BC1RGBAUnormSRGB:GPUTextureFormat.BC1RGBAUnorm;break;case RGBA_S3TC_DXT3_Format:i=o===SRGBColorSpace?GPUTextureFormat.BC2RGBAUnormSRGB:GPUTextureFormat.BC2RGBAUnorm;break;case RGBA_S3TC_DXT5_Format:i=o===SRGBColorSpace?GPUTextureFormat.BC3RGBAUnormSRGB:GPUTextureFormat.BC3RGBAUnorm;break;case RGB_ETC2_Format:i=o===SRGBColorSpace?GPUTextureFormat.ETC2RGB8UnormSRGB:GPUTextureFormat.ETC2RGB8Unorm;break;case RGBA_ETC2_EAC_Format:i=o===SRGBColorSpace?GPUTextureFormat.ETC2RGBA8UnormSRGB:GPUTextureFormat.ETC2RGBA8Unorm;break;case RGBA_ASTC_4x4_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC4x4UnormSRGB:GPUTextureFormat.ASTC4x4Unorm;break;case RGBA_ASTC_5x4_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC5x4UnormSRGB:GPUTextureFormat.ASTC5x4Unorm;break;case RGBA_ASTC_5x5_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC5x5UnormSRGB:GPUTextureFormat.ASTC5x5Unorm;break;case RGBA_ASTC_6x5_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC6x5UnormSRGB:GPUTextureFormat.ASTC6x5Unorm;break;case RGBA_ASTC_6x6_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC6x6UnormSRGB:GPUTextureFormat.ASTC6x6Unorm;break;case RGBA_ASTC_8x5_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC8x5UnormSRGB:GPUTextureFormat.ASTC8x5Unorm;break;case RGBA_ASTC_8x6_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC8x6UnormSRGB:GPUTextureFormat.ASTC8x6Unorm;break;case RGBA_ASTC_8x8_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC8x8UnormSRGB:GPUTextureFormat.ASTC8x8Unorm;break;case RGBA_ASTC_10x5_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC10x5UnormSRGB:GPUTextureFormat.ASTC10x5Unorm;break;case RGBA_ASTC_10x6_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC10x6UnormSRGB:GPUTextureFormat.ASTC10x6Unorm;break;case RGBA_ASTC_10x8_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC10x8UnormSRGB:GPUTextureFormat.ASTC10x8Unorm;break;case RGBA_ASTC_10x10_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC10x10UnormSRGB:GPUTextureFormat.ASTC10x10Unorm;break;case RGBA_ASTC_12x10_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC12x10UnormSRGB:GPUTextureFormat.ASTC12x10Unorm;break;case RGBA_ASTC_12x12_Format:i=o===SRGBColorSpace?GPUTextureFormat.ASTC12x12UnormSRGB:GPUTextureFormat.ASTC12x12Unorm;break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}else switch(r){case RGBAFormat:switch(a){case ByteType:i=GPUTextureFormat.RGBA8Snorm;break;case ShortType:i=GPUTextureFormat.RGBA16Sint;break;case UnsignedShortType:i=GPUTextureFormat.RGBA16Uint;break;case UnsignedIntType:i=GPUTextureFormat.RGBA32Uint;break;case IntType:i=GPUTextureFormat.RGBA32Sint;break;case UnsignedByteType:i=o===SRGBColorSpace?GPUTextureFormat.RGBA8UnormSRGB:GPUTextureFormat.RGBA8Unorm;break;case HalfFloatType:i=GPUTextureFormat.RGBA16Float;break;case FloatType:i=GPUTextureFormat.RGBA32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAFormat.",a)}break;case RGBFormat:if(a===UnsignedInt5999Type)i=GPUTextureFormat.RGB9E5UFloat;else console.error("WebGPURenderer: Unsupported texture type with RGBFormat.",a);break;case RedFormat:switch(a){case ByteType:i=GPUTextureFormat.R8Snorm;break;case ShortType:i=GPUTextureFormat.R16Sint;break;case UnsignedShortType:i=GPUTextureFormat.R16Uint;break;case UnsignedIntType:i=GPUTextureFormat.R32Uint;break;case IntType:i=GPUTextureFormat.R32Sint;break;case UnsignedByteType:i=GPUTextureFormat.R8Unorm;break;case HalfFloatType:i=GPUTextureFormat.R16Float;break;case FloatType:i=GPUTextureFormat.R32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RedFormat.",a)}break;case RGFormat:switch(a){case ByteType:i=GPUTextureFormat.RG8Snorm;break;case ShortType:i=GPUTextureFormat.RG16Sint;break;case UnsignedShortType:i=GPUTextureFormat.RG16Uint;break;case UnsignedIntType:i=GPUTextureFormat.RG32Uint;break;case IntType:i=GPUTextureFormat.RG32Sint;break;case UnsignedByteType:i=GPUTextureFormat.RG8Unorm;break;case HalfFloatType:i=GPUTextureFormat.RG16Float;break;case FloatType:i=GPUTextureFormat.RG32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with RGFormat.",a)}break;case DepthFormat:switch(a){case UnsignedShortType:i=GPUTextureFormat.Depth16Unorm;break;case UnsignedIntType:i=GPUTextureFormat.Depth24Plus;break;case FloatType:i=GPUTextureFormat.Depth32Float;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthFormat.",a)}break;case DepthStencilFormat:switch(a){case UnsignedInt248Type:i=GPUTextureFormat.Depth24PlusStencil8;break;case FloatType:t&&!1===t.features.has(GPUFeatureName.Depth32FloatStencil8)&&console.error('WebGPURenderer: Depth textures with DepthStencilFormat + FloatType can only be used with the "depth32float-stencil8" GPU feature.'),i=GPUTextureFormat.Depth32FloatStencil8;break;default:console.error("WebGPURenderer: Unsupported texture type with DepthStencilFormat.",a)}break;case RedIntegerFormat:switch(a){case IntType:i=GPUTextureFormat.R32Sint;break;case UnsignedIntType:i=GPUTextureFormat.R32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RedIntegerFormat.",a)}break;case RGIntegerFormat:switch(a){case IntType:i=GPUTextureFormat.RG32Sint;break;case UnsignedIntType:i=GPUTextureFormat.RG32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGIntegerFormat.",a)}break;case RGBAIntegerFormat:switch(a){case IntType:i=GPUTextureFormat.RGBA32Sint;break;case UnsignedIntType:i=GPUTextureFormat.RGBA32Uint;break;default:console.error("WebGPURenderer: Unsupported texture type with RGBAIntegerFormat.",a)}break;default:console.error("WebGPURenderer: Unsupported texture format.",r)}return i}export default WebGPUTextureUtils;
//# sourceMappingURL=/sm/4bbcd00bb888e1d0e922d40ca962c6fde1599901815f68a0a5dbde4837238cc7.map
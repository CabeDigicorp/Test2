/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/renderers/webgpu/utils/WebGPUBindingUtils.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{GPUTextureAspect,GPUTextureViewDimension,GPUTextureSampleType}from"./WebGPUConstants.js";import{FloatType,IntType,UnsignedIntType}from"../../../constants.js";class WebGPUBindingUtils{constructor(e){this.backend=e,this.bindGroupLayoutCache=new WeakMap}createBindingsLayout(e){const t=this.backend.device,r=[];let i=0;for(const t of e.bindings){const e={binding:i++,visibility:t.visibility};if(t.isUniformBuffer||t.isStorageBuffer){const r={};t.isStorageBuffer&&(r.type=t.access),e.buffer=r}else if(t.isSampler){const r={};t.texture.isDepthTexture&&null!==t.texture.compareFunction&&(r.type="comparison"),e.sampler=r}else if(t.isSampledTexture&&t.texture.isVideoTexture)e.externalTexture={};else if(t.isSampledTexture&&t.store){const r=this.backend.get(t.texture).texture.format,i=t.access;e.storageTexture={format:r,access:i}}else if(t.isSampledTexture){const r={};if(!0===t.texture.isMultisampleRenderTargetTexture&&(r.multisampled=!0),t.texture.isDepthTexture)r.sampleType=GPUTextureSampleType.Depth;else if(t.texture.isDataTexture||t.texture.isDataArrayTexture||t.texture.isData3DTexture){const e=t.texture.type;e===IntType?r.sampleType=GPUTextureSampleType.SInt:e===UnsignedIntType?r.sampleType=GPUTextureSampleType.UInt:e===FloatType&&(this.backend.hasFeature("float32-filterable")?r.sampleType=GPUTextureSampleType.Float:r.sampleType=GPUTextureSampleType.UnfilterableFloat)}t.isSampledCubeTexture?r.viewDimension=GPUTextureViewDimension.Cube:t.texture.isDataArrayTexture||t.texture.isCompressedArrayTexture?r.viewDimension=GPUTextureViewDimension.TwoDArray:t.isSampledTexture3D&&(r.viewDimension=GPUTextureViewDimension.ThreeD),e.texture=r}else console.error(`WebGPUBindingUtils: Unsupported binding "${t}".`);r.push(e)}return t.createBindGroupLayout({entries:r})}createBindings(e){const{backend:t,bindGroupLayoutCache:r}=this,i=t.get(e);let s=r.get(e.bindingsReference);void 0===s&&(s=this.createBindingsLayout(e),r.set(e.bindingsReference,s));const n=this.createBindGroup(e,s);i.layout=s,i.group=n}updateBinding(e){const t=this.backend,r=t.device,i=e.buffer,s=t.get(e).buffer;r.queue.writeBuffer(s,0,i,0)}createBindGroup(e,t){const r=this.backend,i=r.device;let s=0;const n=[];for(const t of e.bindings){if(t.isUniformBuffer){const e=r.get(t);if(void 0===e.buffer){const r=t.byteLength,s=GPUBufferUsage.UNIFORM|GPUBufferUsage.COPY_DST,n=i.createBuffer({label:"bindingBuffer_"+t.name,size:r,usage:s});e.buffer=n}n.push({binding:s,resource:{buffer:e.buffer}})}else if(t.isStorageBuffer){const e=r.get(t);if(void 0===e.buffer){const i=t.attribute;e.buffer=r.get(i).buffer}n.push({binding:s,resource:{buffer:e.buffer}})}else if(t.isSampler){const e=r.get(t.texture);n.push({binding:s,resource:e.sampler})}else if(t.isSampledTexture){const e=r.get(t.texture);let u;if(void 0!==e.externalTexture)u=i.importExternalTexture({source:e.externalTexture});else{const r=t.store?1:e.texture.mipLevelCount,i=`view-${e.texture.width}-${e.texture.height}-${r}`;if(u=e[i],void 0===u){const s=GPUTextureAspect.All;let n;n=t.isSampledCubeTexture?GPUTextureViewDimension.Cube:t.isSampledTexture3D?GPUTextureViewDimension.ThreeD:t.texture.isDataArrayTexture||t.texture.isCompressedArrayTexture?GPUTextureViewDimension.TwoDArray:GPUTextureViewDimension.TwoD,u=e[i]=e.texture.createView({aspect:s,dimension:n,mipLevelCount:r})}}n.push({binding:s,resource:u})}s++}return i.createBindGroup({label:"bindGroup_"+e.name,layout:t,entries:n})}}export default WebGPUBindingUtils;
//# sourceMappingURL=/sm/f53041dd67c7a98850ff24a40cd218f6412976698718830e408fe26562878b0f.map
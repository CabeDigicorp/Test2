/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/renderers/shaders/UniformsUtils.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import{ColorManagement}from"../../math/ColorManagement.js";export function cloneUniforms(o){const r={};for(const e in o){r[e]={};for(const n in o[e]){const t=o[e][n];t&&(t.isColor||t.isMatrix3||t.isMatrix4||t.isVector2||t.isVector3||t.isVector4||t.isTexture||t.isQuaternion)?t.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),r[e][n]=null):r[e][n]=t.clone():Array.isArray(t)?r[e][n]=t.slice():r[e][n]=t}}return r}export function mergeUniforms(o){const r={};for(let e=0;e<o.length;e++){const n=cloneUniforms(o[e]);for(const o in n)r[o]=n[o]}return r}export function cloneUniformsGroups(o){const r=[];for(let e=0;e<o.length;e++)r.push(o[e].clone());return r}export function getUnlitUniformColorSpace(o){const r=o.getRenderTarget();return null===r?o.outputColorSpace:!0===r.isXRRenderTarget?r.texture.colorSpace:ColorManagement.workingColorSpace}const UniformsUtils={clone:cloneUniforms,merge:mergeUniforms};export{UniformsUtils};
//# sourceMappingURL=/sm/276e2679b9cc7f3bb5b81e1919b32e338d4f3db7114c3c173d28045671055d04.map
/**
 * Minified by jsDelivr using Terser v5.19.2.
 * Original file: /npm/three@0.170.0/src/renderers/common/PostProcessing.js
 *
 * Do NOT use SRI with dynamically generated files! More information: https://www.jsdelivr.com/using-sri-with-dynamic-files
 */
import NodeMaterial from"../../materials/nodes/NodeMaterial.js";import{vec4,renderOutput}from"../../nodes/TSL.js";import{LinearSRGBColorSpace,NoToneMapping}from"../../constants.js";import QuadMesh from"../../renderers/common/QuadMesh.js";const _material=new NodeMaterial,_quadMesh=new QuadMesh(_material);class PostProcessing{constructor(e,o=vec4(0,0,1,1)){this.renderer=e,this.outputNode=o,this.outputColorTransform=!0,this.needsUpdate=!0,_material.name="PostProcessing"}render(){this.update();const e=this.renderer,o=e.toneMapping,t=e.outputColorSpace;e.toneMapping=NoToneMapping,e.outputColorSpace=LinearSRGBColorSpace,_quadMesh.render(e),e.toneMapping=o,e.outputColorSpace=t}update(){if(!0===this.needsUpdate){const e=this.renderer,o=e.toneMapping,t=e.outputColorSpace;_quadMesh.material.fragmentNode=!0===this.outputColorTransform?renderOutput(this.outputNode,o,t):this.outputNode.context({toneMapping:o,outputColorSpace:t}),_quadMesh.material.needsUpdate=!0,this.needsUpdate=!1}}async renderAsync(){this.update();const e=this.renderer,o=e.toneMapping,t=e.outputColorSpace;e.toneMapping=NoToneMapping,e.outputColorSpace=LinearSRGBColorSpace,await _quadMesh.renderAsync(e),e.toneMapping=o,e.outputColorSpace=t}}export default PostProcessing;
//# sourceMappingURL=/sm/2373cdfed5c31e305da9e9e1558d01d16c02c184b5c8bfc11db34623b7ae4ac5.map
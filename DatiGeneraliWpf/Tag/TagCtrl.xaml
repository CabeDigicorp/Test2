<UserControl x:Class="DatiGeneraliWpf.TagCtrl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:commons="clr-namespace:Commons;assembly=DigiCorp.Commons"
             xmlns:masterDetailView="clr-namespace:MasterDetailView;assembly=DigiCorp.MasterDetailView"
             xmlns:dz="clr-namespace:DevZest.Windows.DataVirtualization;assembly=DigiCorp.DataVirtualization"
             xmlns:lex="http://wpflocalizeextension.codeplex.com"
             lex:LocalizeDictionary.OutputMissingKeys="True"
             lex:LocalizeDictionary.DesignCulture="en"
             lex:ResxLocalizationProvider.DefaultAssembly="DigiCorp.CommonResources"
             lex:ResxLocalizationProvider.DefaultDictionary="Strings"
             xmlns:syncfusion="http://schemas.syncfusion.com/wpf"
             xmlns:commonResources="clr-namespace:CommonResources;assembly=DigiCorp.CommonResources"
             xmlns:telerik="http://schemas.telerik.com/2008/xaml/presentation" 
             xmlns:dxe="http://schemas.devexpress.com/winfx/2008/xaml/editors" xmlns:masterdetailwpf="clr-namespace:MasterDetailWpf;assembly=DigiCorp.MasterDetailWpf"
             mc:Ignorable="d" 
             d:DesignHeight="450" d:DesignWidth="800">
    <UserControl.Resources>
        <commons:IntegerToIndentationConverter x:Key="IntToIndConverter"/>
        <commons:StaticResourceConverter x:Key="StaticResourceConverter"/>
        <commons:ColorConverter x:Key="ColorConverter"/>
        <Style TargetType="{x:Type Control}" x:Key="baseStyle">
            <Setter Property="FontSize" Value="12" />
        </Style>
        <!--<Style TargetType="{x:Type Button}" BasedOn="{StaticResource baseStyle}"></Style>-->
        <Style TargetType="{x:Type Label}" BasedOn="{StaticResource baseStyle}"></Style>
        <Style TargetType="{x:Type TextBox}" BasedOn="{StaticResource baseStyle}"></Style>
        <Style TargetType="{x:Type ListView}" BasedOn="{StaticResource baseStyle}"></Style>
        <Style TargetType="{x:Type TextBlock}">
            <Setter Property="FontSize" Value="12"/>
        </Style>
        <!-- Setting VirtualListItemBase.AutoLoad to true will load the item when it's set to ListViewItem.Content property -->
        <Style TargetType="ListViewItem">
            <Setter Property="dz:VirtualListItemBase.AutoLoad" Value="true" />
            <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
            <Setter Property="Width" Value="{Binding Path=ActualWidth, RelativeSource={RelativeSource AncestorType={x:Type ScrollContentPresenter}}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ListBoxItem">
                        <Border Name="Border" Padding="0" SnapsToDevicePixels="true">
                            <ContentPresenter />
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsSelected" Value="true">
                                <Setter TargetName="Border" Property="BorderBrush" Value="Gray"/>
                                <Setter TargetName="Border" Property="BorderThickness" Value="2,0,0,0"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <masterDetailView:ValoreAttributoTemplateSelector x:Key="ValoreAttributoTemplateSelector" />
        <masterDetailView:RightSplitPaneTemplateSelector x:Key="RightSplitPaneTemplateSelector" />
    </UserControl.Resources>

    <Grid PreviewMouseWheel="Grid_PreviewMouseWheel" PreviewMouseDown="Grid_PreviewMouseDown">
        <Grid.LayoutTransform>
            <ScaleTransform x:Name="MasterDetailScale" CenterX="0" CenterY="0" ScaleX="1" ScaleY="1"/>
        </Grid.LayoutTransform>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*"/>
            <!--<ColumnDefinition Width="5"/>-->
            <ColumnDefinition Width="Auto"/>
        </Grid.ColumnDefinitions>
        <Grid Name="MainGrid" Grid.Column="0" Style="{StaticResource mainGridStyle}" Margin="0">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="400" MinWidth="200"/>
                <ColumnDefinition Width="5"/>
                <ColumnDefinition Width="*" MinWidth="200"/>
            </Grid.ColumnDefinitions>
            <Grid Name="MasterGrid" Grid.Column="0" HorizontalAlignment="Stretch" MinWidth="20">
                <Grid.InputBindings>
                    <KeyBinding Key="Escape" Command="{Binding ItemsView.EscapeCommand}"/>
                </Grid.InputBindings>
                <!--BorderThickness="3,0,3,0" BorderBrush="WhiteSmoke"-->
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <!--<RowDefinition Height="Auto"/>-->
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <Grid Grid.Row="0">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <commonResources:ButtonsBar Grid.Column="0" Style="{StaticResource menuStackPanelStyle}">
                        <commonResources:ButtonsBarButton x:Name="AddEntity" Command="{Binding ItemsView.AddEntityCommand}" ToolTipService.ToolTip="{Binding ItemsView.AddEntityToolTip}"
                                                  Style="{StaticResource menuButtonStyle}" Content="&#xe02d;"
                                                  DesideredVisibility="{Binding ItemsView.IsAddEntityEnabled, Mode=OneWay, Converter={StaticResource VisibilityConverter}}"
                                                  OtherText="{Binding ItemsView.AddEntityToolTip}"/>
                        <commonResources:ButtonsBarButton x:Name="MoveEntities" Command="{Binding ItemsView.MoveEntitiesCommand}"
                                             ToolTipService.ToolTip="{lex:Loc Sposta}"
                                             Style="{StaticResource menuButtonStyle}"
                                             DesideredVisibility="{Binding ItemsView.IsMoveEntitiesEnabled, Mode=OneWay, Converter={StaticResource VisibilityConverter}}"
                                             OtherText="{lex:Loc Sposta}">
                            <Grid>
                                <TextBlock Text="&#xe032;" Style="{StaticResource menuTextBlockStyle}"/>
                                <commons:NotificationCtrl Text="{Binding ItemsView.ReadyToPasteEntitiesCount}" Visibility="{Binding ItemsView.IsMoveEntitiesNotificationEnabled, Converter={StaticResource VisibilityConverter}}"/>
                            </Grid>
                        </commonResources:ButtonsBarButton>
                        <!--<Popup Style="{StaticResource popupStyle}"
										IsOpen="{Binding ItemsView.IsMoveEntitiesWaitingForTarget, Mode=OneWay}" 
										PlacementTarget="{Binding ElementName=MoveEntities}"
                                        Placement="Top" Width="Auto"
                               >
                            <Border Style="{StaticResource popupBorderStyle}">
                                <TextBlock Text="{lex:Loc SelezionareDestinazione}"/>
                            </Border>
                        </Popup>-->
                        <dxe:FlyoutControl IsOpen="{Binding ItemsView.IsMoveEntitiesWaitingForTarget, Mode=OneWay}" 
				                           PlacementTarget="{Binding ElementName=MoveEntities}"
				                           Style="{StaticResource flyoutControlStyle}">
                            <dxe:FlyoutControl.Settings>
                                <dxe:FlyoutSettings ShowIndicator="True" Placement="Top" IndicatorHorizontalAlignment="Center">
                                </dxe:FlyoutSettings>
                            </dxe:FlyoutControl.Settings>
                            <TextBlock Text="{lex:Loc SelezionareDestinazione}"/>
                        </dxe:FlyoutControl>
                        <commonResources:ButtonsBarButton x:Name="CopyEntities" Command="{Binding ItemsView.CopyEntitiesCommand}"
                                             ToolTipService.ToolTip="{lex:Loc Copia2}"
                                             Style="{StaticResource menuButtonStyle}"
                                             DesideredVisibility="{Binding ItemsView.IsCopyEntitiesEnabled, Mode=OneWay, Converter={StaticResource VisibilityConverter}}"
                                             OtherText="{lex:Loc Copia2}">
                            <Grid>
                                <TextBlock Text="&#xe03d;" Style="{StaticResource menuTextBlockStyle}"/>
                                <commons:NotificationCtrl Text="{Binding ItemsView.ReadyToPasteEntitiesCount}" Visibility="{Binding ItemsView.IsCopyEntitiesNotificationEnabled, Converter={StaticResource VisibilityConverter}}"/>
                            </Grid>
                        </commonResources:ButtonsBarButton>
                        <commonResources:ButtonsBarButton x:Name="MoveEntitiesAfter" Command="{Binding ItemsView.PasteEntitiesCommand}"
                                             ToolTipService.ToolTip="{Binding ItemsView.PasteEntitiesToolTip, Mode=TwoWay}"
                                             Style="{StaticResource menuButtonStyle}" Content="&#xe030;"
                                             DesideredVisibility="{Binding ItemsView.IsMoveEntitiesAfterEnabled, Mode=OneWay, Converter={StaticResource VisibilityConverter}}"
                                             OtherText="{Binding ItemsView.PasteEntitiesToolTip, Mode=TwoWay}"/>
                        <commonResources:ButtonsBarButton x:Name="Escape" Command="{Binding ItemsView.EscapeCommand}"
                                             ToolTipService.ToolTip="{lex:Loc Annulla}"
                                             Style="{StaticResource menuButtonStyle}" Content="&#xe037;"
                                             DesideredVisibility="{Binding ItemsView.IsEscapeEnabled, Mode=OneWay, Converter={StaticResource VisibilityConverter}}"
                                             OtherText="{lex:Loc Annulla}"/>
                        <commonResources:ButtonsBarButton x:Name="DeleteEntities" Command="{Binding ItemsView.DeleteCheckedCommand}"
                                             ToolTipService.ToolTip="{lex:Loc Elimina}"
                                             Style="{StaticResource menuButtonStyle}" Content="&#xe03a;"
                                             DesideredVisibility="{Binding ItemsView.IsDeleteEntitiesEnabled, Mode=OneWay, Converter={StaticResource VisibilityConverter}}"
                                             OtherText="Elimina"/>
                        <commonResources:ButtonsBarButton x:Name="CheckAll" Command="{Binding ItemsView.CheckAllCommand}" ToolTipService.ToolTip="{lex:Loc Seleziona tutto}" 
                                             Style="{StaticResource menuButtonStyle}" Content="&#xE09A;"
                                             DesideredVisibility="{Binding ItemsView.IsCollapseAllEnabled, Mode=OneWay, Converter={StaticResource VisibilityConverter}}"
                                             OtherText="Seleziona tutto"/>
                        <commonResources:ButtonsBarToggleButton x:Name="MultiModify" IsChecked="{Binding ItemsView.IsMultipleModify, Mode=TwoWay}"
                                                   ToolTipService.ToolTip="{lex:Loc Modifica Multipla}" Width="32"
                                                   Style="{StaticResource menuToggleButtonStyle}"
                                                   DesideredVisibility="{Binding ItemsView.IsMultipleModifyEnabled, Mode=OneWay, Converter={StaticResource VisibilityConverter}}"
                                                   OtherText="Modifica Multipla">
                            <Grid>
                                <TextBlock Text="&#xe041;" Style="{StaticResource menuTextBlockStyle}"/>
                                <commons:NotificationCtrl Text="{Binding ItemsView.ReadyToPasteEntitiesCount}" Visibility="{Binding ItemsView.IsMultipleModifyNotificationEnabled, Converter={StaticResource VisibilityConverter}}"/>
                            </Grid>
                        </commonResources:ButtonsBarToggleButton>
                        <!--<commonResources:ButtonsBarButton x:Name="ImportItems" Command="{Binding ItemsView.ImportItemsCommand}"
                                Style="{StaticResource menuButtonStyle}" Content="&#xE0BA;"
                                ToolTip="{lex:Loc ImportItemsTag}"
                                DesideredVisibility="{Binding ItemsView.IsImportItemsEnabled, Mode=OneWay, Converter={StaticResource VisibilityConverter}}"
                                OtherText="{lex:Loc ImportItemsTag}"
                                />-->
                        <commonResources:ButtonsBarDropDownButton x:Name="ImportItems" Content="&#xE0BA;" Style="{StaticResource dropDownButtonStyle}"
                                                          ToolTip="{lex:Loc ImportaArticoli}" FontSize="20"
                                                          DesideredVisibility="{Binding ItemsView.IsImportItemsEnabled, Mode=OneWay, Converter={StaticResource VisibilityConverter}}"
                                                          OtherText="{lex:Loc Importa}">
                            <commonResources:ButtonsBarDropDownButton.DropDownContent>
                                <StackPanel Orientation="Vertical" Width="40">
                                    <commonResources:ButtonsBarButton ToolTip="{lex:Loc ImportaDaFileJoin}"
                                                Command="{Binding ItemsView.ImportItemsCommand}"
                                                Content="&#xE0C3;" Style="{StaticResource dropDownContentButtonStyle}"
                                                OtherText="{lex:Loc ImportaDaFileJoin}"/>
                                    <commonResources:ButtonsBarButton ToolTip="{lex:Loc ImportaDaFileXlsx}"
                                                Command="{Binding ItemsView.ImportXlsxCommand}"
                                                Content="&#xE134;" Style="{StaticResource dropDownContentButtonStyle}"
                                                OtherText="{lex:Loc ImportaDaFileXlsx}" />
                                </StackPanel>
                            </commonResources:ButtonsBarDropDownButton.DropDownContent>
                        </commonResources:ButtonsBarDropDownButton>
                        <commonResources:ButtonsBarButton x:Name="EntityHighlighters" Command="{Binding ItemsView.EntityHighlightersCommand}" 
                                             Style="{StaticResource menuButtonStyle}"
                                             ToolTipService.ToolTip="{lex:Loc Evidenziatori}" Content="&#xe113;"
                                             DesideredVisibility="{Binding ItemsView.IsEntityHighlightersEnabled, Mode=OneWay, Converter={StaticResource VisibilityConverter}}"
                                             OtherText="{lex:Loc Evidenziatori}"/>
                        <Button Name="OtherButton" Style="{StaticResource menuButtonStyle}" Content="&#xe07e;" ContextMenuService.IsEnabled="False"/>
                    </commonResources:ButtonsBar>
                    <StackPanel Grid.Column="1" Style="{StaticResource menuStackPanelStyle}">
                        <TextBlock Text="{Binding ItemsView.CheckedEntitiesCount, Mode=OneWay}" VerticalAlignment="Center" Margin="5,0,5,0"/>
                        <TextBlock Text="!" Visibility="{Binding ItemsView.IsAlertVisible, Converter={StaticResource VisibilityConverter}}" VerticalAlignment="Center"
                                   FontSize="40" FontWeight="Bold" Foreground="{StaticResource AlertColor}"
                                   ToolTipService.ShowDuration="20000">
                            <TextBlock.ToolTip>
                                <ToolTip Placement="Top" Width="Auto" HorizontalOffset="-100"
                                         Background="Transparent" BorderThickness="0" Height="Auto">
                                    <Border Style="{StaticResource popupBorderStyle}">
                                        <TextBlock Text="{Binding ItemsView.AlertText}"/>
                                    </Border>
                                    <!--<telerik:RadCallout Content="{Binding ItemsView.AlertText}"
                                                Style="{StaticResource radCalloutStyle}" 
                                                TextAlignment="Left" Margin="0" ArrowType="None"/>-->
                                </ToolTip>
                            </TextBlock.ToolTip>
                        </TextBlock>
                    </StackPanel>
                </Grid>

                <!--<StackPanel Orientation="Horizontal" Height="50" Background="White" FlowDirection="LeftToRight" Grid.Row="1" Grid.Column="0" Margin="10,0,0,0">
                <CheckBox IsThreeState="{Binding ItemsView.Is3State, Mode=TwoWay}" IsChecked="{Binding ItemsView.IsAllChecked, Mode=TwoWay}" MinWidth="15" VerticalAlignment="Center"/>
                <TextBlock Text="Tutti" VerticalAlignment="Center" Margin="0,0,5,0"/>
                <TextBlock Text="{Binding ItemsView.EntitiesCount}" VerticalAlignment="Center"/>
            </StackPanel>-->
                <Grid Grid.Row="1">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <Grid Grid.Row="0">
                        <ToggleButton Name="NothingToggleButton" Content="{lex:Loc _Nessuno}" ToolTip="{lex:Loc Nessuno}" IsChecked="{Binding ItemsView.IsNoSelectionChecked, Mode=TwoWay}" Visibility="{Binding ItemsView.AllowNoSelection, Converter={StaticResource VisibilityConverter}}" FontSize="12" Height="40" VerticalAlignment="Center" HorizontalAlignment="Stretch" BorderThickness="0" Background="Transparent">
                            <ToggleButton.Style>
                                <Style TargetType="{x:Type ToggleButton}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate TargetType="ToggleButton">
                                                <Border x:Name="border" BorderThickness="0" Padding="20,0,0,0" Background="{TemplateBinding Background}">
                                                    <ContentPresenter HorizontalAlignment="Left" VerticalAlignment="Center"/>
                                                </Border>
                                                <ControlTemplate.Triggers>
                                                    <Trigger Property="IsChecked" Value="true">
                                                        <Setter Property="Background" TargetName="border" Value="{StaticResource EntitySelectionColor}"/>
                                                    </Trigger>
                                                </ControlTemplate.Triggers>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ToggleButton.Style>
                        </ToggleButton>
                    </Grid>

                    <ListView x:Name="TagItemList" ItemsSource="{Binding ItemsView.VirtualEntities}" Margin="0,0,0,10" Foreground="#193C3A3A" HorizontalAlignment="Stretch" Grid.Row="1"
                          SelectionMode="Single" AllowDrop="True" SelectedIndex="{Binding ItemsView.SelectedIndex, Mode=TwoWay}"
                          BorderThickness="0" VirtualizingStackPanel.IsVirtualizing="True" VirtualizingStackPanel.VirtualizationMode="Recycling"
                          ScrollViewer.IsDeferredScrollingEnabled="True" dz:GridViewSort.AutoSort="False" dz:VirtualListLoadingIndicator.IsAttached="False" ScrollViewer.HorizontalScrollBarVisibility="Disabled"
                          HorizontalContentAlignment="Stretch"
                          >
                        <ListView.InputBindings>
                            <KeyBinding Gesture="Ctrl+A" Command="{Binding ItemsView.CtrlACheckedCommand}"/>
                        </ListView.InputBindings>
                        <!--<ListView.ContextMenu>
                            <ContextMenu >
                                <MenuItem x:Name="Paste" Header="Incolla" Command="{Binding ItemsView.PasteClipboardCommand}"/>
                            </ContextMenu>
                        </ListView.ContextMenu>-->
                        <ListView.ItemTemplate>
                            <DataTemplate>
                                <Grid Name="ListViewItem" MouseLeftButtonDown="ListViewItem_MouseLeftButtonDown">
                                    <Grid.Resources>
                                        <ContextMenu x:Key="ItemContextMenu">
                                            <!--<MenuItem x:Name="Copy" Header="{lex:Loc Copia2}" Command="{Binding Data.CopyToClipboardCommand}" IsEnabled="{Binding Data.IsCopyToClipboardEnabled}"/>
                                            <MenuItem x:Name="CopyWithHeaders" Header="{lex:Loc Copia con intestazioni}" Command="{Binding Data.CopyWithHeadersToClipboardCommand}" IsEnabled="{Binding Data.IsCopyWithHeadersToClipboardEnabled}"/>
                                            <MenuItem x:Name="Paste" Header="{lex:Loc Incolla}" Command="{Binding Data.PasteClipboardCommand}" IsEnabled="{Binding Data.IsPasteClipboardEnabled}"/>-->
                                            <MenuItem x:Name="Copy" Command="{Binding Data.CopyToClipboardCommand}" Header="{lex:Loc Copia2}" IsEnabled="{Binding Data.IsAnyChecked}">
                                                <MenuItem.Icon>
                                                    <TextBlock Text="&#xe03d;" Style="{StaticResource smallTextBlockStyle}" FontSize="16" Width="16"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem x:Name="Paste" Command="{Binding Data.PasteClipboardCommand}"  Header="{lex:Loc Incolla}" IsEnabled="{Binding Data.IsPasteClipboardEnabled}">
                                                <MenuItem.Icon>
                                                    <TextBlock Text="&#xe03f;" Style="{StaticResource smallTextBlockStyle}" FontSize="16" Width="16"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem x:Name="CopyText" Command="{Binding Data.CopyTextToClipboardCommand}" Header="{lex:Loc CopiaNegliAppunti}" IsEnabled="{Binding Data.IsAnyChecked}">
                                                <MenuItem.Icon>
                                                    <TextBlock Text="&#xe03e;" Style="{StaticResource smallTextBlockStyle}" FontSize="16" Width="16"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                        </ContextMenu>
                                    </Grid.Resources>
                                    <Grid.Style>
                                        <Style TargetType="{x:Type Grid}" >
                                            <Setter Property="ContextMenu" Value="{StaticResource ItemContextMenu}" />
                                        </Style>
                                    </Grid.Style>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid  Grid.Column="0" Background="{Binding Data.Background}">
                                        <Grid.InputBindings>
                                            <!--<MouseBinding Gesture="LeftClick" Command="{Binding Data.CheckedCommand}"/>-->
                                            <MouseBinding Gesture="Shift+LeftClick" Command="{Binding Data.ShiftCheckedCommand}"/>
                                            <MouseBinding Gesture="Ctrl+LeftClick" Command="{Binding Data.CtrlCheckedCommand}"/>
                                            <MouseBinding Gesture="Ctrl+Shift+LeftClick" Command="{Binding Data.ShiftCtrlCheckedCommand}"/>

                                        </Grid.InputBindings>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*"/>
                                        </Grid.ColumnDefinitions>
                                        <!--<Rectangle Visibility="{Binding Data.IsReadyToPaste, Converter={StaticResource VisibilityConverter}}" StrokeDashArray="2.0 2.0" Stroke="Black" RadiusX="3" RadiusY="3"/>-->
                                        <Grid Grid.Column="0">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition x:Name="ExpandButtonColumn" Width="20"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>
                                            <TextBlock Text=" _" Grid.Column="0" Width="20" Foreground="Gray"/>
                                            <Grid Grid.Column="1">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition x:Name="IconsColumn" Width="20"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid Height="36">
                                                    <Grid.RowDefinitions>
                                                        <RowDefinition/>
                                                    </Grid.RowDefinitions>
                                                    <TextBlock Grid.Column="0" Text="{Binding Data.AttributoNome}" Foreground="Black" Height="24" />
                                                </Grid>
                                                <StackPanel Name="Icone" Orientation="Vertical" Grid.Column="1"
                                                            Background="{Binding Data.HighlighterColor}">
                                                    <TextBlock Name="FindIcon" Visibility="{Binding Data.IsSearched, Mode=OneWay, Converter={StaticResource VisibilityConverter}}" Padding="3" Style="{StaticResource smallTextBlockStyle}" Text="&#xe067;"/>
                                                    <TextBlock Name="MoveIcon" Visibility="{Binding Data.IsReadyToMove, Mode=OneWay, Converter={StaticResource VisibilityConverter}}" Padding="3" Style="{StaticResource smallTextBlockStyle}" Text="&#xe032;"/>
                                                    <TextBlock Name="CopyIcon" Visibility="{Binding Data.IsCopied, Mode=OneWay, Converter={StaticResource VisibilityConverter}}" Padding="3" Style="{StaticResource smallTextBlockStyle}" Text="&#xe03d;"/>
                                                    <TextBlock Name="MultiModifyIcon" Visibility="{Binding Data.IsReadyToMultiModify, Mode=OneWay, Converter={StaticResource VisibilityConverter}}" Padding="3" Style="{StaticResource smallTextBlockStyle}" Text="&#xe041;"/>
                                                </StackPanel>
                                            </Grid>
                                        </Grid>
                                    </Grid>
                                    <!--</Border>-->
                                </Grid>
                            </DataTemplate>
                        </ListView.ItemTemplate>
                    </ListView>
                </Grid>
            </Grid>
            <GridSplitter Grid.Column="1" HorizontalAlignment="Stretch" Style="{StaticResource gridSplitterStyle}" />
            <Grid Name="DetailGrid" Grid.Column="2" HorizontalAlignment="Stretch" MinWidth="200" >
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>
                <StackPanel Grid.Row="0" Style="{StaticResource menuStackPanelStyle}">
                    <Button Name="ScrollToCurrentEntity" Command="{Binding ItemsView.ScrollToCurrentEntityCommand}" ToolTip="{lex:Loc Vai a...}" Style="{StaticResource menuButtonStyle}" Content="&#xe06a;" Visibility="{Binding ItemsView.IsScrollToCurrentEntityEnabled, Mode=OneWay, Converter={StaticResource VisibilityConverter}}"/>
                    <!--<Button Name="SetAttributi" ToolTip="{lex:Loc Imposta attributi}" Click="SetAttributi_Click"
                            Style="{StaticResource menuButtonStyle}" Content="&#xe069;" IsEnabled="True"/>-->
                </StackPanel>
                <ListView x:Name="DetailListView" ItemsSource="{Binding ItemsView.AttributiEntities.AttributiValoriComuniView}" Margin="10" Background="White" RenderTransformOrigin="0.5,0.5" Grid.Row="1"  HorizontalContentAlignment="Stretch" HorizontalAlignment="Stretch" BorderThickness="0" KeyboardNavigation.TabNavigation="Cycle" PreviewMouseLeftButtonDown="listViewDetail_PreviewMouseLeftButtonDown" PreviewMouseMove="listViewDetail_PreviewMouseMove" DragEnter="listViewDetail_DragEnter" AllowDrop="True" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.CanContentScroll="False">
                    <ListView.ItemContainerStyle>
                        <Style TargetType="ListViewItem">
                            <Setter Property="VerticalContentAlignment" Value="Stretch"/>
                            <Setter Property="Padding" Value="0"/>
                            <Setter Property="IsTabStop" Value="False"/>
                        </Style>
                    </ListView.ItemContainerStyle>
                    <ListView.ItemTemplate>
                        <DataTemplate>
                            <Grid Name="DetailListViewItem" Background="Transparent">
                                <Grid.ContextMenu>
                                    <ContextMenu>
                                        <MenuItem Header="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.DataContext.CopyAttributoSyntaxMenuItemHeader}"
							                        Command="{Binding RelativeSource={RelativeSource AncestorType=ContextMenu}, Path=PlacementTarget.DataContext.CopyAttributoSyntaxCommand}">
                                            <MenuItem.Icon>
                                                <TextBlock Style="{StaticResource smallTextBlockStyle}" Text="&#xe03d;" FontSize="13"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                    </ContextMenu>
                                </Grid.ContextMenu>    
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="3"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid Grid.Column="0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="20"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Name="DragRectangle" Text="{Binding Etichetta}" VerticalAlignment="Top" Grid.Column="0" HorizontalAlignment="Stretch" Width="{Binding EtichettaWidth}">
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock">
                                                <Style.Triggers>
                                                    <!--IsHilighted-->
                                                    <DataTrigger Binding="{Binding IsHilighted}" Value="true">
                                                        <Setter Property="Background" Value="{StaticResource SelectedColor}"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsHilighted}" Value="false">
                                                        <Setter Property="Background" Value="Transparent"/>
                                                    </DataTrigger>
                                                    <!--IsGuid-->
                                                    <DataTrigger Binding="{Binding IsSourceGuid}" Value="true">
                                                        <Setter Property="FontWeight" Value="Bold"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding IsSourceGuid}" Value="false">
                                                        <Setter Property="FontWeight" Value="Normal"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>

                                    </TextBlock>
                                    <Button x:Name="ExpandButton" Command="{Binding ExpandCommand}" Visibility="{Binding IsExpandable, Converter={StaticResource VisibilityConverter}}" Grid.Column="1" Content="{Binding Path=IsExpanded, Mode=TwoWay, Converter={StaticResource expandCollapseVerticalGlyphConverter}}" IsTabStop="False" VerticalAlignment="Top" Style="{StaticResource smallButtonStyle}" Foreground="Gray"/>
                                </Grid>
                                <GridSplitter Grid.Column="1" HorizontalAlignment="Stretch" Style="{StaticResource gridSplitterStyle}" Background="Transparent" DragCompleted="GridSplitter_DragCompleted" IsTabStop="False"/>
                                <ContentControl Name="ValoreControl" Content="{Binding ValoreView, Mode=OneWay}" Grid.Column="2" ContentTemplateSelector="{StaticResource ValoreAttributoTemplateSelector}"  Visibility="{Binding IsValoreViewVisible, Mode=TwoWay, Converter={StaticResource VisibilityConverter}}" VerticalAlignment="Top" TabIndex="{Binding TabIndex}" IsTabStop="False" Height="{Binding Height}" Padding="0"/>
                            </Grid>
                        </DataTemplate>
                    </ListView.ItemTemplate>
                    <ListView.GroupStyle>
                        <GroupStyle>
                            <GroupStyle.ContainerStyle>
                                <Style TargetType="{x:Type GroupItem}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Expander IsExpanded="{Binding Items[0].IsGroupExpanded}" Style="{StaticResource expanderStyle}">
                                                    <Expander.Header>
                                                        <StackPanel Orientation="Horizontal">
                                                            <TextBlock Text="{Binding Name}" FontWeight="Bold" Foreground="Gray" FontSize="16" />
                                                        </StackPanel>
                                                    </Expander.Header>
                                                    <ItemsPresenter/>
                                                </Expander>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </GroupStyle.ContainerStyle>
                        </GroupStyle>
                    </ListView.GroupStyle>
                </ListView>
            </Grid>
        </Grid>
        <!--<GridSplitter Grid.Column="1" HorizontalAlignment="Stretch" />-->
        <Border Grid.Column="1" BorderBrush="LightGray" BorderThickness="1">
            <Grid Name="RightSplitGrid" HorizontalAlignment="Stretch">
                <Grid Style="{StaticResource rightSplitGridStyle}" Grid.Column="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="50"/>
                    </Grid.ColumnDefinitions>
                    <ContentControl Name="RightSplitPaneControl" Content="{Binding RightPanesView.CurrentControlView, Mode=TwoWay}" 
                                    Visibility="{Binding RightPanesView.IsPaneOpen, Mode=OneWay, Converter={StaticResource VisibilityConverter}}" 
                                    ContentTemplateSelector="{StaticResource RightSplitPaneTemplateSelector}" VerticalContentAlignment="Stretch"
                                    HorizontalContentAlignment="Stretch" Grid.Column="0"  AllowDrop="True" DragOver="RightSplitPaneControl_DragOver"
                                    Drop="RightSplitPaneControl_Drop" Width="150" BorderThickness="0"/>
                    <Grid Grid.Column="1" >
                        <Grid.RowDefinitions>
                            <RowDefinition Height="50"/>
                            <RowDefinition Height="*"/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="OpenPanel" IsChecked="{Binding RightPanesView.IsPaneOpen, Mode=TwoWay}" Width="50" VerticalAlignment="Stretch" ToolTipService.ToolTip="{lex:Loc EspandiCollassa}" AllowDrop="True" Grid.Row="0" Margin="0"
                                  Style="{StaticResource menuToggleButtonStyle}" Content="{Binding Path=RightPanesView.IsPaneOpen, Mode=TwoWay, Converter={StaticResource expandCollapseHorizontalGlyphConverter}}"/>
                        <Grid Grid.Row="1" >
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <ToggleButton x:Name="FilterToggleButton" IsChecked="{Binding RightPanesView.IsFilterPaneOpen, Mode=TwoWay}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="Center" ToolTipService.ToolTip="{lex:Loc TrovaFiltra}" AllowDrop="True" Grid.Row="0"
                                          Margin="0" Style="{StaticResource filterToggleButtonStyle}" BorderThickness="0,1,0,0" BorderBrush="Gray"
                                          Drop="FilterToggleButton_Drop">
                                <StackPanel Orientation="Vertical" FlowDirection="LeftToRight">
                                    <TextBlock Style="{StaticResource smallTextBlockStyle}" Text="&#xe07f;" FontSize="20"  HorizontalAlignment="Center" />
                                    <TextBlock Text="{Binding RightPanesView.FilterView.ItemsCount}" FontSize="12" HorizontalAlignment="Center" Visibility="{Binding RightPanesView.FilterView.IsItemsCountVisible, Converter={StaticResource VisibilityConverter}}"/>
                                </StackPanel>
                            </ToggleButton>
                            <ToggleButton x:Name="SortToggleButton" IsChecked="{Binding RightPanesView.IsSortPaneOpen, Mode=TwoWay}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" VerticalContentAlignment="Center" ToolTipService.ToolTip="{lex:Loc Ordina}" Grid.Row="1" AllowDrop="True"
                                          Margin="0" Style="{StaticResource sortToggleButtonStyle}" BorderThickness="0,1,0,0" BorderBrush="Gray"
                                          Drop="SortToggleButton_Drop">
                                <StackPanel Orientation="Vertical" FlowDirection="LeftToRight">
                                    <TextBlock Style="{StaticResource smallTextBlockStyle}" Text="&#xe066;" FontSize="20" HorizontalAlignment="Center" />
                                    <TextBlock Text="{Binding RightPanesView.SortView.ItemsCount}" FontSize="12" HorizontalAlignment="Center" Visibility="{Binding RightPanesView.SortView.IsItemsCountVisible, Converter={StaticResource VisibilityConverter}}"/>
                                </StackPanel>
                            </ToggleButton>
                            <Rectangle HorizontalAlignment="Right" Width="50" VerticalAlignment="Stretch" Grid.Row="3"/>
                        </Grid>
                    </Grid>
                </Grid>
            </Grid>
        </Border>
    </Grid>
</UserControl>
